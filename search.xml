<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Maven Archetype搭建模板工程</title>
      <link href="/2021/11/22/Maven-Archetype%E6%90%AD%E5%BB%BA%E6%A8%A1%E6%9D%BF%E5%B7%A5%E7%A8%8B/"/>
      <url>/2021/11/22/Maven-Archetype%E6%90%AD%E5%BB%BA%E6%A8%A1%E6%9D%BF%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Archetype简介"><a href="#Archetype简介" class="headerlink" title="Archetype简介"></a>Archetype简介</h2><ul><li>Archetype是一个maven项目模板工具包，帮助用户创建 Maven 项目模板，并为用户提供生成这些项目模板的参数化版本的方法</li></ul><h2 id="Archetype创建"><a href="#Archetype创建" class="headerlink" title="Archetype创建"></a>Archetype创建</h2><h3 id="创建一个maven项目"><a href="#创建一个maven项目" class="headerlink" title="创建一个maven项目"></a>创建一个maven项目</h3><ul><li>任意创建一个maven项目，单module或多module都可以，示例如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">demo-01 &#x2F;&#x2F;主工程</span><br><span class="line"> - demo-01-admmin-java &#x2F;&#x2F;后台服务应用</span><br><span class="line"> - demo-01-common &#x2F;&#x2F;外围依赖服务聚合组件</span><br><span class="line"> - demo-01-dao &#x2F;&#x2F;业务db操作组件</span><br><span class="line"> - demo-01-service-api &#x2F;&#x2F;对外服务接口契约定义</span><br><span class="line"> - demo-01-service-java &#x2F;&#x2F;对外服务应用</span><br><span class="line"> - demo-01-util &#x2F;&#x2F;业务工具组件</span><br></pre></td></tr></table></figure><ul><li>在主pmo文件中引入maven-archetype-plugin，如下所示：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-archetype-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure><h3 id="生成archetype"><a href="#生成archetype" class="headerlink" title="生成archetype"></a>生成archetype</h3><ul><li>在刚才创建的maven工程根目录执行如下maven命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:create-from-project</span><br></pre></td></tr></table></figure><ul><li>如果出现类似<code>Could not resolve dependencies for project xxx</code>错误，是由于多module依赖导致，执行如下命令之后，再执行上述命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure><h3 id="发布archetype"><a href="#发布archetype" class="headerlink" title="发布archetype"></a>发布archetype</h3><ul><li>生成archetype成功之后，会在项目根路径下生成target目录</li><li>进入target/generated-sources/archetype目录,目录结构如下，执行<code>mvn install</code>，将模板安装到本地，也可以deploy到私服</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">├── pom.xml</span><br><span class="line">├── src</span><br><span class="line">│   ├── main</span><br><span class="line">│   │   └── resources</span><br><span class="line">│   │       ├── META-INF</span><br><span class="line">│   │       │   └── maven</span><br><span class="line">│   │       │       └── archetype-metadata.xml      &#x2F;&#x2F;模板描述文件</span><br><span class="line">│   │       └── archetype-resources                 &#x2F;&#x2F;模板资源目录，以下是多module资源文件</span><br><span class="line">│   │           ├── README.md</span><br><span class="line">│   │           ├── __rootArtifactId__-admin-java</span><br><span class="line">│   │           │   ├── pom.xml</span><br><span class="line">│   │           │   └── src</span><br><span class="line">│   │           ├── __rootArtifactId__-common</span><br><span class="line">│   │           │   ├── pom.xml</span><br><span class="line">│   │           │   └── src</span><br><span class="line">│   │           ├── __rootArtifactId__-dao</span><br><span class="line">│   │           │   ├── pom.xml</span><br><span class="line">│   │           │   └── src</span><br><span class="line">│   │           ├── __rootArtifactId__-service-api</span><br><span class="line">│   │           │   ├── pom.xml</span><br><span class="line">│   │           │   └── src</span><br><span class="line">│   │           ├── __rootArtifactId__-service-java</span><br><span class="line">│   │           │   ├── pom.xml</span><br><span class="line">│   │           │   └── src</span><br><span class="line">│   │           ├── __rootArtifactId__-util</span><br><span class="line">│   │           │   ├── pom.xml</span><br><span class="line">│   │           │   └── src</span><br><span class="line">│   │           └── pom.xml</span><br><span class="line">│   └── test</span><br><span class="line">│       └── resources</span><br><span class="line">│           └── projects</span><br><span class="line">│               └── basic</span><br><span class="line">│                   ├── archetype.properties</span><br><span class="line">│                   └── goal.txt</span><br></pre></td></tr></table></figure><ul><li><a href="http://maven.apache.org/archetype/archetype-models/archetype-descriptor/archetype-descriptor.html" target="_blank" rel="noopener">archetype-metadata.xml配置参考</a></li></ul><h2 id="Archetype使用"><a href="#Archetype使用" class="headerlink" title="Archetype使用"></a>Archetype使用</h2><ul><li><a href="http://maven.apache.org/archetype/maven-archetype-plugin/generate-mojo.html" target="_blank" rel="noopener">Maven Archetype Plugin文档</a></li></ul><h3 id="archetype命令行参数说明"><a href="#archetype命令行参数说明" class="headerlink" title="archetype命令行参数说明"></a>archetype命令行参数说明</h3><ul><li>mvn archetype:generate：构建maven项目起始命令</li><li>interactiveMode：交互模式，默认为true，在交互模式下运行命令，要求用户指定选用的原型，以及生成项目模版的groupId、artifactId、version、package等属性，否则执行失败</li><li>archetypeCatalog：Archetype查找规则</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">archetype分类，这里按位置分类有:</span><br><span class="line">‘local’  本地，通常是本地仓库的archetype-catalog.xml文件</span><br><span class="line">‘remote’  远程，是maven的中央仓库</span><br><span class="line">file:&#x2F;&#x2F;...&#39; 直接指定本地文件位置archetype-catalog.xml</span><br><span class="line">http:&#x2F;&#x2F;...&#39; or &#39;https:&#x2F;&#x2F;...&#39;  网络上的文件位置 archetype-catalog.xml</span><br><span class="line">‘internal’ maven-archetype-plugin内置的</span><br><span class="line">默认值是remote，local，创建原型时设置成internal，根据自定义的原型创建自定义工程时设置成local</span><br></pre></td></tr></table></figure><ul><li>archetypeRepository：仓库URL地址；不指定，则默认从中央库查找</li><li>archetypeGroupId：原型的groupId；默认值为org.apache.maven.archetypes</li><li>archetypeArtifactId：原型的artifactId；默认值为maven-archetype-quickstart</li><li>archetypeVersion：原型的version；默认值为1.0</li><li>groupId：生成项目的groupId；必选</li><li>artifactId：生成项目的artifactId；必选</li><li>version：生成项目的version；默认值1.0-SNAPSHOT</li><li>package：生成项目的源码包结构；默认值使用${groupId}</li><li>basedir：项目生成的目录；默认值为当前目录</li></ul><h3 id="基于archetype模板构建新工程，命令示例如下："><a href="#基于archetype模板构建新工程，命令示例如下：" class="headerlink" title="基于archetype模板构建新工程，命令示例如下："></a>基于archetype模板构建新工程，命令示例如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate  \</span><br><span class="line">    -DgroupId&#x3D;xxx \                 &#x2F;&#x2F;替换成自定义groupId</span><br><span class="line">    -DartifactId&#x3D;xxx \              &#x2F;&#x2F;替换成自定义artifactId</span><br><span class="line">    -Dversion&#x3D;xxx \                 &#x2F;&#x2F;替换成自定义version</span><br><span class="line">    -Dpackage&#x3D;xxx \                 &#x2F;&#x2F;替换成自定义package路径</span><br><span class="line">    -DarchetypeArtifactId&#x3D;xxx \     &#x2F;&#x2F;替换成自己生成的模板工程artifactId</span><br><span class="line">    -DarchetypeGroupId&#x3D;xxx \        &#x2F;&#x2F;替换成自己生成的模板工程groupId</span><br><span class="line">    -DarchetypeVersion&#x3D;xxx          &#x2F;&#x2F;替换成自己生成的模板工程version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
            <tag> archetype </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA+EmmyLua Lua开发环境搭建</title>
      <link href="/2021/11/12/IDEA-EmmyLua-Lua%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/11/12/IDEA-EmmyLua-Lua%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="IDEA安装EmmyLua插件"><a href="#IDEA安装EmmyLua插件" class="headerlink" title="IDEA安装EmmyLua插件"></a>IDEA安装EmmyLua插件</h3><ul><li><a href="https://emmylua.github.io/installation/repo.html" target="_blank" rel="noopener">https://emmylua.github.io/installation/repo.html</a></li></ul><h3 id="下载MoDebug"><a href="#下载MoDebug" class="headerlink" title="下载MoDebug"></a>下载MoDebug</h3><ul><li><a href="https://github.com/pkulchenko/MobDebug" target="_blank" rel="noopener">https://github.com/pkulchenko/MobDebug</a></li><li>从github下载MobDebug项目，把项目中的mobdebug.lua，拷贝到项目的src目录下，内核基于mobdebug.lua </li></ul><h3 id="关键步骤（mac安装）"><a href="#关键步骤（mac安装）" class="headerlink" title="关键步骤（mac安装）"></a>关键步骤（mac安装）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 安装lua</span><br><span class="line">brew install lua</span><br><span class="line"></span><br><span class="line">-- 安装luarocks工具</span><br><span class="line">brew install luarocks</span><br><span class="line"></span><br><span class="line">-- 安装luasocket</span><br><span class="line">luarocks install luasocket</span><br><span class="line"></span><br><span class="line">-- 安装lua-cjson（可选）</span><br><span class="line">luarocks install lua-cjson 2.1.0-1</span><br><span class="line"></span><br><span class="line">-- 安装redis-lua（可选）</span><br><span class="line">luarocks install redis-lua</span><br></pre></td></tr></table></figure><h3 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h3><ul><li><a href="https://emmylua.github.io/run/remote.html" target="_blank" rel="noopener">https://emmylua.github.io/run/remote.html</a></li></ul><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">--- Generated by EmmyLua(https://github.com/EmmyLua)</span><br><span class="line">--- Created by gy.</span><br><span class="line">--- DateTime: 2021/10/27 20:16</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">-- 调试配置相关代码，实际使用不需要 start--</span><br><span class="line">--require(<span class="string">"mobdebug"</span>).start()</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> cjson = require <span class="string">'cjson'</span></span><br><span class="line"><span class="built_in">local</span> redis = require <span class="string">'redis'</span></span><br><span class="line"><span class="built_in">local</span> host = <span class="string">"127.0.0.1"</span></span><br><span class="line"><span class="built_in">local</span> port = 6379</span><br><span class="line">client = redis.connect(host, port)</span><br><span class="line"></span><br><span class="line">redis.call = <span class="keyword">function</span>(cmd, ...)</span><br><span class="line">    <span class="built_in">return</span> assert(load(<span class="string">'return client:'</span> .. string.lower(cmd) .. <span class="string">'(...)'</span>))(...)</span><br><span class="line">end</span><br><span class="line">-- 调试配置相关代码，实际使用不需要 end--</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> KEYS = &#123; <span class="string">"test1"</span>, <span class="string">"test2"</span> &#125;</span><br><span class="line"><span class="built_in">local</span> ARGV = &#123; <span class="string">"1"</span>, <span class="string">'&#123;\"age\":\"23\",\"name\":\"test\"&#125;'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> value = redis.call(<span class="string">"GET"</span>, <span class="string">"key1"</span>)</span><br><span class="line"><span class="built_in">print</span>(value)</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> queueListRedisKey = KEYS[1]</span><br><span class="line"><span class="built_in">print</span>(queueListRedisKey)</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> userInfoObj = cjson.decode(ARGV[2])</span><br><span class="line"><span class="built_in">print</span>(cjson.encode(userInfoObj))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lua </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ngrok实现内网穿透</title>
      <link href="/2021/07/22/ngrok%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>/2021/07/22/ngrok%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h3><p>申请一个自己的域名，假设用到的域名是<code>ngrok.xxx.com</code>，需要将<code>ngrok.xxx.com</code>和<code>*.ngrok.xxx.com</code>解析到自己的服务器上面</p><h3 id="配置go语言环境"><a href="#配置go语言环境" class="headerlink" title="配置go语言环境"></a>配置go语言环境</h3><p>ngrok是go语音写的，服务器上需要配置go语言环境，相关配置命令如下：</p><ul><li><p>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载</span></span><br><span class="line">wget https://storage.googleapis.com/golang/go1.9.1.linux-amd64.tar.gz</span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">tar -zxvf go1.9.1.linux-amd64.tar.gz</span><br><span class="line"><span class="comment">#移动到local目录</span></span><br><span class="line">mv go /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure></li><li><p>创建软连接</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建软连接</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/go/bin/* /usr/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试是否配置成功</span></span><br><span class="line">go env</span><br></pre></td></tr></table></figure><h3 id="安装ngrok"><a href="#安装ngrok" class="headerlink" title="安装ngrok"></a>安装ngrok</h3><ul><li>下载源码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/inconshreveable/ngrok.git</span><br></pre></td></tr></table></figure><ul><li>生成证书</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入ngrok源码的目录</span></span><br><span class="line"><span class="built_in">cd</span> ngrok</span><br><span class="line"><span class="comment"># 设置域名，这里使用  ngrok.xxx.com</span></span><br><span class="line"><span class="built_in">export</span> NGROK_DOMAIN=<span class="string">"ngrok.xxx.com"</span></span><br><span class="line"><span class="comment"># 然后依次执行以下命令即可</span></span><br><span class="line">openssl genrsa -out rootCA.key 2048</span><br><span class="line">openssl req -x509 -new -nodes -key rootCA.key -subj <span class="string">"/CN=<span class="variable">$NGROK_DOMAIN</span>"</span> -days 5000 -out rootCA.pem</span><br><span class="line">openssl genrsa -out device.key 2048</span><br><span class="line">openssl req -new -key device.key -subj <span class="string">"/CN=<span class="variable">$NGROK_DOMAIN</span>"</span> -out device.csr</span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000</span><br><span class="line"><span class="comment"># 替换原来证书</span></span><br><span class="line">cp rootCA.pem ../assets/client/tls/ngrokroot.crt</span><br><span class="line">cp device.crt ../assets/server/tls/snakeoil.crt</span><br><span class="line">cp device.key ../assets/server/tls/snakeoil.key</span><br></pre></td></tr></table></figure><ul><li>编译服务端</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/ngrok</span><br><span class="line">GOOS=<span class="variable">$GOOS</span> GOARCH=<span class="variable">$GOARCH</span> make release-server</span><br></pre></td></tr></table></figure><ul><li>编译各大平台客户端</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、Linux 32位：linux 386</span></span><br><span class="line"><span class="comment"># 2、Linux 64位：linux amd64</span></span><br><span class="line"><span class="comment"># 3、Windows 32位：windows 386</span></span><br><span class="line"><span class="comment"># 4、Windows 64位：windows amd64</span></span><br><span class="line"><span class="comment"># 5、Mac OS 32位：darwin 386</span></span><br><span class="line"><span class="comment"># 6、Mac OS 64位：darwin amd64</span></span><br><span class="line"><span class="comment"># 7、Linux ARM：linux arm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对应以上各平台，将$1、$2替换成对应的值</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/ngrok/</span><br><span class="line"><span class="comment"># GOOS=$1 GOARCH=$2 make release-client</span></span><br><span class="line"><span class="comment"># 如编译Mac OS 64位客户端</span></span><br><span class="line">GOOS=darwin GOARCH=amd64 make release-client</span><br></pre></td></tr></table></figure><ul><li>生成的客户端文件示例</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.../ngrok/bin<span class="variable">$tree</span></span><br><span class="line">.</span><br><span class="line">|-- darwin_amd64</span><br><span class="line">|   `-- ngrok</span><br><span class="line">|-- go-bindata</span><br><span class="line">|-- linux_386</span><br><span class="line">|   |-- ngrok</span><br><span class="line">|   `-- ngrokd</span><br><span class="line">|-- linux_arm</span><br><span class="line">|   `-- ngrok</span><br><span class="line">`-- windows_amd64</span><br><span class="line">    `-- ngrok.exe</span><br></pre></td></tr></table></figure><h3 id="启动服务端"><a href="#启动服务端" class="headerlink" title="启动服务端"></a>启动服务端</h3><p>开启后台运行，注意端口<code>8001</code>，<code>8443</code>和<code>4443</code>开启防火墙或安全规则放行，端口也可自行定义<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup /usr/<span class="built_in">local</span>/ngrok/bin/ngrokd -domain=<span class="string">"ngrok.xxx.com"</span> -tlsCrt=<span class="string">"/usr/local/ngrok/server.crt"</span> -tlsKey=<span class="string">"/usr/local/ngrok/server.key"</span> -httpAddr=<span class="string">":8001"</span> -httpsAddr=<span class="string">":8443"</span> -tunnelAddr=<span class="string">":4443"</span> -<span class="built_in">log</span>-level=<span class="string">"INFO"</span> &gt;/var/<span class="built_in">log</span>/ngrok.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p>将上面生成的客户端可执行文件拷贝到需要内网穿透的设备上即可，这里直接说多域名和多TCP内网穿透配置文件，直接在客户端同级目录下创建ngrok.cfg配置文件，注意server_addr端口要与tunnelAddr对应，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server_addr: ngrok.xxx.com:4443</span><br><span class="line">trust_host_root_certs: <span class="literal">false</span></span><br><span class="line">tunnels:</span><br><span class="line"> weixin:</span><br><span class="line">  subdomain: weixin</span><br><span class="line">  proto:</span><br><span class="line">   http: 8002</span><br><span class="line"> about:</span><br><span class="line">  subdomain: about</span><br><span class="line">  proto:</span><br><span class="line">   http: 192.168.0.1:80</span><br><span class="line"> ssh:</span><br><span class="line">  remote_port: 2020</span><br><span class="line">  proto:</span><br><span class="line">   tcp: 22</span><br></pre></td></tr></table></figure><h3 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h3><ul><li>启动特定转发</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ngrok -config ngrok.cfg -<span class="built_in">log</span> ngrok.log start weixin</span><br></pre></td></tr></table></figure><p>注：<code>-log ngrok.log</code>可以查看客户端日志，可去掉</p><ul><li>将所有配置转发</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ngrok -config ngrok.cfg -<span class="built_in">log</span> ngrok.log start-all</span><br></pre></td></tr></table></figure><p>启动后出现<code>online</code>字样说明内网穿透成功</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ngrok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac环境RocketMQ安装</title>
      <link href="/2021/07/21/Mac%E7%8E%AF%E5%A2%83RocketMQ%E5%AE%89%E8%A3%85/"/>
      <url>/2021/07/21/Mac%E7%8E%AF%E5%A2%83RocketMQ%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官网地址：<a href="http://rocketmq.apache.org/docs/quick-start/" target="_blank" rel="noopener">http://rocketmq.apache.org/docs/quick-start/</a></p><h3 id="运维管理"><a href="#运维管理" class="headerlink" title="运维管理"></a>运维管理</h3><p><a href="https://github.com/apache/rocketmq/blob/master/docs/cn/operation.md" target="_blank" rel="noopener">https://github.com/apache/rocketmq/blob/master/docs/cn/operation.md</a></p><h3 id="rocketMq-安装"><a href="#rocketMq-安装" class="headerlink" title="rocketMq 安装"></a>rocketMq 安装</h3><h4 id="解压与编译"><a href="#解压与编译" class="headerlink" title="解压与编译"></a>解压与编译</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">unzip rocketmq-all-4.9.0-source-release.zip</span><br><span class="line"><span class="built_in">cd</span> rocketmq-all-4.9.0/</span><br><span class="line">mvn -Prelease-all -DskipTests clean install -U</span><br><span class="line"><span class="built_in">cd</span> distribution/target/rocketmq-4.9.0/rocketmq-4.9.0</span><br></pre></td></tr></table></figure><h4 id="启动Name-Server服务"><a href="#启动Name-Server服务" class="headerlink" title="启动Name Server服务"></a>启动Name Server服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.启动NameServer</span></span><br><span class="line">nohup sh bin/mqnamesrv &amp;</span><br><span class="line"><span class="comment"># 2.查看启动日志</span></span><br><span class="line">tail -f ~/logs/rocketmqlogs/namesrv.log</span><br></pre></td></tr></table></figure><h4 id="修改内存大小"><a href="#修改内存大小" class="headerlink" title="修改内存大小"></a>修改内存大小</h4><p>RocketMq默认内存较大，启动Borker如果因为内存不足启动失败，需要修改如下配置文件，修改JVM内存大小</p><ul><li>runborker.sh</li><li>runserver.sh</li></ul><p>改为： JAVA_OPT=”${JAVA_OPT} -server -Xms256m -Xmx256m -Xmn128m”</p><h4 id="启动borker"><a href="#启动borker" class="headerlink" title="启动borker"></a>启动borker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.启动Broker</span></span><br><span class="line">nohup sh bin/mqbroker -n 127.0.0.1:9876 &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义配置文件</span></span><br><span class="line"><span class="comment"># nohup sh bin/mqbroker -n 192.168.0.5:9876 -c conf/broker.conf autoCreateTopicEnable=true &amp;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.查看启动日志</span></span><br><span class="line">tail -f ~/logs/rocketmqlogs/broker.log</span><br></pre></td></tr></table></figure><h4 id="关闭rocketMq"><a href="#关闭rocketMq" class="headerlink" title="关闭rocketMq"></a>关闭rocketMq</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭NameServer</span></span><br><span class="line">sh bin/mqshutdown namesrv</span><br><span class="line"><span class="comment"># 关闭Borker</span></span><br><span class="line">sh bin/mqshutdown broker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于docker配置mysql主从复制</title>
      <link href="/2021/07/20/%E5%9F%BA%E4%BA%8Edocker%E9%85%8D%E7%BD%AEmysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>/2021/07/20/%E5%9F%BA%E4%BA%8Edocker%E9%85%8D%E7%BD%AEmysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><ul><li>主节点容器创建</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mastermysql  -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /usr/<span class="built_in">local</span>/docker/mysql/master/data:/var/lib/mysql -v /usr/<span class="built_in">local</span>/docker/mysql/master/conf/my.cnf:/etc/mysql/my.cnf  mysql:5.7.19</span><br></pre></td></tr></table></figure><ul><li>主节点配置my.cnf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="built_in">log</span>-bin=mysql-bin</span><br><span class="line">server-id=1</span><br><span class="line">binlog-ignore-db=information_schema</span><br><span class="line">binlog-ignore-db=cluster</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">binlog-do-db=demo</span><br></pre></td></tr></table></figure><ul><li>从节点容器创建</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name slavemysql  -d -p 3308:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /usr/<span class="built_in">local</span>/docker/mysql/slave/data:/var/lib/mysql -v /usr/<span class="built_in">local</span>/docker/mysql/slave/conf/my.cnf:/etc/mysql/my.cnf  mysql:5.7.19</span><br></pre></td></tr></table></figure><ul><li>从节点配置my.cnf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="built_in">log</span>-bin=mysql-bin</span><br><span class="line">server-id=2</span><br><span class="line">binlog-ignore-db=information_schema</span><br><span class="line">binlog-ignore-db=cluster</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">replicate-do-db=demo</span><br><span class="line">replicate-ignore-db=mysql</span><br><span class="line"><span class="built_in">log</span>-slave-updates</span><br><span class="line">slave-skip-errors=all</span><br><span class="line">slave-net-timeout=60</span><br></pre></td></tr></table></figure><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><ul><li>主：docker exec -it mastermysql bash</li><li>从：docker exec -it slavemysql bash</li></ul><h3 id="授权复制权限"><a href="#授权复制权限" class="headerlink" title="授权复制权限"></a>授权复制权限</h3><ul><li>创建用户</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user <span class="string">'slave'</span>@<span class="string">'%'</span> identified by <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure><ul><li>授权</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO <span class="string">'slave'</span>@<span class="string">'%'</span>;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="查询节点状态"><a href="#查询节点状态" class="headerlink" title="查询节点状态"></a>查询节点状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主：</span></span><br><span class="line">show master status;</span><br><span class="line"><span class="comment"># 从：</span></span><br><span class="line">show slave status;</span><br></pre></td></tr></table></figure><h3 id="从节点配置主从连接"><a href="#从节点配置主从连接" class="headerlink" title="从节点配置主从连接"></a>从节点配置主从连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br><span class="line"></span><br><span class="line">change master to master_host=<span class="string">'172.17.0.3'</span>,master_user=<span class="string">'slave'</span>,master_password=<span class="string">'123456'</span>,master_log_file=<span class="string">'mysql-bin.000007'</span>,master_log_pos=871,master_port=3306;</span><br><span class="line"></span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure><p>注：查询主容器ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect --format=<span class="string">'&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;'</span> 容器名称|容器id</span><br></pre></td></tr></table></figure><h3 id="创建只读用户"><a href="#创建只读用户" class="headerlink" title="创建只读用户"></a>创建只读用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create user <span class="string">'reader'</span>@<span class="string">'%'</span> identified by <span class="string">'123456'</span>;</span><br><span class="line"></span><br><span class="line">GRANT Select ON *.* TO <span class="string">'reader'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Caffeine缓存</title>
      <link href="/2021/07/20/Caffeine%E7%BC%93%E5%AD%98/"/>
      <url>/2021/07/20/Caffeine%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>Caffeine提供了灵活的构造方法，从而创建可以满足如下特性的本地缓存：</p><ol><li>自动把数据加载到本地缓存中，并且可以配置异步；</li><li>基于数量剔除策略；</li><li>基于失效时间剔除策略，这个时间是从最后一次访问或者写入算起；</li><li>异步刷新；</li><li>Key会被包装成Weak引用；</li><li>Value会被包装成Weak或者Soft引用，从而能被GC掉，而不至于内存泄漏；</li><li>数据剔除提醒；</li><li>写入广播机制；</li><li>缓存访问可以统计；</li></ol><h3 id="过期机制"><a href="#过期机制" class="headerlink" title="过期机制"></a>过期机制</h3><p>Caffeine的过期机制都是在构造Cache的时候申明，主要有如下几种：</p><ol><li>expireAfterWrite：表示自从最后一次写入后多久就会过期；</li><li>expireAfterAccess：表示自从最后一次访问（写入或者读取）后多久就会过期；</li><li>expireAfter：自定义过期策略；</li></ol><h3 id="刷新机制"><a href="#刷新机制" class="headerlink" title="刷新机制"></a>刷新机制</h3><p>在构造Cache时通过refreshAfterWrite方法指定刷新周期，例如refreshAfterWrite(10, TimeUnit.SECONDS)表示10秒钟刷新一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.build(<span class="keyword">new</span> CacheLoader&lt;String, String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">load</span><span class="params">(String k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里我们就可以从数据库或者其他地方查询最新的数据</span></span><br><span class="line">        <span class="keyword">return</span> getValue(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>Caffeine的刷新机制是「被动」的</li><li>它的实现原理是在get方法中，调用afterRead的时候，调用refreshIfNeeded方法判断是否需要刷新数据</li></ul><h3 id="剔除机制"><a href="#剔除机制" class="headerlink" title="剔除机制"></a>剔除机制</h3><p>在构造Cache时可以通过removalListener方法申明剔除监听器，从而可以跟踪本地缓存中被剔除的数据历史信息。根据RemovalCause.java枚举值可知，剔除策略有如下5种：</p><ul><li><p>「EXPLICIT」：调用方法（例如：cache.invalidate(key)、cache.invalidateAll）显示剔除数据；</p></li><li><p>「REPLACED」：不是真正被剔除，而是用户调用一些方法（例如：put()，putAll()等）盖了之前的值；</p></li><li><p>「COLLECTED」：表示缓存中的Key或者Value被垃圾回收掉了；</p></li><li><p>「EXPIRED」: expireAfterWrite/expireAfterAccess约定时间内没有任何访问导致被剔除；</p></li><li><p>「SIZE」：超过maximumSize限制的元素个数被剔除的原因；</p></li></ul><h3 id="GuavaCache和Caffeine差异"><a href="#GuavaCache和Caffeine差异" class="headerlink" title="GuavaCache和Caffeine差异"></a>GuavaCache和Caffeine差异</h3><ol><li><p>剔除算法方面，GuavaCache采用的是「LRU」算法，而Caffeine采用的是「Window TinyLFU」算法，这是两者之间最大，也是根本的区别。</p></li><li><p>立即失效方面，Guava会把立即失效 (例如：expireAfterAccess(0) and expireAfterWrite(0)) 转成设置最大Size为0。这就会导致剔除提醒的原因是SIZE而不是EXPIRED。Caffiene能正确识别这种剔除原因。</p></li><li><p>取代提醒方面，Guava只要数据被替换，不管什么原因，都会触发剔除监听器。而Caffiene在取代值和先前值的引用完全一样时不会触发监听器。</p></li><li><p>异步化方方面，Caffiene的很多工作都是交给线程池去做的（默认：ForkJoinPool.commonPool()），例如：剔除监听器，刷新机制，维护工作等。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Caffeine </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>easy-mock服务器部署</title>
      <link href="/2021/07/20/easy-mock%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
      <url>/2021/07/20/easy-mock%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li>github源码：<a href="https://github.com/easy-mock/easy-mock" target="_blank" rel="noopener">https://github.com/easy-mock/easy-mock</a></li><li>mock语法：<a href="http://mockjs.com/examples.html" target="_blank" rel="noopener">http://mockjs.com/examples.html</a></li></ul><h3 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h3><h4 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 下载node</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">wget https://nodejs.org/dist/v8.9.0/node-v8.9.0-linux-x64.tar.xz</span><br><span class="line"><span class="comment">## 解压</span></span><br><span class="line">tar xf node-v8.9.0-linux-x64.tar.xz</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line"><span class="comment">## 重命名</span></span><br><span class="line">mv src/node-v8.9.0-linux-x64 node</span><br><span class="line"> </span><br><span class="line"><span class="comment">## 将node添加至path</span></span><br><span class="line">vi ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> NODE_HOME=/usr/<span class="built_in">local</span>/node</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$NODE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"> </span><br><span class="line"><span class="comment">## 安装成功</span></span><br><span class="line">node -v  // 安装成功会显示Node版本</span><br></pre></td></tr></table></figure><h4 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz    </span><br><span class="line">tar -zxvf mongodb-linux-x86_64-3.0.6.tgz</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">mv src/mongodb-linux-x86_64-3.0.6 mongodb</span><br><span class="line"> </span><br><span class="line"><span class="comment">## path</span></span><br><span class="line">vi ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> MONGO_HOME=/usr/<span class="built_in">local</span>/mongodb</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$MONGO_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>下载完毕之后，创建配置文件并启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##  创建数据目录</span></span><br><span class="line">mkdir /data</span><br><span class="line">mkdir /data/mongo</span><br><span class="line"> </span><br><span class="line"><span class="comment">## 创建配置文件</span></span><br><span class="line">vi /data/mongo/mongodb.cnf</span><br></pre></td></tr></table></figure><p>其中配置文件的内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## /data/mongo/mongodb.cnf</span></span><br><span class="line">dbpath=/data/mongo/</span><br><span class="line"> </span><br><span class="line">logpath=/data/mongo/mongo.log</span><br><span class="line"> </span><br><span class="line">logappend=<span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">fork=<span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">port=27017</span><br><span class="line"> </span><br><span class="line">journal=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>通过读取配置文件启动 MongoDB 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 配置文件方式启动mongo</span></span><br><span class="line">mongod -f /data/mongo/mongodb.cnf</span><br><span class="line"> </span><br><span class="line">mongod -f /data/mongo/mongodb.cnf &amp; （放到后台执行）</span><br></pre></td></tr></table></figure><h4 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">wget http://download.redis.io/releases/redis-2.8.17.tar.gz</span><br><span class="line">tar xzf redis-2.8.17.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-2.8.17</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>Make 完后 redis-2.8.17 目录下会出现编译后的 Redis 服务程序 redis-server，还有用于测试的客户端程序 redis-cli，两个程序位于安装目录 src 目录下。</p><p>启动 Redis 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> src</span><br><span class="line">./redis-server &amp;</span><br></pre></td></tr></table></figure><h4 id="部署easy-mock"><a href="#部署easy-mock" class="headerlink" title="部署easy-mock"></a>部署easy-mock</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/easy-mock/easy-mock.git</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line"><span class="built_in">cd</span> easy-mock &amp;&amp; npm install</span><br></pre></td></tr></table></figure><p>配置文件路径：<code>config/default.json</code>，可根据情况修改配置（默认不需要修改配置文件）</p><h4 id="运行easy-mock"><a href="#运行easy-mock" class="headerlink" title="运行easy-mock"></a>运行easy-mock</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 运行</span></span><br><span class="line">[root@1.1.1.1 easy-mock]<span class="comment"># npm run dev</span></span><br><span class="line"> </span><br><span class="line">&gt; easy-mock@1.6.0 dev /usr/libra/easy-mock</span><br><span class="line">&gt; nodemon --ignore views/ --ignore public/ app</span><br><span class="line"> </span><br><span class="line">[nodemon] 1.14.11</span><br><span class="line">[nodemon] to restart at any time, enter `rs`</span><br><span class="line">[nodemon] watching: *.*</span><br><span class="line">[nodemon] starting `node app.js`</span><br><span class="line">server started at http://0.0.0.0:7300</span><br></pre></td></tr></table></figure><p>通过上面的部署，便可以访问<code>http://127.0.0.1:7300</code>访问 Easy Mock的页面了</p><p>用PM2对node进程守卫,保持永久在线.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 安装pm2 </span></span><br><span class="line">npm install -g pm2</span><br><span class="line"><span class="comment">## 使用pm2 运行全需要先build</span></span><br><span class="line">npm run build</span><br><span class="line">NODE_ENV=production pm2 start app.js</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> easy-mock </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
