<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于docker配置mysql主从复制</title>
      <link href="/2021/07/20/%E5%9F%BA%E4%BA%8Edocker%E9%85%8D%E7%BD%AEmysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>/2021/07/20/%E5%9F%BA%E4%BA%8Edocker%E9%85%8D%E7%BD%AEmysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><ul><li>主节点容器创建<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mastermysql  -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /usr/<span class="built_in">local</span>/docker/mysql/master/data:/var/lib/mysql -v /usr/<span class="built_in">local</span>/docker/mysql/master/conf/my.cnf:/etc/mysql/my.cnf  mysql:5.7.19</span><br></pre></td></tr></table></figure></li><li>主节点配置my.cnf<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="built_in">log</span>-bin=mysql-bin</span><br><span class="line">server-id=1</span><br><span class="line">binlog-ignore-db=information_schema</span><br><span class="line">binlog-ignore-db=cluster</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">binlog-do-db=demo</span><br></pre></td></tr></table></figure></li><li>从节点容器创建<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name slavemysql  -d -p 3308:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /usr/<span class="built_in">local</span>/docker/mysql/slave/data:/var/lib/mysql -v /usr/<span class="built_in">local</span>/docker/mysql/slave/conf/my.cnf:/etc/mysql/my.cnf  mysql:5.7.19</span><br></pre></td></tr></table></figure></li><li>从节点配置my.cnf<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="built_in">log</span>-bin=mysql-bin</span><br><span class="line">server-id=2</span><br><span class="line">binlog-ignore-db=information_schema</span><br><span class="line">binlog-ignore-db=cluster</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">replicate-do-db=demo</span><br><span class="line">replicate-ignore-db=mysql</span><br><span class="line"><span class="built_in">log</span>-slave-updates</span><br><span class="line">slave-skip-errors=all</span><br><span class="line">slave-net-timeout=60</span><br></pre></td></tr></table></figure></li></ul><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><ul><li>主：docker exec -it mastermysql bash</li><li>从：docker exec -it slavemysql bash</li></ul><h3 id="授权复制权限"><a href="#授权复制权限" class="headerlink" title="授权复制权限"></a>授权复制权限</h3><ul><li>创建用户<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user <span class="string">'slave'</span>@<span class="string">'%'</span> identified by <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure></li><li>授权<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO <span class="string">'slave'</span>@<span class="string">'%'</span>;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li></ul><h3 id="查询节点状态"><a href="#查询节点状态" class="headerlink" title="查询节点状态"></a>查询节点状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主：</span></span><br><span class="line">show master status;</span><br><span class="line"><span class="comment"># 从：</span></span><br><span class="line">show slave status;</span><br></pre></td></tr></table></figure><h3 id="从节点配置主从连接"><a href="#从节点配置主从连接" class="headerlink" title="从节点配置主从连接"></a>从节点配置主从连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br><span class="line"></span><br><span class="line">change master to master_host=<span class="string">'172.17.0.3'</span>,master_user=<span class="string">'slave'</span>,master_password=<span class="string">'123456'</span>,master_log_file=<span class="string">'mysql-bin.000007'</span>,master_log_pos=871,master_port=3306;</span><br><span class="line"></span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure><p>注：查询主容器ip<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect --format=<span class="string">'&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;'</span> 容器名称|容器id</span><br></pre></td></tr></table></figure></p><h3 id="创建只读用户"><a href="#创建只读用户" class="headerlink" title="创建只读用户"></a>创建只读用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create user <span class="string">'reader'</span>@<span class="string">'%'</span> identified by <span class="string">'123456'</span>;</span><br><span class="line"></span><br><span class="line">GRANT Select ON *.* TO <span class="string">'reader'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Caffeine缓存</title>
      <link href="/2021/07/20/Caffeine%E7%BC%93%E5%AD%98/"/>
      <url>/2021/07/20/Caffeine%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>Caffeine提供了灵活的构造方法，从而创建可以满足如下特性的本地缓存：</p><ol><li>自动把数据加载到本地缓存中，并且可以配置异步；</li><li>基于数量剔除策略；</li><li>基于失效时间剔除策略，这个时间是从最后一次访问或者写入算起；</li><li>异步刷新；</li><li>Key会被包装成Weak引用；</li><li>Value会被包装成Weak或者Soft引用，从而能被GC掉，而不至于内存泄漏；</li><li>数据剔除提醒；</li><li>写入广播机制；</li><li>缓存访问可以统计；</li></ol><h3 id="过期机制"><a href="#过期机制" class="headerlink" title="过期机制"></a>过期机制</h3><p>Caffeine的过期机制都是在构造Cache的时候申明，主要有如下几种：</p><ol><li>expireAfterWrite：表示自从最后一次写入后多久就会过期；</li><li>expireAfterAccess：表示自从最后一次访问（写入或者读取）后多久就会过期；</li><li>expireAfter：自定义过期策略；</li></ol><h3 id="刷新机制"><a href="#刷新机制" class="headerlink" title="刷新机制"></a>刷新机制</h3><p>在构造Cache时通过refreshAfterWrite方法指定刷新周期，例如refreshAfterWrite(10, TimeUnit.SECONDS)表示10秒钟刷新一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.build(<span class="keyword">new</span> CacheLoader&lt;String, String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">load</span><span class="params">(String k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里我们就可以从数据库或者其他地方查询最新的数据</span></span><br><span class="line">        <span class="keyword">return</span> getValue(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>Caffeine的刷新机制是「被动」的</li><li>它的实现原理是在get方法中，调用afterRead的时候，调用refreshIfNeeded方法判断是否需要刷新数据</li></ul><h3 id="剔除机制"><a href="#剔除机制" class="headerlink" title="剔除机制"></a>剔除机制</h3><p>在构造Cache时可以通过removalListener方法申明剔除监听器，从而可以跟踪本地缓存中被剔除的数据历史信息。根据RemovalCause.java枚举值可知，剔除策略有如下5种：</p><ul><li><p>「EXPLICIT」：调用方法（例如：cache.invalidate(key)、cache.invalidateAll）显示剔除数据；</p></li><li><p>「REPLACED」：不是真正被剔除，而是用户调用一些方法（例如：put()，putAll()等）盖了之前的值；</p></li><li><p>「COLLECTED」：表示缓存中的Key或者Value被垃圾回收掉了；</p></li><li><p>「EXPIRED」: expireAfterWrite/expireAfterAccess约定时间内没有任何访问导致被剔除；</p></li><li><p>「SIZE」：超过maximumSize限制的元素个数被剔除的原因；</p></li></ul><h3 id="GuavaCache和Caffeine差异"><a href="#GuavaCache和Caffeine差异" class="headerlink" title="GuavaCache和Caffeine差异"></a>GuavaCache和Caffeine差异</h3><ol><li><p>剔除算法方面，GuavaCache采用的是「LRU」算法，而Caffeine采用的是「Window TinyLFU」算法，这是两者之间最大，也是根本的区别。</p></li><li><p>立即失效方面，Guava会把立即失效 (例如：expireAfterAccess(0) and expireAfterWrite(0)) 转成设置最大Size为0。这就会导致剔除提醒的原因是SIZE而不是EXPIRED。Caffiene能正确识别这种剔除原因。</p></li><li><p>取代提醒方面，Guava只要数据被替换，不管什么原因，都会触发剔除监听器。而Caffiene在取代值和先前值的引用完全一样时不会触发监听器。</p></li><li><p>异步化方方面，Caffiene的很多工作都是交给线程池去做的（默认：ForkJoinPool.commonPool()），例如：剔除监听器，刷新机制，维护工作等。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Caffeine </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>easy-mock服务器部署</title>
      <link href="/2021/07/20/easy-mock%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
      <url>/2021/07/20/easy-mock%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li>github源码：<a href="https://github.com/easy-mock/easy-mock" target="_blank" rel="noopener">https://github.com/easy-mock/easy-mock</a></li><li>mock语法：<a href="http://mockjs.com/examples.html" target="_blank" rel="noopener">http://mockjs.com/examples.html</a></li></ul><h3 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h3><h4 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 下载node</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">wget https://nodejs.org/dist/v8.9.0/node-v8.9.0-linux-x64.tar.xz</span><br><span class="line"><span class="comment">## 解压</span></span><br><span class="line">tar xf node-v8.9.0-linux-x64.tar.xz</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line"><span class="comment">## 重命名</span></span><br><span class="line">mv src/node-v8.9.0-linux-x64 node</span><br><span class="line"> </span><br><span class="line"><span class="comment">## 将node添加至path</span></span><br><span class="line">vi ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> NODE_HOME=/usr/<span class="built_in">local</span>/node</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$NODE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"> </span><br><span class="line"><span class="comment">## 安装成功</span></span><br><span class="line">node -v  // 安装成功会显示Node版本</span><br></pre></td></tr></table></figure><h4 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz    </span><br><span class="line">tar -zxvf mongodb-linux-x86_64-3.0.6.tgz</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">mv src/mongodb-linux-x86_64-3.0.6 mongodb</span><br><span class="line"> </span><br><span class="line"><span class="comment">## path</span></span><br><span class="line">vi ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> MONGO_HOME=/usr/<span class="built_in">local</span>/mongodb</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$MONGO_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>下载完毕之后，创建配置文件并启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##  创建数据目录</span></span><br><span class="line">mkdir /data</span><br><span class="line">mkdir /data/mongo</span><br><span class="line"> </span><br><span class="line"><span class="comment">## 创建配置文件</span></span><br><span class="line">vi /data/mongo/mongodb.cnf</span><br></pre></td></tr></table></figure><p>其中配置文件的内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## /data/mongo/mongodb.cnf</span></span><br><span class="line">dbpath=/data/mongo/</span><br><span class="line"> </span><br><span class="line">logpath=/data/mongo/mongo.log</span><br><span class="line"> </span><br><span class="line">logappend=<span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">fork=<span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">port=27017</span><br><span class="line"> </span><br><span class="line">journal=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>通过读取配置文件启动 MongoDB 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 配置文件方式启动mongo</span></span><br><span class="line">mongod -f /data/mongo/mongodb.cnf</span><br><span class="line"> </span><br><span class="line">mongod -f /data/mongo/mongodb.cnf &amp; （放到后台执行）</span><br></pre></td></tr></table></figure><h4 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">wget http://download.redis.io/releases/redis-2.8.17.tar.gz</span><br><span class="line">tar xzf redis-2.8.17.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-2.8.17</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>Make 完后 redis-2.8.17 目录下会出现编译后的 Redis 服务程序 redis-server，还有用于测试的客户端程序 redis-cli，两个程序位于安装目录 src 目录下。</p><p>启动 Redis 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> src</span><br><span class="line">./redis-server &amp;</span><br></pre></td></tr></table></figure><h4 id="部署easy-mock"><a href="#部署easy-mock" class="headerlink" title="部署easy-mock"></a>部署easy-mock</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/easy-mock/easy-mock.git</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line"><span class="built_in">cd</span> easy-mock &amp;&amp; npm install</span><br></pre></td></tr></table></figure><p>配置文件路径：<code>config/default.json</code>，可根据情况修改配置（默认不需要修改配置文件）</p><h4 id="运行easy-mock"><a href="#运行easy-mock" class="headerlink" title="运行easy-mock"></a>运行easy-mock</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 运行</span></span><br><span class="line">[root@1.1.1.1 easy-mock]<span class="comment"># npm run dev</span></span><br><span class="line"> </span><br><span class="line">&gt; easy-mock@1.6.0 dev /usr/libra/easy-mock</span><br><span class="line">&gt; nodemon --ignore views/ --ignore public/ app</span><br><span class="line"> </span><br><span class="line">[nodemon] 1.14.11</span><br><span class="line">[nodemon] to restart at any time, enter `rs`</span><br><span class="line">[nodemon] watching: *.*</span><br><span class="line">[nodemon] starting `node app.js`</span><br><span class="line">server started at http://0.0.0.0:7300</span><br></pre></td></tr></table></figure><p>通过上面的部署，便可以访问<code>http://127.0.0.1:7300</code>访问 Easy Mock的页面了</p><p>用PM2对node进程守卫,保持永久在线.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 安装pm2 </span></span><br><span class="line">npm install -g pm2</span><br><span class="line"><span class="comment">## 使用pm2 运行全需要先build</span></span><br><span class="line">npm run build</span><br><span class="line">NODE_ENV=production pm2 start app.js</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> easy-mock </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
