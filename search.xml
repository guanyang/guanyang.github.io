<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring Native&amp;Quarkus对比分析</title>
      <link href="/2023/09/22/Spring-Native-Quarkus%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/"/>
      <url>/2023/09/22/Spring-Native-Quarkus%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>Quarkus首页放出的标语：超音速亚原子的Java（Supersonic Subatomic Java），它是为<code>OpenJDK HotSpot</code>和<code>GraalVM</code>量身定制的<code>Kubernetes Native Java</code>框架，基于同类最佳的 Java 库和标准制作而成。</li><li>Quarkus的到来为开发Linux容器和 kubernetes 原生Java微服务带来了一个创新平台。</li><li>Spring Boot是一个基于Java的框架，专注于企业应用，它可以简单使用所有Spring项目，并集成了许多开箱即用的功能，来帮助开发人员提高生产力。</li><li>Spring Boot由于其约定优于配置方法，它根据依赖项自动注册默认配置，大大缩短了Java应用程序的开发周期。</li><li>Java生态中新兴的技术体系<ul><li>Spring Reactive(Spring WebFlux) → 背靠 Pivotal → 归属 VMware → 归属戴尔</li><li>Quarkus 和 Vert.x → 背靠 Eclipse 基金会 → 主要由 Red Hat 支持</li><li>Helidon → 背靠 Oracle</li><li>Micronaut → 背靠 Object Computing（Grails、OpenDDS）</li><li>Lagom → 背靠 Lightbend（Akka）</li></ul></li><li>本文重点关注比较热门的<code>Spring Reactive</code>和<code>Quarkus</code>在原生镜像方面的差异。</li></ul><h3 id="对比分析"><a href="#对比分析" class="headerlink" title="对比分析"></a>对比分析</h3><ul><li><strong>创新和生态系统</strong>： Spring 有着长期的历史和丰富的生态系统，许多开发者对其已经非常熟悉。Spring Native 是 Spring 团队为了更好地适应云原生环境（如 Kubernetes）而推出的新项目。相比之下，Quarkus 较新，但它在设计上就考虑了现代云原生和微服务架构，因此在某些方面可能更具创新性。</li><li><strong>性能和资源利用</strong>： Quarkus 和 Spring Native 都声称可以提供更快的启动时间和减少的内存占用。然而，实际表现可能会因应用程序的具体情况以及你如何使用这些框架而变化。</li><li><strong>开发体验</strong>： Quarkus 提供的开发模式（live coding）允许开发者在不重启应用的情况下实时看到代码改变的效果，这可能会提高开发效率。Spring Native 则继承了 Spring Boot 的开发体验，使得许多开发者能够很快上手。</li><li><strong>兼容性</strong>： Spring Native 对于 Spring 生态中的部分库可能还存在兼容性问题，需要按照官方给出的指引进行调整。而 Quarkus 在设计时就尽可能考虑了广泛的兼容性，包括对于 Hibernate，Apache Camel，Eclipse MicroProfile 等开源库的支持。</li></ul><h3 id="启动-amp-构建指标对比"><a href="#启动-amp-构建指标对比" class="headerlink" title="启动&amp;构建指标对比"></a>启动&amp;构建指标对比</h3><div class="table-container"><table><thead><tr><th>指标项</th><th>Spring Boot Native</th><th>Quarkus Native</th><th>Spring Boot JVM</th><th>Quarkus JVM</th></tr></thead><tbody><tr><td>启动耗时（秒）</td><td>0.244</td><td>0.104</td><td>6.156</td><td>2.230</td></tr><tr><td>启动内存（MB）</td><td>44.31</td><td>9.05</td><td>237.1</td><td>119.1</td></tr><tr><td>启动CPU使用率（%）</td><td>-</td><td>-</td><td>0.22</td><td>0.26</td></tr><tr><td>构建镜像大小（MB）</td><td>119.89</td><td>84.75</td><td>217.92</td><td>421.24</td></tr><tr><td>构建时长（秒）</td><td>592</td><td>444</td><td>90</td><td>17.938</td></tr></tbody></table></div><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><h4 id="资源版本"><a href="#资源版本" class="headerlink" title="资源版本"></a>资源版本</h4><ul><li>Mysql: 8.0.32-1.el8</li><li>Quarkus: 3.2.2.Final</li><li>Spring Boot: 3.1.2</li><li>JDK: 17.0.8</li><li>Docker Engine: 24.0.5</li><li>Docker Resource: 4C/8G</li></ul><h4 id="压测源码-amp-镜像"><a href="#压测源码-amp-镜像" class="headerlink" title="压测源码&amp;镜像"></a>压测源码&amp;镜像</h4><ul><li>压测源码：<a href="https://github.com/guanyang/spring-project-samples" target="_blank" rel="noopener">https://github.com/guanyang/spring-project-samples</a><ul><li><a href="https://github.com/guanyang/spring-project-samples/tree/main/native-sample" target="_blank" rel="noopener">native-sample</a>: 基于spring native构建原生镜像示例</li><li><a href="https://github.com/guanyang/spring-project-samples/tree/main/quarkus-sample" target="_blank" rel="noopener">quarkus-sample</a>: 基于quarkus构建原生镜像示例</li></ul></li><li>镜像资源<ul><li>Quarkus Native Image: guanyangsunlight/spring-project-samples:quarkus-sample-0.0.1-SNAPSHOT</li><li>Quarkus JVM Image: guanyangsunlight/spring-project-samples:quarkus-sample-0.0.1-SNAPSHOT-jvm</li><li>Spring Boot Native Image: guanyangsunlight/spring-project-samples:native-sample-0.0.1-SNAPSHOT</li><li>Spring Boot JVM Image: guanyangsunlight/spring-project-samples:native-sample-0.0.1-SNAPSHOT-jvm</li><li>MySQL Image: guanyangsunlight/spring-project-samples:sample-mysql-8.0.32</li></ul></li><li>Docker Compose文件<ul><li><a href="https://github.com/guanyang/spring-project-samples/blob/main/quarkus-sample/src/main/docker/docker-compose.yml" target="_blank" rel="noopener">quarkus-sample</a></li><li><a href="https://github.com/guanyang/spring-project-samples/blob/main/native-sample/src/main/docker/docker-compose.yml" target="_blank" rel="noopener">native-sample</a></li></ul></li></ul><h4 id="压测架构"><a href="#压测架构" class="headerlink" title="压测架构"></a>压测架构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(K6施压机) --&gt; B(应用容器)</span><br><span class="line">B --&gt;C(MySQL容器)</span><br></pre></td></tr></table></figure><ul><li>应用容器：<code>Spring Boot Native</code>,<code>Quarkus Native</code>,<code>Spring Boot JVM</code>,<code>Quarkus JVM</code>每个一个实例</li><li>MySQL容器：Mysql8.0容器实例一个</li><li>K6施压机: 2.2 GHz 四核Intel Core i7,16 GB 1600 MHz DDR3</li><li>K6参考链接：<a href="https://k6.io/docs/" target="_blank" rel="noopener">https://k6.io/docs/</a></li></ul><h4 id="压测场景case"><a href="#压测场景case" class="headerlink" title="压测场景case"></a>压测场景case</h4><ul><li>Spring Boot Native: 性能指标（QPS、RT）,机器指标（CPU、内存）</li><li>Quarkus Native: 性能指标（QPS、RT）,机器指标（CPU、内存）</li><li>Spring Boot JVM: 性能指标（QPS、RT）,机器指标（CPU、内存）</li><li>Quarkus JVM: 性能指标（QPS、RT）,机器指标（CPU、内存）</li></ul><h4 id="压测服务接口"><a href="#压测服务接口" class="headerlink" title="压测服务接口"></a>压测服务接口</h4><ul><li>接口地址：${host}/api/test/get/{id}</li><li>接口说明：根据id查询数据库记录，host为服务地址，id为数据库记录主键</li><li>响应示例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;code&quot;: 200,</span><br><span class="line">    &quot;message&quot;: &quot;OK&quot;,</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;id&quot;: 4,</span><br><span class="line">        &quot;version&quot;: 1,</span><br><span class="line">        &quot;deleted&quot;: 0,</span><br><span class="line">        &quot;createBy&quot;: &quot;admin&quot;,</span><br><span class="line">        &quot;updateBy&quot;: &quot;admin&quot;,</span><br><span class="line">        &quot;createTime&quot;: 1695312514000,</span><br><span class="line">        &quot;updateTime&quot;: 1695312532000,</span><br><span class="line">        &quot;username&quot;: &quot;test41&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="压测脚本"><a href="#压测脚本" class="headerlink" title="压测脚本"></a>压测脚本</h4><ul><li>总请求时长300s，并发从50开始，并按照50步长增长，命令如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">k6 run  -u 50 --duration 300s -e url&#x3D;http:&#x2F;&#x2F;127.0.0.1:8082&#x2F;api&#x2F;test&#x2F;get&#x2F;4 simple-test.js</span><br><span class="line"></span><br><span class="line">-i：指定请求数量</span><br><span class="line">-u：模拟并发数量</span><br><span class="line">--duration：请求时长定义，例如：60s，1m</span><br><span class="line">-e url：指定环境变量url，用于实际场景替换</span><br></pre></td></tr></table></figure></li><li>脚本输出样例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">scenarios: (100.00%) 1 scenario, 50 max VUs, 36s max duration (incl. graceful stop):</span><br><span class="line">         * default: 50 looping VUs for 6s (gracefulStop: 30s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   ✓ is status 200</span><br><span class="line"></span><br><span class="line">   checks.........................: 100.00% ✓ 7761        ✗ 0   </span><br><span class="line">   data_received..................: 1.9 MB  324 kB&#x2F;s</span><br><span class="line">   data_sent......................: 730 kB  121 kB&#x2F;s</span><br><span class="line">   http_req_blocked...............: avg&#x3D;12.22µs min&#x3D;1µs    med&#x3D;3µs     max&#x3D;3.26ms   p(90)&#x3D;5µs     p(95)&#x3D;6µs    </span><br><span class="line">   http_req_connecting............: avg&#x3D;7.1µs   min&#x3D;0s     med&#x3D;0s      max&#x3D;2.19ms   p(90)&#x3D;0s      p(95)&#x3D;0s     </span><br><span class="line">   http_req_duration..............: avg&#x3D;38.56ms min&#x3D;7.55ms med&#x3D;34.26ms max&#x3D;216.77ms p(90)&#x3D;58.96ms p(95)&#x3D;68.51ms</span><br><span class="line">     &#123; expected_response:true &#125;...: avg&#x3D;38.56ms min&#x3D;7.55ms med&#x3D;34.26ms max&#x3D;216.77ms p(90)&#x3D;58.96ms p(95)&#x3D;68.51ms</span><br><span class="line">   http_req_failed................: 0.00%   ✓ 0           ✗ 7761</span><br><span class="line">   http_req_receiving.............: avg&#x3D;52.57µs min&#x3D;19µs   med&#x3D;46µs    max&#x3D;680µs    p(90)&#x3D;81µs    p(95)&#x3D;97µs   </span><br><span class="line">   http_req_sending...............: avg&#x3D;19.87µs min&#x3D;7µs    med&#x3D;16µs    max&#x3D;1.27ms   p(90)&#x3D;27µs    p(95)&#x3D;38µs   </span><br><span class="line">   http_req_tls_handshaking.......: avg&#x3D;0s      min&#x3D;0s     med&#x3D;0s      max&#x3D;0s       p(90)&#x3D;0s      p(95)&#x3D;0s     </span><br><span class="line">   http_req_waiting...............: avg&#x3D;38.49ms min&#x3D;7.51ms med&#x3D;34.18ms max&#x3D;216.58ms p(90)&#x3D;58.89ms p(95)&#x3D;68.46ms</span><br><span class="line">   http_reqs......................: 7761    1288.780058&#x2F;s</span><br><span class="line">   iteration_duration.............: avg&#x3D;38.7ms  min&#x3D;7.76ms med&#x3D;34.4ms  max&#x3D;218.51ms p(90)&#x3D;59.08ms p(95)&#x3D;68.64ms</span><br><span class="line">   iterations.....................: 7761    1288.780058&#x2F;s</span><br><span class="line">   vus............................: 50      min&#x3D;50        max&#x3D;50</span><br><span class="line">   vus_max........................: 50      min&#x3D;50        max&#x3D;50</span><br></pre></td></tr></table></figure></li><li><code>simple-test.js</code>脚本说明<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import http from &#39;k6&#x2F;http&#39;;</span><br><span class="line">import &#123; check &#125; from &#39;k6&#39;;</span><br><span class="line"></span><br><span class="line">export default function () &#123;</span><br><span class="line">  const res &#x3D; http.get(&#96;$&#123;__ENV.url&#125;&#96;);</span><br><span class="line">  check(res, &#123;</span><br><span class="line">    &#39;is status 200&#39;: (r) &#x3D;&gt; r.status &#x3D;&#x3D;&#x3D; 200</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="压测指标"><a href="#压测指标" class="headerlink" title="压测指标"></a>压测指标</h4><h5 id="被压机器指标"><a href="#被压机器指标" class="headerlink" title="被压机器指标"></a>被压机器指标</h5><ul><li>CPU usage</li><li>Memory usage</li></ul><h5 id="被压机器性能指标"><a href="#被压机器性能指标" class="headerlink" title="被压机器性能指标"></a>被压机器性能指标</h5><ul><li>QPS</li><li>Avg Latency(ms)</li><li>P95(ms)</li></ul><h4 id="压测结果"><a href="#压测结果" class="headerlink" title="压测结果"></a>压测结果</h4><div class="table-container"><table><thead><tr><th>Case</th><th>QPS</th><th>Avg Latency</th><th>P95</th><th>CPU usage</th><th>Memory usage</th></tr></thead><tbody><tr><td>Quarkus Native,-u 50</td><td>1699.067212/s</td><td>29.41ms</td><td>50.07ms</td><td>136.91%</td><td>23.15MB</td></tr><tr><td>Quarkus Native,-u 100</td><td>1749.35664/s</td><td>57.14ms</td><td>89.9ms</td><td>148.9%</td><td>23.95MB</td></tr><tr><td>Quarkus Native,-u 200</td><td>1765.832527/s</td><td>113.23ms</td><td>167.43ms</td><td>156.17%</td><td>25.5MB</td></tr><tr><td>Spring Boot Native,-u 50</td><td>1114.946899/s</td><td>44.82ms</td><td>85.11ms</td><td>226.5%</td><td>86.23MB</td></tr><tr><td>Spring Boot Native,-u 100</td><td>1175.220721/s</td><td>85.06ms</td><td>137.26ms</td><td>236.07%</td><td>96.16MB</td></tr><tr><td>Spring Boot Native,-u 200</td><td>1094.461679/s</td><td>182.67ms</td><td>284.98ms</td><td>246.32%</td><td>143.3MB</td></tr><tr><td>Quarkus JVM,-u 50</td><td>2149.507697/s</td><td>23.24ms</td><td>39ms</td><td>111.99%</td><td>173.6MB</td></tr><tr><td>Quarkus JVM,-u 100</td><td>2186.80721/s</td><td>45.7m</td><td>69.6ms</td><td>126.62%</td><td>174.2MB</td></tr><tr><td>Quarkus JVM,-u 200</td><td>2211.63056/s</td><td>90.38ms</td><td>130.41ms</td><td>125.45%</td><td>180.1MB</td></tr><tr><td>Spring Boot JVM,-u 50</td><td>1472.76853/s</td><td>33.93ms</td><td>65.69ms</td><td>199.08%</td><td>426.8MB</td></tr><tr><td>Spring Boot JVM,-u 100</td><td>1624.997761/s</td><td>61.51ms</td><td>97.37ms</td><td>211.01%</td><td>427.2MB</td></tr><tr><td>Spring Boot JVM,-u 200</td><td>1611.01646/s</td><td>124.05ms</td><td>188.24ms</td><td>214.96%</td><td>428.1MB</td></tr></tbody></table></div><h4 id="压测总结"><a href="#压测总结" class="headerlink" title="压测总结"></a>压测总结</h4><ul><li>Quarkus Native相较于Spring Boot Native资源消耗更低，性能更好。</li><li>Quarkus JVM相较于Spring Boot JVM模式资源消耗更低，性能更好。</li><li>Native原生相较于JVM模式整体资源消耗更低，启动更快，构建镜像更小。</li></ul><h3 id="优缺点及选型总结"><a href="#优缺点及选型总结" class="headerlink" title="优缺点及选型总结"></a>优缺点及选型总结</h3><h4 id="Quarkus优缺点"><a href="#Quarkus优缺点" class="headerlink" title="Quarkus优缺点"></a>Quarkus优缺点</h4><ul><li>优点<ul><li>高度优化的运行时性能和内存管理；</li><li>对于开发者友好的开发模式，如实时编程（live coding）；</li><li>广泛的兼容性，支持许多主流的 Java 开源库；</li><li>面向云原生应用的设计。</li></ul></li><li>缺点<ul><li>相对于 Spring，其社区规模还较小，可能在某些问题上找不到即时的帮助；</li><li>尽管有广泛的兼容性，但并不包括所有的 Java 库。</li></ul></li></ul><h4 id="Spring-Boot-Native优缺点"><a href="#Spring-Boot-Native优缺点" class="headerlink" title="Spring Boot Native优缺点"></a>Spring Boot Native优缺点</h4><ul><li>优点<ul><li>建立在 Spring 生态系统之上，易于为已经使用 Spring 的团队接受；</li><li>与 Spring Boot 无缝集成，并且借助 GraalVM 提供媲美本机语言的启动速度和内存占用。</li><li>支持 AOT（Ahead-of-Time Compilation）编译，可以提高启动速度。</li></ul></li><li>缺点<ul><li>使用 Spring Boot Native 需要适应其构建过程中将应用程序转化为本地应用程序的复杂性；</li><li>构建完成的应用程序虽然启动速度快、内存消耗低，但CPU使用率高于普通 JVM 程序。</li></ul></li></ul><h4 id="技术选型思考"><a href="#技术选型思考" class="headerlink" title="技术选型思考"></a>技术选型思考</h4><ul><li><p><strong>项目需求</strong>：如果项目需要快速启动，低内存消耗，那么两者都可以满足。如果已经在使用 Spring Stack，并且想要继续保持使用它，那么 Spring Boot Native 会更加合适。如果项目对开发效率有高要求，那么 Quarkus 可能更符合需求。</p></li><li><p><strong>团队技能</strong>：如果团队成员已经非常熟悉 Spring Stack，那么采用 Spring Boot Native 可能可以减少学习曲线。反之，如果团队愿意尝试新的技术，并且对响应式编程和函数式编程有兴趣，那么选择 Quarkus 可以是一个不错的选择。</p></li><li><p><strong>社区支持和文档</strong>：Spring 社区非常活跃，有大量的教程和指南。虽然 Quarkus 比较新，但也在积极扩大其社区，并提供了详细的文档。</p></li></ul><blockquote><p>在实际决策过程中，最好能够根据具体情况进行技术选型，可能的话，可以在小规模的项目或者原型中尝试并评估这些框架。</p></blockquote><h3 id="Quarkus对Spring开发者的额外好处"><a href="#Quarkus对Spring开发者的额外好处" class="headerlink" title="Quarkus对Spring开发者的额外好处"></a>Quarkus对Spring开发者的额外好处</h3><ul><li><strong>功能即服务 (FaaS)</strong>：当编译为原生二进制文件时，Quarkus 应用程序可以在 0.0015 秒内启动，从而可以将现有的 Spring 和 Java API 知识与 FaaS 功能结合使用。（<a href="https://quarkus.io/guides/azure-functions" target="_blank" rel="noopener">Azure</a>,<a href="https://quarkus.io/guides/aws-lambda" target="_blank" rel="noopener">AWS Lambda</a>）</li><li><strong>实时编码</strong>：从“Hello World”示例应用程序开始，然后将其转换为复杂的微服务，而无需重新启动应用程序。只需保存并重新加载浏览器即可查看沿途的变化。 Quarkus 实时编码“开箱即用”，与 IDE 无关。</li><li><strong>支持反应式和命令式模型</strong>：Quarkus有一个反应式核心，支持传统的命令式模型、反应式模型，或在同一应用程序中同时支持两者。</li><li><strong>早期检测依赖注入错误</strong>：Quarkus 在编译期间而不是在运行时捕获依赖项注入错误。</li><li><strong>最佳框架和标准的结合</strong>：Quarkus 在同一应用程序中支持 Spring API 兼容性、Eclipse Vert.x、MicroProfile（JAX-RS、CDI 等）、反应式流和消息传递等。参考《<a href="https://developers.redhat.com/blog/2019/10/02/autowire-microprofile-into-spring-with-quarkus" target="_blank" rel="noopener">Autowire MicroProfile into Spring Boot</a>》，可以在一个项目中同时使用 Spring 和 MicroProfile API。</li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://www.baeldung.com/spring-boot-vs-quarkus" target="_blank" rel="noopener">【Baeldung】Spring Boot vs Quarkus</a></li><li><a href="https://www.logicmonitor.com/blog/quarkus-vs-spring#h-about-logicmonitor" target="_blank" rel="noopener">【LogicMonitor】Quarkus vs Spring Boot</a></li><li><a href="https://quarkus.io/blog/quarkus-for-spring-developers/" target="_blank" rel="noopener">Quarkus for Spring Developers</a></li><li><a href="https://quarkus.io/guides/" target="_blank" rel="noopener">Quarkus官方文档</a></li><li><a href="https://quarkus.io/get-started/" target="_blank" rel="noopener">Quarkus入门指南</a></li><li><a href="https://code.quarkus.io/" target="_blank" rel="noopener">Quarkus官方代码生成</a></li><li><a href="https://docs.spring.io/spring-boot/docs/3.1.2/maven-plugin/reference/html/#build-image" target="_blank" rel="noopener">Create an OCI image</a></li><li><a href="https://docs.spring.io/spring-boot/docs/3.1.2/reference/html/native-image.html#native-image" target="_blank" rel="noopener">GraalVM Native Image Support</a></li><li><a href="https://spring.io/guides/gs/reactive-rest-service/" target="_blank" rel="noopener">Building a Reactive RESTful Web Service</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Native </tag>
            
            <tag> Quarkus </tag>
            
            <tag> Native Image </tag>
            
            <tag> 云原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bean属性拷贝性能分析</title>
      <link href="/2023/05/12/Bean%E5%B1%9E%E6%80%A7%E6%8B%B7%E8%B4%9D%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
      <url>/2023/05/12/Bean%E5%B1%9E%E6%80%A7%E6%8B%B7%E8%B4%9D%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>在 Java 系统工程开发过程中，都会有各个层之间的对象转换，比如 VO、DTO、PO、VO等。</li><li>如果都是手动get、set又太浪费时间，还可能操作错误，所以选择一个转换工具会更加方便。</li><li>整理出常见属性转换工具如下</li></ul><div class="table-container"><table><thead><tr><th>类型</th><th>实现原理</th><th>说明</th></tr></thead><tbody><tr><td>getSetBeanCopy</td><td>原始赋值</td><td>基于<code>get</code>、<code>set</code>方法进行属性转换</td></tr><tr><td>fastJsonBeanCopy</td><td>json序列化反序列化</td><td>基于<code>fastjson</code>进行属性转换</td></tr><tr><td>apacheBeanCopy</td><td>反射</td><td>基于<code>apache BeanUtils</code>进行属性转换</td></tr><tr><td>springBeanCopy</td><td>反射</td><td>基于<code>spring BeanUtils</code>进行属性转换</td></tr><tr><td>beanMappingBeanCopy</td><td>属性拷贝</td><td>基于<code>bean-mapping</code>进行属性转换</td></tr><tr><td>beanAsmBeanCopy</td><td>字节码增强</td><td>基于<code>bean-mapping-asm</code>进行属性转换</td></tr><tr><td>beanCopierBeanCopy</td><td>cglib生成get、set</td><td>基于<code>BeanCopier</code>进行属性转换</td></tr><tr><td>orikaBeanCopy</td><td>字节码增强</td><td>基于<code>Orika</code>进行属性转换</td></tr><tr><td>dozerBeanCopy</td><td>属性映射</td><td>基于<code>Dozer</code>进行属性转换</td></tr><tr><td>modelMapperBeanCopy</td><td>基于字节码框架ASM实现</td><td>基于<code>ModelMapper</code>进行属性转换</td></tr><tr><td>mapStructBeanCopy</td><td>编译期生成get、set</td><td>基于<code>MapStruct</code>进行属性转换</td></tr></tbody></table></div><h2 id="Benchmark性能测试源码"><a href="#Benchmark性能测试源码" class="headerlink" title="Benchmark性能测试源码"></a>Benchmark性能测试源码</h2><ul><li><a href="https://github.com/guanyang/spring-base-demo/blob/master/log-demo/src/test/java/org/gy/demo/log/BeanCopyTest.java" target="_blank" rel="noopener">BeanCopyTest源码参考</a></li></ul><h2 id="Benchmark性能测试对比"><a href="#Benchmark性能测试对比" class="headerlink" title="Benchmark性能测试对比"></a>Benchmark性能测试对比</h2><ul><li><p>循环1000次性能数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Benchmark                         (loop)   Mode  Cnt       Score       Error  Units</span><br><span class="line">BeanCopyTest.apacheBeanCopy         1000  thrpt    5       5.444 ±     1.016  ops&#x2F;s</span><br><span class="line">BeanCopyTest.beanAsmBeanCopy        1000  thrpt    5    3207.672 ±   275.027  ops&#x2F;s</span><br><span class="line">BeanCopyTest.beanCopierBeanCopy     1000  thrpt    5   81902.789 ± 25799.131  ops&#x2F;s</span><br><span class="line">BeanCopyTest.beanMappingBeanCopy    1000  thrpt    5    1071.160 ±    40.030  ops&#x2F;s</span><br><span class="line">BeanCopyTest.dozerBeanCopy          1000  thrpt    5       2.715 ±     1.438  ops&#x2F;s</span><br><span class="line">BeanCopyTest.fastJsonBeanCopy       1000  thrpt    5     913.955 ±    93.294  ops&#x2F;s</span><br><span class="line">BeanCopyTest.getSetBeanCopy         1000  thrpt    5  108190.483 ± 11367.291  ops&#x2F;s</span><br><span class="line">BeanCopyTest.mapStructBeanCopy      1000  thrpt    5   98433.589 ±  9000.043  ops&#x2F;s</span><br><span class="line">BeanCopyTest.modelMapperBeanCopy    1000  thrpt    5     341.047 ±   213.611  ops&#x2F;s</span><br><span class="line">BeanCopyTest.orikaBeanCopy          1000  thrpt    5    2123.308 ±   413.037  ops&#x2F;s</span><br><span class="line">BeanCopyTest.springBeanCopy         1000  thrpt    5     404.477 ±   210.129  ops&#x2F;s</span><br></pre></td></tr></table></figure></li><li><p>循环10000次性能数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Benchmark                         (loop)   Mode  Cnt      Score     Error  Units</span><br><span class="line">BeanCopyTest.apacheBeanCopy        10000  thrpt    5      0.634 ±   0.075  ops&#x2F;s</span><br><span class="line">BeanCopyTest.beanAsmBeanCopy       10000  thrpt    5    341.249 ±  46.345  ops&#x2F;s</span><br><span class="line">BeanCopyTest.beanCopierBeanCopy    10000  thrpt    5  10140.338 ± 974.494  ops&#x2F;s</span><br><span class="line">BeanCopyTest.beanMappingBeanCopy   10000  thrpt    5    101.530 ±  48.186  ops&#x2F;s</span><br><span class="line">BeanCopyTest.dozerBeanCopy         10000  thrpt    5      0.335 ±   0.021  ops&#x2F;s</span><br><span class="line">BeanCopyTest.fastJsonBeanCopy      10000  thrpt    5    112.156 ±  11.229  ops&#x2F;s</span><br><span class="line">BeanCopyTest.getSetBeanCopy        10000  thrpt    5  11149.563 ± 831.699  ops&#x2F;s</span><br><span class="line">BeanCopyTest.mapStructBeanCopy     10000  thrpt    5  10504.837 ± 645.696  ops&#x2F;s</span><br><span class="line">BeanCopyTest.modelMapperBeanCopy   10000  thrpt    5     46.042 ±   1.786  ops&#x2F;s</span><br><span class="line">BeanCopyTest.orikaBeanCopy         10000  thrpt    5    218.724 ±  15.450  ops&#x2F;s</span><br><span class="line">BeanCopyTest.springBeanCopy        10000  thrpt    5     51.478 ±   6.783  ops&#x2F;s</span><br></pre></td></tr></table></figure></li><li><p>循环100000次性能数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Benchmark                         (loop)   Mode  Cnt    Score     Error  Units</span><br><span class="line">BeanCopyTest.apacheBeanCopy       100000  thrpt    5    0.071 ±   0.006  ops&#x2F;s</span><br><span class="line">BeanCopyTest.beanAsmBeanCopy      100000  thrpt    5   32.620 ±   3.874  ops&#x2F;s</span><br><span class="line">BeanCopyTest.beanCopierBeanCopy   100000  thrpt    5  646.601 ±  76.820  ops&#x2F;s</span><br><span class="line">BeanCopyTest.beanMappingBeanCopy  100000  thrpt    5   10.471 ±   2.635  ops&#x2F;s</span><br><span class="line">BeanCopyTest.dozerBeanCopy        100000  thrpt    5    0.029 ±   0.003  ops&#x2F;s</span><br><span class="line">BeanCopyTest.fastJsonBeanCopy     100000  thrpt    5    9.685 ±   1.250  ops&#x2F;s</span><br><span class="line">BeanCopyTest.getSetBeanCopy       100000  thrpt    5  571.465 ± 153.503  ops&#x2F;s</span><br><span class="line">BeanCopyTest.mapStructBeanCopy    100000  thrpt    5  441.470 ± 306.007  ops&#x2F;s</span><br><span class="line">BeanCopyTest.modelMapperBeanCopy  100000  thrpt    5    4.380 ±   0.950  ops&#x2F;s</span><br><span class="line">BeanCopyTest.orikaBeanCopy        100000  thrpt    5   18.668 ±   1.685  ops&#x2F;s</span><br><span class="line">BeanCopyTest.springBeanCopy       100000  thrpt    5    4.765 ±   2.302  ops&#x2F;s</span><br></pre></td></tr></table></figure></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>对象属性转换的操作无非是基于反射、AOP、CGlib、ASM、Javassist在编译时和运行期进行处理，再有好的思路就是在编译前生成出对应的get、set，就像手写出来的一样。</li><li>property少，写起来也不麻烦，就直接用传统的<code>getter/setter</code>，性能最好。</li><li>property多，转换很频繁，建议直接用<code>MapStruct</code>，编译时生成get、set方法，性能最优。</li><li>如果不习惯用<code>MapStruct</code>，其次建议用<code>BeanCopier</code>，性能跟<code>MapStruct</code>接近，但是BeanCopier的创建时消耗较大，所以不要频繁创建该实体，最好的处理方式是静态化或者缓存起来。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 属性拷贝 </tag>
            
            <tag> BeanCopy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>certbot申请泛域名证书</title>
      <link href="/2023/03/11/certbot%E7%94%B3%E8%AF%B7%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6/"/>
      <url>/2023/03/11/certbot%E7%94%B3%E8%AF%B7%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>certbot-auto申请证书时发现如下提示:certbot-auto被弃用了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Skipping bootstrap because certbot-auto is deprecated on this system.</span><br><span class="line">Your system is not supported by certbot-auto anymore.</span><br><span class="line">Certbot cannot be installed.</span><br><span class="line">Please visit https:&#x2F;&#x2F;certbot.eff.org&#x2F; to check for other alternatives.</span><br></pre></td></tr></table></figure></li><li>根据github的issue看到作者的回应<blockquote><p>github的issue: <a href="https://github.com/certbot/certbot/issues/8535" target="_blank" rel="noopener">https://github.com/certbot/certbot/issues/8535</a></p></blockquote></li></ul><p><img src="https://cdn.jsdelivr.net/gh/guanyang/pic-repo@main/img/202302281449425.png" alt="github issue"></p><h3 id="安装snap"><a href="#安装snap" class="headerlink" title="安装snap"></a>安装snap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 将EPEL添加到CentOS 7</span><br><span class="line">yum install epel-release   </span><br><span class="line"></span><br><span class="line">#安装snapd</span><br><span class="line">yum install snapd</span><br><span class="line"></span><br><span class="line">#安装后，需要启用用于管理主快照通信套接字</span><br><span class="line">systemctl enable --now snapd.socket</span><br><span class="line"></span><br><span class="line"># 启用快照支持</span><br><span class="line">ln -s &#x2F;var&#x2F;lib&#x2F;snapd&#x2F;snap &#x2F;snap</span><br><span class="line"></span><br><span class="line"># 检查更新snap版本</span><br><span class="line">snap install core</span><br><span class="line">snap refresh core</span><br></pre></td></tr></table></figure><h3 id="卸载旧的certbot"><a href="#卸载旧的certbot" class="headerlink" title="卸载旧的certbot"></a>卸载旧的certbot</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 以前没有装过的不用这一步</span><br><span class="line">yum remove certbot</span><br></pre></td></tr></table></figure><h3 id="安装certbot"><a href="#安装certbot" class="headerlink" title="安装certbot"></a>安装certbot</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 安装certbot</span><br><span class="line">snap install --classic certbot</span><br><span class="line"># --classic: 官方对classic是如上面所描述的那样定义的，它是与strict相对的。也就是说，在默认情况下，它使用的是strict模式，对安全权限做了极高的要求与限制，然后classic就和传统的安装包一样对安全权限没有限制，其实这里的classic就约等于确认已知不安全的风险的含义</span><br><span class="line"></span><br><span class="line"># 添加软链,全局使用</span><br><span class="line">ln -s &#x2F;snap&#x2F;bin&#x2F;certbot &#x2F;usr&#x2F;bin&#x2F;certbot</span><br></pre></td></tr></table></figure><h3 id="申请泛域名证书和自动续期"><a href="#申请泛域名证书和自动续期" class="headerlink" title="申请泛域名证书和自动续期"></a>申请泛域名证书和自动续期</h3><h4 id="申请前准备"><a href="#申请前准备" class="headerlink" title="申请前准备"></a>申请前准备</h4><blockquote><p>当前工具支持阿里云 DNS、腾讯云 DNS、华为云 NDS、GoDaddy（certbot 官方没有对应的插件）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;ywdblog&#x2F;certbot-letencrypt-wildcardcertificates-alydns-au</span><br><span class="line"></span><br><span class="line">cd certbot-letencrypt-wildcardcertificates-alydns-au</span><br><span class="line"></span><br><span class="line">chmod 0777 au.sh</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h4><blockquote><p>详细的参数说明到github查看: <a href="https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au" target="_blank" rel="noopener">https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 例子(这些参数根据自己的情况填写)</span><br><span class="line">certbot certonly  </span><br><span class="line">-d example.com                          </span><br><span class="line">-d *.example.com                        </span><br><span class="line">--manual                                    </span><br><span class="line">--preferred-challenges dns</span><br><span class="line">--dry-run                 </span><br><span class="line">--manual-auth-hook &quot;&#x2F;etc&#x2F;certbot-letencrypt-wildcardcertificates-alydns-au&#x2F;au.sh python aly add&quot;        # 申请之前添加TXT记录</span><br><span class="line">--manual-cleanup-hook &quot;&#x2F;etc&#x2F;certbot-letencrypt-wildcardcertificates-alydns-au&#x2F;au.sh python aly clean&quot;       # 申请之后删除TXT记录</span><br><span class="line">--pre-hook &quot;systemctl stop nginx.service&quot;    # 停止nginx</span><br><span class="line">--post-hook &quot;systemctl start nginx.service&quot;  # 启动nginx</span><br><span class="line"></span><br><span class="line"># 配置说明</span><br><span class="line">-d: 域名</span><br><span class="line">--manual: 手动模式申请</span><br><span class="line">--preferred-challenges: 验证方式</span><br><span class="line">--dry-run: 测试模式(正式使用时去掉这个参数)</span><br><span class="line">--manual-auth-hook: 以交互方式或使用shell脚本获取证书钩子</span><br><span class="line">--manual-cleanup-hook: 以交互方式或使用shell脚本获取证书钩子</span><br><span class="line">--pre-hook: 前置钩子;可用来执行一些命令</span><br><span class="line">--post-hook: 后置钩子;可用来执行一些命令</span><br></pre></td></tr></table></figure><h4 id="自动续期"><a href="#自动续期" class="headerlink" title="自动续期"></a>自动续期</h4><blockquote><p>上面已经成功申请到证书了, 但是只有三个月的有效期，需要定时续期，编辑/etc/crontab，添加定时任务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#证书有效期&lt;30天才会renew，所以crontab可以配置为1天或1周</span><br><span class="line">1 1 *&#x2F;1 * * root certbot renew --cert-name simplehttps.com  --manual-auth-hook &quot;&#x2F;脚本目录&#x2F;au.sh php aly add&quot; --manual-cleanup-hook &quot;&#x2F;脚本目录&#x2F;au.sh php aly clean&quot;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ssl </category>
          
          <category> https </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssl证书 </tag>
            
            <tag> 泛域名证书 </tag>
            
            <tag> 免费证书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apisix入门指南</title>
      <link href="/2022/12/08/apisix%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2022/12/08/apisix%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="Apache-APISIX-是什么？"><a href="#Apache-APISIX-是什么？" class="headerlink" title="Apache APISIX 是什么？"></a>Apache APISIX 是什么？</h3><ul><li><code>Apache APISIX</code>是 Apache 软件基金会下的云原生 API 网关，它兼具动态、实时、高性能等特点，提供了负载均衡、动态上游、灰度发布（金丝雀发布）、服务熔断、身份认证、可观测性等丰富的流量管理功能。</li><li>我们可以使用<code>Apache APISIX</code>来处理传统的南北向流量，也可以处理服务间的东西向流量。同时，它也支持作为 <a href="https://github.com/apache/apisix-ingress-controller" target="_blank" rel="noopener">K8s Ingress Controller</a> 来使用。</li></ul><h3 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h3><ul><li><strong>多平台支持</strong>：APISIX 提供了多平台解决方案，它不但支持裸机运行，也支持在 Kubernetes 中使用，还支持与 AWS Lambda、Azure Function、Lua 函数和 Apache OpenWhisk 等云服务集成。</li><li><strong>多协议支持</strong>：支持TCP/UDP 代理、Dubbo 代理、动态 MQTT 代理、gRPC 代理、Websocket 代理、HTTP(S) 反向代理及动态加载 SSL 证书等多种协议。</li><li><strong>全动态能力</strong>：APISIX 支持热加载，这意味着你不需要重启服务就可以更新 APISIX 的配置。请访问<a href="https://apisix.apache.org/zh/blog/2021/08/25/why-apache-apisix-chose-nginx-and-lua/" target="_blank" rel="noopener">为什么 Apache APISIX 选择 Nginx + Lua 这个技术栈？</a>以了解实现原理。</li><li><strong>精细化路由</strong>：APISIX 支持使用 <a href="http://nginx.org/en/docs/varindex.html" target="_blank" rel="noopener">NGINX 内置变量</a>做为路由的匹配条件，你可以自定义匹配函数来过滤请求，匹配路由。</li><li><strong>安全防护</strong>：丰富的认证、鉴权支持，支持外部的身份认证平台，比如 Auth0，Okta，Authing 等，内置策略，无需配置即可抵御 ReDoS。</li><li><strong>运维友好</strong>：APISIX 支持与以下工具和平台集成，通过 APISIX Dashboard，运维人员可以通过友好且直观的 UI 配置 APISIX。<ul><li><a href="https://apisix.apache.org/zh/docs/apisix/plugins/jwt-auth/#usage-with-hashicorp-vault" target="_blank" rel="noopener">HashiCorp Vault</a></li><li><a href="https://apisix.apache.org/zh/docs/apisix/plugins/zipkin/" target="_blank" rel="noopener">Zipkin</a></li><li><a href="https://apisix.apache.org/zh/docs/apisix/plugins/skywalking/" target="_blank" rel="noopener">Apache SkyWalking</a></li><li><a href="https://apisix.apache.org/zh/docs/apisix/discovery/consul_kv/" target="_blank" rel="noopener">Consul</a></li><li><a href="https://apisix.apache.org/zh/docs/apisix/discovery/nacos/" target="_blank" rel="noopener">Nacos</a></li><li><a href="https://apisix.apache.org/zh/docs/apisix/discovery/" target="_blank" rel="noopener">Eureka</a></li></ul></li><li><strong>高度可扩展</strong>：支持自定义插件，<a href="https://github.com/apache/apisix/blob/master/docs/zh/latest/external-plugin.md" target="_blank" rel="noopener">插件可以用 Java/Go/Python 编写</a>，支持自定义负载均衡算法和自定义路由。</li><li><strong>多语言插件支持</strong>：APISIX 支持多种开发语言进行插件开发，开发人员可以选择擅长语言的 SDK 开发自定义插件。</li><li><strong>Serverless</strong>：<ul><li><a href="https://github.com/apache/apisix/blob/master/docs/zh/latest/plugins/serverless.md" target="_blank" rel="noopener">Lua functions</a>：能在 APISIX 每个阶段调用 lua 函数。</li><li><a href="https://github.com/apache/apisix/blob/master/docs/zh/latest/plugins/azure-functions.md" target="_blank" rel="noopener">Azure functions</a>：能无缝整合进 Azure Serverless Function 中。作为动态上游，能将特定的 URI 请求全部代理到微软 Azure 云中。</li><li><a href="https://github.com/apache/apisix/blob/master/docs/zh/latest/plugins/openwhisk.md" target="_blank" rel="noopener">Apache OpenWhisk</a>：与 Apache OpenWhisk 集成。作为动态上游，能将特定的 URI 请求代理到你自己的 OpenWhisk 集群。</li></ul></li></ul><h3 id="APISIX架构"><a href="#APISIX架构" class="headerlink" title="APISIX架构"></a>APISIX架构</h3><h4 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h4><p><img src="../../../../img/note/APISIX总体架构.png" alt="总体架构"></p><h4 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h4><p><img src="../../../../img/note/APISIX技术架构.png" alt="技术架构"></p><h4 id="部署架构"><a href="#部署架构" class="headerlink" title="部署架构"></a>部署架构</h4><ul><li>下图中的三种形态都允许用户去部署：Admin、Gateway、Gateway+Admin。</li><li>APISIX的解决方案首先是 All In One，即只有一个 “Gateway+Admin” 的包，当用户需要将 Gateway 和 Admin 分别部署时，只需修改配置，是否启用 Admin 就可以实现。</li></ul><p><img src="../../../../img/note/APISIX部署架构.png" alt="部署架构"></p><h3 id="APISIX安装"><a href="#APISIX安装" class="headerlink" title="APISIX安装"></a>APISIX安装</h3><ul><li><a href="https://apisix.apache.org/zh/docs/apisix/installation-guide/" target="_blank" rel="noopener">官方安装指南</a></li></ul><h3 id="APISIX对象"><a href="#APISIX对象" class="headerlink" title="APISIX对象"></a>APISIX对象</h3><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><ul><li><a href="https://github.com/apache/apisix/blob/master/docs/zh/latest/terminology/route.md" target="_blank" rel="noopener">Route</a>：通过路由定义规则来匹配客户端请求，根据匹配结果加载并执行相应的插件，最后把请求转发给到指定的上游应用。</li><li><a href="https://github.com/apache/apisix/blob/master/docs/zh/latest/terminology/service.md" target="_blank" rel="noopener">Service</a>：是某类 API 的抽象（也可以理解为一组 Route 的抽象）。它通常与上游服务抽象是一一对应的，但与路由之间，通常是 1:N 即一对多的关系。</li><li><a href="https://github.com/apache/apisix/blob/master/docs/zh/latest/terminology/upstream.md" target="_blank" rel="noopener">Upstream</a>：是对虚拟主机抽象，即应用层服务或节点的抽象。你可以通过 Upstream 对象对多个服务节点按照配置规则进行负载均衡。</li><li><a href="https://github.com/apache/apisix/blob/master/docs/zh/latest/terminology/consumer.md" target="_blank" rel="noopener">Consumer</a>：是某类服务的消费者，需要与用户认证配合才可以使用。当不同的消费者请求同一个 API 时，APISIX 会根据当前请求的用户信息，对应不同的 Plugin 或 Upstream 配置。</li><li><a href="https://github.com/apache/apisix/blob/master/docs/zh/latest/terminology/global-rule.md" target="_blank" rel="noopener">Global Rule</a>：如果你需要一个能作用于所有请求的 Plugin，可以通过 Global Rules 启用一个全局的插件配置。</li><li><a href="https://github.com/apache/apisix/blob/master/docs/zh/latest/terminology/plugin.md" target="_blank" rel="noopener">Plugin</a>：表示将在 HTTP 请求/响应生命周期期间执行的插件配置。Plugin 的配置信息可以直接绑定在 Route 上，也可以被绑定在 Service、Consumer 或 Plugin Config 上。</li><li><a href="https://github.com/apache/apisix/blob/master/docs/zh/latest/terminology/plugin-config.md" target="_blank" rel="noopener">Plugin Config</a>：在很多情况下，我们在不同的路由中会使用相同的插件规则，此时就可以通过 Plugin Config 来设置这些规则。Plugin Config 属于一组通用插件配置的抽象。</li></ul><h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h4><p><img src="../../../../img/note/apisix数据模型.png" alt="数据模型"></p><h4 id="插件优先级"><a href="#插件优先级" class="headerlink" title="插件优先级"></a>插件优先级</h4><ul><li>对于同一个插件的配置，只能有一个是有效的，其插件配置优先级为：Consumer &gt; Route &gt; Plugin Config &gt; Service</li></ul><h3 id="APISIX配置"><a href="#APISIX配置" class="headerlink" title="APISIX配置"></a>APISIX配置</h3><ul><li><strong>静态配置</strong>：仅在程序启动时生效，若修改后需要重启<ul><li>永远不要手工修改<code>conf/config-default.yaml</code>文件，该文件是与 APISIX 源码强绑定。如果需要自定义任何配置，都应在<code>config.yaml</code>文件中完成。</li><li>当服务每次启动时，apisix 会根据<code>conf/config.yaml</code>配置和模板<a href="https://github.com/apache/apisix/blob/master/apisix/cli/ngx_tpl.lua" target="_blank" rel="noopener">apisix/cli/ngx_tpl.lua</a>自动生成新的<code>conf/nginx.conf</code>并自动启动服务。</li></ul></li><li><strong>动态配置</strong>：可在程序执行过程中动态加载，修改配置后不需要重启，可以热加载，分为：”Stand-alone”管理模式和etcd配置中心管理模式<ul><li><a href="https://github.com/apache/apisix/blob/master/docs/zh/latest/stand-alone.md" target="_blank" rel="noopener">Stand-alone模式</a>：即本地存储方式：<code>conf/apisix.yaml</code></li><li><a href="https://www.taohui.tech/2021/08/10/%E5%BC%80%E6%BA%90%E7%BD%91%E5%85%B3APISIX%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">etcd配置中心管理模式</a>：即路由配置通过Admin API持久化在etcd中</li></ul></li></ul><h3 id="插件扩展"><a href="#插件扩展" class="headerlink" title="插件扩展"></a>插件扩展</h3><h4 id="External-Plugin"><a href="#External-Plugin" class="headerlink" title="External Plugin"></a>External Plugin</h4><h5 id="配置自定义lua插件"><a href="#配置自定义lua插件" class="headerlink" title="配置自定义lua插件"></a>配置自定义lua插件</h5><ol><li>将自定义lua插件放到<code>/usr/local/apisix/apisix/plugins</code>目录，插件开发参考<a href="https://apisix.apache.org/zh/docs/apisix/plugin-develop/" target="_blank" rel="noopener">apisix插件开发官方文档</a></li><li>修改<code>/usr/local/apisix/conf/config.yaml</code>配置，在<code>plugins</code>节点下启用自定义lua插件，并重启apisix服务<code>service apisix restart</code></li><li>导出apisix插件<code>schema</code>配置：<code>curl http://127.0.0.1:9090/v1/schema &gt; schema.json</code><blockquote><p>如果导出命令报错，参考<a href="https://apisix.apache.org/docs/dashboard/FAQ/#4-after-modifying-the-plugin-schema-or-creating-a-custom-plugin-in-apache-apisix-why-cant-i-find-it-on-the-dashboard" target="_blank" rel="noopener">官方文档配置</a></p></blockquote></li><li>将<code>schema.json</code>上传到<code>/usr/local/apisix-dashboard/conf</code>路径下，注意先备份原<code>schema.json</code>配置</li><li>重启<code>apisix-dashboard</code></li></ol><h5 id="挂载开源热门lua插件"><a href="#挂载开源热门lua插件" class="headerlink" title="挂载开源热门lua插件"></a>挂载开源热门lua插件</h5><ol><li>将现有lua插件放到<code>/usr/local/apisix/deps/share/lua/5.1</code>目录</li><li>例如挂载<a href="https://github.com/cloudflare/lua-resty-cookie" target="_blank" rel="noopener">lua-resty-cookie</a>插件，自定义lua脚本引用如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local cookie &#x3D; require(&quot;resty.cookie&quot;)</span><br></pre></td></tr></table></figure></li><li>如果挂载多个相同功能的lua插件，则按照以下路径优先配置的插件优先生效<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lua_package_path  &quot;$prefix&#x2F;deps&#x2F;share&#x2F;lua&#x2F;5.1&#x2F;?.lua;$prefix&#x2F;deps&#x2F;share&#x2F;lua&#x2F;5.1&#x2F;?&#x2F;init.lua;&#x2F;usr&#x2F;local&#x2F;apisix&#x2F;?.lua;&#x2F;usr&#x2F;local&#x2F;apisix&#x2F;?&#x2F;init.lua;;&#x2F;usr&#x2F;local&#x2F;apisix&#x2F;?.lua;.&#x2F;?.lua;&#x2F;usr&#x2F;local&#x2F;openresty&#x2F;luajit&#x2F;share&#x2F;luajit-2.1.0-beta3&#x2F;?.lua;&#x2F;usr&#x2F;local&#x2F;share&#x2F;lua&#x2F;5.1&#x2F;?.lua;&#x2F;usr&#x2F;local&#x2F;share&#x2F;lua&#x2F;5.1&#x2F;?&#x2F;init.lua;&#x2F;usr&#x2F;local&#x2F;openresty&#x2F;luajit&#x2F;share&#x2F;lua&#x2F;5.1&#x2F;?.lua;&#x2F;usr&#x2F;local&#x2F;openresty&#x2F;luajit&#x2F;share&#x2F;lua&#x2F;5.1&#x2F;?&#x2F;init.lua;;&quot;;</span><br></pre></td></tr></table></figure></li></ol><h4 id="Plugin-Runner"><a href="#Plugin-Runner" class="headerlink" title="Plugin Runner"></a>Plugin Runner</h4><p><img src="../../../../img/note/APISIX-Plugin-Runner.png" alt="Plugin Runner"></p><ul><li>当你在 APISIX 中配置了一个 Plugin Runner ，APISIX 将以子进程的方式运行该 Plugin Runner 。</li><li>该子进程与 APISIX 进程从属相同用户。当重启或者重新加载 APISIX 时，该 Plugin Runner 也将被重启。</li><li>一旦你为指定路由配置了 ext-plugin-* 插件， 匹配该路由的请求将触发从 APISIX 到 Plugin Runner 的 RPC 调用。</li><li>支持的 Plugin Runner<ul><li>Java: <a href="https://github.com/apache/apisix-java-plugin-runner" target="_blank" rel="noopener">https://github.com/apache/apisix-java-plugin-runner</a></li><li>Go: <a href="https://github.com/apache/apisix-go-plugin-runner" target="_blank" rel="noopener">https://github.com/apache/apisix-go-plugin-runner</a></li><li>Python: <a href="https://github.com/apache/apisix-python-plugin-runner" target="_blank" rel="noopener">https://github.com/apache/apisix-python-plugin-runner</a></li><li>JavaScript: <a href="https://github.com/zenozeng/apisix-javascript-plugin-runner" target="_blank" rel="noopener">https://github.com/zenozeng/apisix-javascript-plugin-runner</a></li></ul></li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://apisix.apache.org/zh/docs/apisix/getting-started/" target="_blank" rel="noopener">Apache APISIX官方文档</a></li><li><a href="https://apisix.apache.org/zh/docs/dashboard/USER_GUIDE/" target="_blank" rel="noopener">Apache APISIX Dashboard官方文档</a></li><li><a href="https://github.com/apache/apisix/tree/master/docs/zh/latest" target="_blank" rel="noopener">Apache APISIX Github文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> API Gateway </category>
          
          <category> APISIX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APISIX教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自旋锁、CLH锁及MCS锁原理及实现</title>
      <link href="/2022/08/26/Java%E8%87%AA%E6%97%8B%E9%94%81%E3%80%81CLH%E9%94%81%E5%8F%8AMCS%E9%94%81%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/08/26/Java%E8%87%AA%E6%97%8B%E9%94%81%E3%80%81CLH%E9%94%81%E5%8F%8AMCS%E9%94%81%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><h4 id="SMP-Symmetric-Multi-Processor"><a href="#SMP-Symmetric-Multi-Processor" class="headerlink" title="SMP(Symmetric Multi-Processor)"></a>SMP(Symmetric Multi-Processor)</h4><ul><li>对称多处理器结构，它是相对非对称多处理技术而言的、应用十分广泛的并行技术。</li><li>操作系统将任务队列对称地分布于多个CPU之上，从而极大地提高了整个系统的数据处理能力。</li><li>但是随着CPU数量的增加，每个CPU都要访问相同的内存资源，共享资源可能会成为系统瓶颈，导致CPU资源浪费。</li></ul><p><img src="../../../../img/note/SMP架构图.png" alt="SMP架构图"></p><h4 id="NUMA-Non-Uniform-Memory-Access"><a href="#NUMA-Non-Uniform-Memory-Access" class="headerlink" title="NUMA(Non-Uniform Memory Access)"></a>NUMA(Non-Uniform Memory Access)</h4><ul><li>非一致存储访问，将CPU分为CPU模块，每个CPU模块由多个CPU组成，并且具有独立的本地内存、I/O槽口等，模块之间可以通过互联模块相互访问。</li><li>访问本地内存（本CPU模块的内存）的速度将远远高于访问远程内存(其他CPU模块的内存)的速度，这也是非一致存储访问的由来。</li><li>NUMA较好地解决SMP的扩展问题，当CPU数量增加时，因为访问远地内存的延时远远超过本地内存，系统性能无法线性增加。</li></ul><p><img src="../../../../img/note/NUMA架构图.png" alt="NUMA架构图"></p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><h4 id="自旋锁（Spin-Lock）"><a href="#自旋锁（Spin-Lock）" class="headerlink" title="自旋锁（Spin Lock）"></a>自旋锁（Spin Lock）</h4><ul><li>自旋锁是指当一个线程尝试获取某个锁时，如果该锁已被其他线程占用，就一直循环检测锁是否被释放，而不是进入线程挂起或睡眠状态。</li><li>自旋锁适用于锁保护的临界区很小的情况，临界区很小的话，锁占用的时间就很短。</li><li>简单自旋锁实现示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleSpinLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用CAS操作，解决多线程并发操作导致数据不一致的问题</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicReference&lt;Thread&gt; owner = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread currentThread = Thread.currentThread();</span><br><span class="line">        <span class="comment">// 如果锁未被占用，则设置当前线程为锁的拥有者</span></span><br><span class="line">        <span class="keyword">while</span> (!owner.compareAndSet(<span class="keyword">null</span>, currentThread)) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread currentThread = Thread.currentThread();</span><br><span class="line">        <span class="comment">// 只有锁的拥有者才能释放锁</span></span><br><span class="line">        owner.compareAndSet(currentThread, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>缺点如下：<ul><li>独占，不支持重入</li><li>CAS操作需要系统底层硬件的配合</li><li>保证各个CPU的缓存（L1、L2、L3、跨CPU Socket、主存）的数据一致性，通讯开销很大，在多处理器系统上更严重</li><li>没法保证公平性，不保证等待线程按照FIFO顺序获得锁</li></ul></li></ul><h4 id="自旋可重入锁"><a href="#自旋可重入锁" class="headerlink" title="自旋可重入锁"></a>自旋可重入锁</h4><ul><li>在自旋锁基础上加入计数器，支持可重入</li><li>实现示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantSpinLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用CAS操作，解决多线程并发操作导致数据不一致的问题</span></span><br><span class="line">    <span class="keyword">private</span> AtomicReference&lt;Thread&gt; owner = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line">    <span class="comment">//加入计数器，支持可重入</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread currentThread = Thread.currentThread();</span><br><span class="line">        <span class="comment">//如果锁被当前线程占用，则计数器+1</span></span><br><span class="line">        <span class="keyword">if</span> (currentThread == owner.get()) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果锁未被占用，则设置当前线程为锁的拥有者</span></span><br><span class="line">        <span class="keyword">while</span> (!owner.compareAndSet(<span class="keyword">null</span>, currentThread)) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread currentThread = Thread.currentThread();</span><br><span class="line">        <span class="keyword">if</span> (currentThread == owner.get()) &#123;</span><br><span class="line">            <span class="comment">//count大于0，说明锁被占用多次，执行-1</span></span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                count--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//执行锁释放</span></span><br><span class="line">                owner.compareAndSet(currentThread, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="排队自旋锁"><a href="#排队自旋锁" class="headerlink" title="排队自旋锁"></a>排队自旋锁</h4><ul><li>为了解决上面的公平性问题，类似于现实中银行柜台的排队叫号：锁拥有一个服务号，表示正在服务的线程，还有一个排队号</li><li>每个线程尝试获取锁之前先拿一个排队号，然后不断轮询锁的当前服务号是否是自己的排队号，如果是，则表示自己拥有了锁，不是则继续轮询</li><li>实现示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AtomicLong serviceNum = <span class="keyword">new</span> AtomicLong();<span class="comment">//服务号</span></span><br><span class="line">    <span class="keyword">private</span> AtomicLong ticketNum = <span class="keyword">new</span> AtomicLong();<span class="comment">//排队号</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先原子性地获得一个排队号</span></span><br><span class="line">        <span class="keyword">long</span> myTicketNum = ticketNum.getAndIncrement();</span><br><span class="line">        <span class="comment">// 只要当前服务号不是自己的就不断轮询</span></span><br><span class="line">        <span class="keyword">while</span> (serviceNum.get() != myTicketNum) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> myTicketNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">(<span class="keyword">long</span> myTicketNum)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 只有当前拥有者才能释放锁</span></span><br><span class="line">        serviceNum.compareAndSet(myTicketNum, myTicketNum + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>缺点<ul><li>独占，不可重入</li><li>虽然解决了公平性的问题，但是多处理器系统上，每个进程/线程占用的处理器都在读写同一个变量serviceNum ，每次读写操作都必须在多个处理器缓存之间进行缓存同步，这会导致繁重的系统总线和内存的流量，大大降低系统整体的性能</li></ul></li></ul><h4 id="CLH锁"><a href="#CLH锁" class="headerlink" title="CLH锁"></a>CLH锁</h4><ul><li>自旋公平锁（保证FIFO），独占锁，不可重入</li><li>CLH的发明人是：Craig，Landin and Hagersten，基于名称简写而来</li><li>CLH锁是一种基于单向链表的高性能、公平的自旋锁</li><li>申请加锁的线程通过前驱节点的变量进行自旋，在前置节点解锁后，当前节点会结束自旋，并进行加锁。</li><li>在SMP架构下，CLH更具有优势，在NUMA架构下，如果当前节点与前驱节点不在同一CPU模块下，跨CPU模块会带来额外的系统开销，而MCS锁更适用于NUMA架构。</li></ul><p><img src="../../../../img/note/CLH锁示例图.png" alt="CLH锁示例图"></p><ul><li>实现示例如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClhSpinLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;Node&gt; prev;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;Node&gt; node;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicReference&lt;Node&gt; tail;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClhSpinLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.node = ThreadLocal.withInitial(Node::<span class="keyword">new</span>);</span><br><span class="line">        <span class="keyword">this</span>.prev = ThreadLocal.withInitial(() -&gt; <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.tail = <span class="keyword">new</span> AtomicReference&lt;Node&gt;(<span class="keyword">new</span> Node());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.初始状态 tail指向一个node(head)节点</span></span><br><span class="line"><span class="comment">     * +------+</span></span><br><span class="line"><span class="comment">     * | head | &lt;---- tail</span></span><br><span class="line"><span class="comment">     * +------+</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2.lock-thread加入等待队列: tail指向新的Node，同时Prev指向tail之前指向的节点</span></span><br><span class="line"><span class="comment">     * +----------+</span></span><br><span class="line"><span class="comment">     * | Thread-A |</span></span><br><span class="line"><span class="comment">     * | := Node  | &lt;---- tail</span></span><br><span class="line"><span class="comment">     * | := Prev  | -----&gt; +------+</span></span><br><span class="line"><span class="comment">     * +----------+        | head |</span></span><br><span class="line"><span class="comment">     *                     +------+</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *             +----------+            +----------+</span></span><br><span class="line"><span class="comment">     *             | Thread-B |            | Thread-A |</span></span><br><span class="line"><span class="comment">     * tail ----&gt;  | := Node  |     --&gt;    | := Node  |</span></span><br><span class="line"><span class="comment">     *             | := Prev  | ----|      | := Prev  | -----&gt;  +------+</span></span><br><span class="line"><span class="comment">     *             +----------+            +----------+         | head |</span></span><br><span class="line"><span class="comment">     *                                                          +------+</span></span><br><span class="line"><span class="comment">     * 3.寻找当前node的prev-node然后开始自旋</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node node = <span class="keyword">this</span>.node.get();</span><br><span class="line">        node.locked = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 将tail设置为当前线程的节点，并获取到上一个节点，此操作为原子性操作</span></span><br><span class="line">        Node pred = <span class="keyword">this</span>.tail.getAndSet(node);</span><br><span class="line">        <span class="keyword">this</span>.prev.set(pred);</span><br><span class="line">        <span class="comment">// 在前驱节点的locked字段上自旋等待</span></span><br><span class="line">        <span class="keyword">while</span> (pred.locked) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node node = <span class="keyword">this</span>.node.get();</span><br><span class="line">        <span class="comment">// 将当前线程节点的locked属性设置为false，使下一个节点成功获取锁</span></span><br><span class="line">        node.locked = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.node.set(<span class="keyword">this</span>.prev.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> locked;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="MCS锁"><a href="#MCS锁" class="headerlink" title="MCS锁"></a>MCS锁</h4><ul><li>自旋公平锁（保证FIFO），独占锁，不可重入</li><li>MCS 来自于其发明人名字的首字母： John Mellor-Crummey和Michael Scott</li><li>MSC与CLH最大的不同并不是链表是显示还是隐式，而是线程自旋的规则不同，CLH是在前趋结点的locked域上自旋等待，而MCS是在自己的结点的locked域上自旋等待</li><li>它解决了CLH在NUMA系统架构中获取locked域状态内存过远的问题</li><li>实现示例如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">McsSpinLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;Node&gt; current;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicReference&lt;Node&gt; tail;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">McsSpinLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.current = ThreadLocal.withInitial(Node::<span class="keyword">new</span>);</span><br><span class="line">        <span class="keyword">this</span>.tail = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node node = current.get();</span><br><span class="line">        Node pred = tail.getAndSet(node);</span><br><span class="line">        <span class="comment">// pred的初始值为null，所以第一个加锁线程，直接跳过判断，加锁成功</span></span><br><span class="line">        <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">            pred.next = node;</span><br><span class="line">            <span class="comment">// 在当前节点的locked字段上自旋等待</span></span><br><span class="line">            <span class="keyword">while</span> (node.locked) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node node = current.get();</span><br><span class="line">        <span class="keyword">if</span> (node.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果设置成功，说明在此之前没有线程进行lock操作，直接return即可；</span></span><br><span class="line">            <span class="comment">// 如果失败，则说明在此之前有线程进行lock操作，需要自旋等待那个线程将自身节点设置为本线程节点的next，</span></span><br><span class="line">            <span class="comment">// 然后进行后面的操作。</span></span><br><span class="line">            <span class="keyword">if</span> (tail.compareAndSet(node, <span class="keyword">null</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (node.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通知下一个线程，使下一个线程加锁成功</span></span><br><span class="line">        node.next.locked = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 解锁后需要将节点之间的关联断开，否则会产生内存泄露ø</span></span><br><span class="line">        node.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">boolean</span> locked = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">volatile</span> Node next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="CLH锁与MCS锁比较"><a href="#CLH锁与MCS锁比较" class="headerlink" title="CLH锁与MCS锁比较"></a>CLH锁与MCS锁比较</h4><p><img src="../../../../img/note/CLH-MCS-SpinLock.png" alt="锁队列图示"></p><ul><li>对比说明<ul><li>从代码实现来看，CLH比MCS要简单得多</li><li>从自旋的条件来看，CLH是在前驱节点的属性上自旋，而MCS是在本地属性变量上自旋</li><li>从链表队列来看，CLH的队列是隐式的，CLHNode并不实际持有下一个节点；MCS的队列是物理存在的</li><li>CLH锁释放时只需要改变自己的属性，MCS锁释放则需要改变后继节点的属性</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高并发 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 自旋锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发容器及使用场景</title>
      <link href="/2022/08/03/Java%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
      <url>/2022/08/03/Java%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>Java集合容器，主要有四大类别：<code>List</code> <code>Set</code> <code>Queue</code> <code>Map</code>，常见的<code>ArrayList</code> <code>HashMap</code>这些都不是线程安全的</li><li><strong>同步容器</strong>：简单理解为通过<code>synchronized</code>来实现同步的容器，比如<code>Vector</code>、<code>Hashtable</code>以及<code>SynchronizedList</code>等容器</li><li>同步容器由于共同竞争容器级别的锁，虽然解决了线程安全问题，但是整体吞吐量降低</li></ul><h2 id="并发容器设计思路"><a href="#并发容器设计思路" class="headerlink" title="并发容器设计思路"></a>并发容器设计思路</h2><ul><li>针对多线程并发设计，使用了锁分段技术，只对操作的位置进行同步操作，减小锁的粒度，从而提高吞吐量</li><li>采用CAS算法和部分代码使用<code>synchronized</code>锁保证线程安全</li></ul><h2 id="并发容器分类"><a href="#并发容器分类" class="headerlink" title="并发容器分类"></a>并发容器分类</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><ul><li>CopyOnWriteArrayList<ul><li>目标：代替Vector、synchronizedList</li><li>原理：利用高并发往往是读多写少的特性，对读操作不加锁，对写操作，先复制一份新的集合，在新的集合上面修改，然后将新集合赋值给旧的引用，并通过volatile 保证其可见性，当然写操作的锁是必不可少的了。</li></ul></li></ul><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><ul><li>ConcurrentHashMap<ul><li>目标：代替Hashtable、synchronizedMap，支持复合操作</li><li>原理：JDK6中采用一种更加细粒度的加锁机制Segment“分段锁”，JDK8中采用CAS无锁算法。</li></ul></li><li>ConcurrentSkipListMap<ul><li>目标：代替synchronizedSortedMap(TreeMap)</li><li>原理：Skip list（跳表）是一种可以代替平衡树的数据结构，默认是按照Key值升序的。</li></ul></li></ul><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><ul><li>ConcurrentSkipListSet<ul><li>目标：代替synchronizedSortedSet</li><li>原理：内部基于ConcurrentSkipListMap实现</li></ul></li><li>CopyOnWriteArraySet<ul><li>目标：代替synchronizedSet</li><li>原理：基于CopyOnWriteArrayList实现，其唯一的不同是在add时调用的是CopyOnWriteArrayList的addIfAbsent方法，其遍历当前Object数组，如Object数组中已有了当前元素，则直接返回，如果没有则放入Object数组的尾部，并返回。</li></ul></li></ul><h3 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h3><ul><li>ArrayBlockingQueue<ul><li>基于数组实现的阻塞FIFO队列</li><li>通过ReentrantLock实现线程安全，由<code>notEmpty</code>、<code>notFull</code>两个Condition实现阻塞和唤醒</li></ul></li><li>LinkedBlockingQueue<ul><li>基于链表实现的阻塞FIFO队列</li><li>通过ReentrantLock实现线程安全，通过Condition实现阻塞和唤醒，由<code>takeLock</code>、<code>putLock</code>两把锁保证并发安全</li></ul></li><li>SynchronousQueue<ul><li>同步队列，可用于线程间交换数据却不用存储数据</li><li>队列支持公平和非公平的模式，公平模式的数据结构是队列（FIFO），非公平模式使用的是栈（LIFO）</li></ul></li><li>LinkedTransferQueue<ul><li>基于链表实现的无界阻塞队列</li><li>相当于<code>LinkedBlockingQueue</code>和<code>SynchronousQueue</code>的合体，性能比<code>LinkedBlockingQueue</code>更高，比<code>SynchronousQueue</code>能存储更多的元素</li><li>当<code>put</code>时，如果有等待的线程，就直接将元素 “交给” 等待者， 否则直接进入队列</li><li><code>put</code>和<code>transfer</code>方法的区别是，<code>put</code>是立即返回的，<code>transfer</code>是阻塞等待消费者拿到数据才返回。</li></ul></li><li>PriorityBlockingQueue<ul><li>基于数组实现的支持优先级的无界阻塞队列，底层是基于二叉小顶堆实现</li><li>通过ReentrantLock实现线程安全，通过Condition实现阻塞和唤醒</li></ul></li><li>DelayQueue<ul><li>支持延时获取元素的无界阻塞队列，内部使用<code>PriorityQueue</code>来实现</li><li>进入队列的元素必须实现<code>Delayed</code>接口，在创建元素时可以指定多久才能从队列中获取当前元素，只有在延迟期满时才能从中提取元素</li></ul></li></ul><h3 id="BlockingDeque"><a href="#BlockingDeque" class="headerlink" title="BlockingDeque"></a>BlockingDeque</h3><ul><li>LinkedBlockingDeque<ul><li>基于双向链表实现的阻塞FIFO或FILO队列</li><li>通过ReentrantLock实现线程安全，通过Condition实现阻塞和唤醒</li></ul></li></ul><h3 id="ConcurrentLinkedQueue"><a href="#ConcurrentLinkedQueue" class="headerlink" title="ConcurrentLinkedQueue"></a>ConcurrentLinkedQueue</h3><ul><li>并发中的非阻塞队列，采用CAS非阻塞算法实现线程安全</li><li>基于链表实现的FIFO队列（LinkedList的并发版本）</li><li>由于使用CAS没有使用锁，所以获取size的时候有可能进行offer，poll或者remove操作，导致获取的元素个数不精确，所以在并发情况下size函数不是很有用。</li></ul><h3 id="ConcurrentLinkedDeque"><a href="#ConcurrentLinkedDeque" class="headerlink" title="ConcurrentLinkedDeque"></a>ConcurrentLinkedDeque</h3><ul><li>并发中的非阻塞队列，采用CAS非阻塞算法实现线程安全</li><li>基于双向链表实现的FIFO或FILO队列</li><li>由于使用CAS没有使用锁，所以获取size的时候有可能进行offer，poll或者remove操作，导致获取的元素个数不精确，所以在并发情况下size函数不是很有用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高并发 </tag>
            
            <tag> 并发容器 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 同步容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AQS原理及实战</title>
      <link href="/2022/08/03/AQS%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E6%88%98/"/>
      <url>/2022/08/03/AQS%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><ul><li>Java中的大部分同步类（Lock、Semaphore、ReentrantLock等）都是基于AbstractQueuedSynchronizer（简称为AQS）实现的。</li><li>AQS是一种提供了原子式管理同步状态、阻塞和唤醒线程功能以及CLH队列模型的简单框架。</li><li>AQS同时提供了互斥模式（exclusive）和共享模式（shared）两种不同的同步逻辑。</li><li>基于AQS同步器实现参考：<ul><li>ReentrantLock</li><li>ReentrantReadWriteLock</li><li>Semaphore</li><li>CountDownLatch</li><li>ThreadPoolExecutor.Worker</li></ul></li></ul><h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><ul><li>共享资源（state）变量是<code>volatile int</code>类型，保证可见性</li><li>基于CLH队列锁模型实现线程阻塞等待及唤醒机制，如图所示：</li></ul><p><img src="../../../../img/note/AQS-CLH.png" alt="CLH队列"></p><ul><li><strong>Sync queue</strong>: 同步队列是一个双向列表，包括head节点和tail节点</li></ul><p><img src="../../../../img/note/AQS-sync_queue.png" alt="Sync queue"></p><ul><li><strong>Condition queue</strong>: 非必须，单向列表，当程序中存在<code>condition</code>的时候才会存在此列表</li></ul><p><img src="../../../../img/note/AQS-condition_queue.png" alt="Condition queue"></p><h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><ul><li>AQS使用一个int成员变量来表示同步状态</li><li>使用Node实现FIFO队列，可以用于构建锁或者其他同步装置</li><li>AQS资源共享方式：独占Exclusive（排它锁模式）和共享Share（共享锁模式）</li></ul><h3 id="state状态"><a href="#state状态" class="headerlink" title="state状态"></a>state状态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示该线程节点已释放（超时、中断），已取消的节点不会再阻塞</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED =  <span class="number">1</span>;</span><br><span class="line"><span class="comment">//表示该线程的后续线程需要阻塞，即只要前置节点释放锁，就会通知标识为 SIGNAL 状态的后续节点的线程</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIGNAL    = -<span class="number">1</span>;</span><br><span class="line"><span class="comment">//表示该线程在condition队列中阻塞（Condition有使用）</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONDITION = -<span class="number">2</span>;</span><br><span class="line"><span class="comment">//表示该线程以及后续线程进行无条件传播（CountDownLatch中有使用）共享模式下</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROPAGATE = -<span class="number">3</span>;</span><br></pre></td></tr></table></figure><h3 id="自定义同步器实现"><a href="#自定义同步器实现" class="headerlink" title="自定义同步器实现"></a>自定义同步器实现</h3><blockquote><p>自定义同步器在实现时只需要实现共享资源state的获取与释放方式即可，主要实现以下几种方法：</p></blockquote><ul><li>isHeldExclusively()：该线程是否正在独占资源。只有用到condition才需要去实现它。</li><li>tryAcquire(int)：独占方式。尝试获取资源，成功则返回true，失败则返回false。</li><li>tryRelease(int)：独占方式。尝试释放资源，成功则返回true，失败则返回false。</li><li>tryAcquireShared(int)：共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</li><li>tryReleaseShared(int)：共享方式。尝试释放资源，如果释放后允许唤醒后续等待结点返回true，否则返回false。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高并发 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LockSupport实战</title>
      <link href="/2022/08/03/LockSupport%E5%AE%9E%E6%88%98/"/>
      <url>/2022/08/03/LockSupport%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><ul><li><code>LockSupport</code>类可以阻塞当前线程以及唤醒指定被阻塞的线程。</li><li>主要是通过<code>park()</code>和<code>unpark(thread)</code>方法来实现阻塞和唤醒线程的操作的。</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>每个线程都有一个许可(permit)，permit只有两个值1和0，默认是0。</li><li>当调用unpark(thread)方法，就会将thread线程的许可permit设置成1(注意多次调用unpark方法，不会累加，permit值还是1)。</li><li>当调用park()方法，如果当前线程的permit是1，那么将permit设置为0，并立即返回。如果当前线程的permit是0，那么当前线程就会阻塞，直到别的线程将当前线程的permit设置为1.park方法会将permit再次设置为0，并返回。</li></ul><blockquote><p>注意：因为permit默认是0，所以一开始调用park()方法，线程必定会被阻塞。调用unpark(thread)方法后，会自动唤醒thread线程，即park方法立即返回。</p></blockquote><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">park</span><span class="params">(Object blocker)</span></span>; <span class="comment">// 暂停当前线程</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parkNanos</span><span class="params">(Object blocker, <span class="keyword">long</span> nanos)</span></span>; <span class="comment">// 暂停当前线程，不过有超时时间的限制</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parkUntil</span><span class="params">(Object blocker, <span class="keyword">long</span> deadline)</span></span>; <span class="comment">// 暂停当前线程，直到某个时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">park</span><span class="params">()</span></span>; <span class="comment">// 无期限暂停当前线程</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parkNanos</span><span class="params">(<span class="keyword">long</span> nanos)</span></span>; <span class="comment">// 暂停当前线程，不过有超时时间的限制</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parkUntil</span><span class="params">(<span class="keyword">long</span> deadline)</span></span>; <span class="comment">// 暂停当前线程，直到某个时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unpark</span><span class="params">(Thread thread)</span></span>; <span class="comment">// 恢复当前线程</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBlocker</span><span class="params">(Thread t)</span></span>; <span class="comment">//阻塞的对象，方便线程dump时查看具体信息</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><code>LockSupport</code>不需要在同步代码块里，区别于<code>wait</code>和<code>notify</code>，所以线程间也不需要维护一个共享的同步对象了，实现了线程间的解耦。</li><li><code>unpark</code>函数可以先于park调用，所以不需要担心线程间的执行的先后顺序。</li><li>因为中断的时候<code>park</code>不会抛出<code>InterruptedException</code>异常，所以需要在park之后自行判断中断状态，然后做额外的处理。</li><li><code>blocker</code>的作用是在dump线程的时候看到阻塞对象的信息</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高性能队列-Disruptor</title>
      <link href="/2022/06/20/%E9%AB%98%E6%80%A7%E8%83%BD%E9%98%9F%E5%88%97-Disruptor/"/>
      <url>/2022/06/20/%E9%AB%98%E6%80%A7%E8%83%BD%E9%98%9F%E5%88%97-Disruptor/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Disruptor是英国外汇交易公司LMAX开发的一个低延迟高性能无锁的有界循环数组。基于Disruptor开发的系统单线程能支撑每秒600万订单，目前已经开源的并发框架，Log4j2底层使用的并发框架。</p><h4 id="Java内置队列"><a href="#Java内置队列" class="headerlink" title="Java内置队列"></a>Java内置队列</h4><div class="table-container"><table><thead><tr><th>队列</th><th>有界性</th><th>锁</th><th>数据结构</th></tr></thead><tbody><tr><td>ArrayBlockingQueue</td><td>bounded</td><td>加锁</td><td>arraylist</td></tr><tr><td>LinkedBlockingQueue</td><td>optionally-bounded</td><td>加锁</td><td>linkedlist</td></tr><tr><td>ConcurrentLinkedQueue</td><td>unbounded</td><td>无锁</td><td>linkedlist</td></tr><tr><td>LinkedTransferQueue</td><td>unbounded</td><td>无锁</td><td>linkedlist</td></tr><tr><td>PriorityBlockingQueue</td><td>unbounded</td><td>加锁</td><td>heap</td></tr><tr><td>DelayQueue</td><td>unbounded</td><td>加锁</td><td>heap</td></tr></tbody></table></div><ul><li>通过不加锁的方式实现的队列都是无界的（无法保证队列的长度在确定的范围内）；而加锁的方式，可以实现有界队列</li><li>在稳定性要求特别高的系统中，为了防止生产者速度过快，导致内存溢出，只能选择有界队列</li><li>为了减少Java的垃圾回收对系统性能的影响，会尽量选择array/heap格式的数据结构</li></ul><h4 id="加锁实验"><a href="#加锁实验" class="headerlink" title="加锁实验"></a>加锁实验</h4><ul><li><p>实验背景</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 这个测试程序调用了一个函数，该函数会对一个64位的计数器循环自增5亿次。</span><br><span class="line">- 机器环境：2.4G 6核</span><br><span class="line">- 运算： 64位的计数器累加5亿次</span><br></pre></td></tr></table></figure></li><li><p>耗时数据</p></li></ul><div class="table-container"><table><thead><tr><th>Method</th><th>Time (ms)</th></tr></thead><tbody><tr><td>Single thread</td><td>300</td></tr><tr><td>Single thread with CAS</td><td>5,700</td></tr><tr><td>Single thread with lock</td><td>10,000</td></tr><tr><td>Single thread with volatile write</td><td>4,700</td></tr><tr><td>Two threads with CAS</td><td>30,000</td></tr><tr><td>Two threads with lock</td><td>224,000</td></tr></tbody></table></div><ul><li>CAS操作比单线程无锁慢了1个数量级；有锁且多线程并发的情况下，速度比单线程无锁慢3个数量级</li><li>单线程情况下，不加锁的性能 &gt; CAS操作的性能 &gt; 加锁的性能</li><li>在多线程情况下，为了保证线程安全，必须使用CAS或锁，这种情况下，CAS的性能超过锁的性能，前者大约是后者的8倍</li></ul><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><ul><li><strong>伪共享</strong>：缓存系统中是以缓存行（cache line）为单位存储的，当多线程修改互相独立的变量时，如果这些变量共享同一个缓存行，就会无意中影响彼此的性能<blockquote><p>伪共享解决思路：增大数组元素的间隔使得由不同线程存取的元素位于不同的缓存行上，以空间换时间。</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// value1和value2可能会产生伪共享</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValueNoPadding</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">volatile</span> <span class="keyword">long</span> value1 = <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">volatile</span> <span class="keyword">long</span> value2 = <span class="number">0L</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// value1和value2中间插入无用值 p1~p14 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValuePadding</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">long</span> p1, p2, p3, p4, p5, p6, p7;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">volatile</span> <span class="keyword">long</span> value1 = <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">long</span> p9, p10, p11, p12, p13, p14;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">volatile</span> <span class="keyword">long</span> value2 = <span class="number">0L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>缓存行(cache line)</strong>：缓存系中以 缓存行(cache line) 为单位存储,一个缓存行有64字节，可以存储8个long类型数据。当cpu访问一个long类型的数组，当数组中的一个值被加载到缓存中，它会额外加载另外7个。当数组的一个值失效，则整个缓存行失效，它将换出其他7个值。</li></ul><h3 id="Disruptor设计特点"><a href="#Disruptor设计特点" class="headerlink" title="Disruptor设计特点"></a>Disruptor设计特点</h3><ul><li>环形数据结构：底层使用的是数组而非连表</li><li>元素位置定位：数组的长度是2^n，下标是递增的，可以通过位运算快速定位</li><li>无锁设计，生产者或消费者需要先申请位置，申请成功以后才能读写，申请过程中通过CAS保证线程安全</li></ul><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><h4 id="单生产者生产数据"><a href="#单生产者生产数据" class="headerlink" title="单生产者生产数据"></a>单生产者生产数据</h4><ol><li>生产者线程申请写入M个数据</li><li>disruptor从当前指针cursor顺序去找M个可写空间，返回找到的可用空间的最大序号</li><li>通过CAS比对返回的序号和申请的序号是否一致，判断是否会覆盖未读的元素，若返回正确，直接写入数据</li></ol><h4 id="多生产者生产数据"><a href="#多生产者生产数据" class="headerlink" title="多生产者生产数据"></a>多生产者生产数据</h4><ol><li>引入一个与ringBuffer大小相同的buff：availableBuffer用于记录ringBuffer每一个空间的使用情况，若生产者写入数据，则将对应availableBuffer位置标记为写入成功，若消费者读取了数据，则将对应的availableBuffer位置标记为空闲。</li><li>多个生产者分配空间时，使用CAS给每一个线程获取不同的数组空间进行操作。</li><li>多个消费者在消费数据时，顺序的从availableBuffer搜索一段连续可读的空间，并返回该空间的最大序列号，并读取数据，同时将availableBuffer的对应的位置进行标记空闲。</li></ol><h4 id="读数据"><a href="#读数据" class="headerlink" title="读数据"></a>读数据</h4><ol><li>申请读取到序号n</li><li>若writer cursor &gt;= n，这时仍然无法确定连续可读的最大下标。从reader cursor开始读取available Buffer，一直查到第一个不可用的元素，然后返回最大连续可读元素的位置</li><li>消费者读取元素</li></ol><p><img src="../../../../img/note/多个生产者-消费示意图.png" alt="生产消费示意图"></p><h4 id="Disruptor解决伪共享与线程可见性问题"><a href="#Disruptor解决伪共享与线程可见性问题" class="headerlink" title="Disruptor解决伪共享与线程可见性问题"></a>Disruptor解决伪共享与线程可见性问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据左右两边插入多余变量隔离真正的变量</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LhsPadding</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">long</span> p1, p2, p3, p4, p5, p6, p7;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Value</span> <span class="keyword">extends</span> <span class="title">LhsPadding</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">volatile</span> <span class="keyword">long</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RhsPadding</span> <span class="keyword">extends</span> <span class="title">Value</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">long</span> p9, p10, p11, p12, p13, p14, p15;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sequence</span> <span class="keyword">extends</span> <span class="title">RhsPadding</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> INITIAL_VALUE = -<span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe UNSAFE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> VALUE_OFFSET;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sequence</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> initialValue)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        UNSAFE.putOrderedLong(<span class="keyword">this</span>, VALUE_OFFSET, initialValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用UNSAFE操作直接修改内存值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        UNSAFE.putOrderedLong(<span class="keyword">this</span>, VALUE_OFFSET, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JDK8解决伪共享-Contended"><a href="#JDK8解决伪共享-Contended" class="headerlink" title="JDK8解决伪共享@Contended"></a>JDK8解决伪共享<code>@Contended</code></h4><blockquote><p>JVM 添加 -XX:-RestrictContended 参数后 @sun.misc.Contended 注解才有效</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@sun.misc.Contended(&quot;tlr&quot;)</span><br><span class="line">long threadLocalRandomSeed;</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/guanyang/spring-base-demo/blob/master/disruptor-demo/src/test/java/org/gy/demo/disruptor/FalseSharingTests.java" target="_blank" rel="noopener">伪共享测试用例</a></li></ul><h3 id="等待策略"><a href="#等待策略" class="headerlink" title="等待策略"></a>等待策略</h3><h4 id="生产者的等待策略"><a href="#生产者的等待策略" class="headerlink" title="生产者的等待策略"></a>生产者的等待策略</h4><ul><li>暂时只休眠1ns<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LockSupport.parkNanos(1);</span><br></pre></td></tr></table></figure></li></ul><h4 id="消费者的等待策略"><a href="#消费者的等待策略" class="headerlink" title="消费者的等待策略"></a>消费者的等待策略</h4><div class="table-container"><table><thead><tr><th>名称</th><th>措施</th><th>适用场景</th></tr></thead><tbody><tr><td>BlockingWaitStrategy</td><td>加锁</td><td>CPU资源紧缺，吞吐量和延迟并不重要的场景</td></tr><tr><td>BusySpinWaitStrategy</td><td>自旋</td><td>通过不断重试，减少切换线程导致的系统调用，而降低延迟</td></tr><tr><td>PhasedBackoffWaitStrategy</td><td>自旋 + yield + 自定义策略</td><td>CPU资源紧缺，吞吐量和延迟并不重要的场景</td></tr><tr><td>SleepingWaitStrategy</td><td>自旋 + yield + sleep</td><td>性能和CPU资源之间有很好的折中。延迟不均匀</td></tr><tr><td>TimeoutBlockingWaitStrategy</td><td>加锁，有超时限制</td><td>CPU资源紧缺，吞吐量和延迟并不重要的场景</td></tr><tr><td>YieldingWaitStrategy</td><td>自旋 + yield + 自旋</td><td>性能和CPU资源之间有很好的折中。延迟比较均匀</td></tr></tbody></table></div><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://tech.meituan.com/2016/11/18/disruptor.html" target="_blank" rel="noopener">https://tech.meituan.com/2016/11/18/disruptor.html</a></li><li><a href="https://segmentfault.com/a/1190000039970225?utm_source=tag-newest" target="_blank" rel="noopener">https://segmentfault.com/a/1190000039970225?utm_source=tag-newest</a></li><li><a href="https://github.com/LMAX-Exchange/disruptor/wiki/Performance-Results" target="_blank" rel="noopener">https://github.com/LMAX-Exchange/disruptor/wiki/Performance-Results</a></li><li><a href="https://lmax-exchange.github.io/disruptor/" target="_blank" rel="noopener">https://lmax-exchange.github.io/disruptor/</a></li><li><a href="https://logging.apache.org/log4j/2.x/manual/async.html" target="_blank" rel="noopener">https://logging.apache.org/log4j/2.x/manual/async.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高性能 </tag>
            
            <tag> 内存队列 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker网络基础</title>
      <link href="/2022/06/08/docker%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/06/08/docker%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><ul><li>docker安装时便会为我们创建三种网络模式：host、none、bridge</li><li>查看docker网络：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker network ls</span><br></pre></td></tr></table></figure></li></ul><h3 id="网络介绍"><a href="#网络介绍" class="headerlink" title="网络介绍"></a>网络介绍</h3><h4 id="host网络"><a href="#host网络" class="headerlink" title="host网络"></a>host网络</h4><ul><li>容器创建时通过<code>--network=host</code>指定使用宿主机网络，此时容器与宿主机共享网络栈，容器内的网络配置和宿主机完全一样。</li></ul><h4 id="none网络"><a href="#none网络" class="headerlink" title="none网络"></a>none网络</h4><ul><li>容器创建时通过<code>--network=none</code>指定容器不创建任何网卡，此时容器里只有lo。</li></ul><h4 id="bridge网络"><a href="#bridge网络" class="headerlink" title="bridge网络"></a>bridge网络</h4><ul><li>容器创建时不指定<code>--network</code>，那么容器默认使用bridge网络。bridge网络是由docker创建的linux bridge — docker0提供。</li><li>由于docker0网桥是安装docker时就默认创建的，我们无法在创建容器的时候指定容器ip，只能由docker0自动分配ip。如果想要创建容器的时候指定ip，需要自己再建一个bridge网络。</li></ul><h3 id="三种网络使用场景"><a href="#三种网络使用场景" class="headerlink" title="三种网络使用场景"></a>三种网络使用场景</h3><h4 id="host网络-1"><a href="#host网络-1" class="headerlink" title="host网络"></a>host网络</h4><ul><li>选用host网络的容器，其网络栈和宿主机一摸一样，它的优势在于网络性能强于其他网络模式。</li><li>如果对网络传输有很大需求可以选用host网络。</li></ul><h4 id="none网络-1"><a href="#none网络-1" class="headerlink" title="none网络"></a>none网络</h4><ul><li>none没有网卡的网络，能做到更加封闭，可以更好的保护重要数据，所以最适合对安全性要求高并且不需要联网的容器。</li></ul><h4 id="bridge网络-1"><a href="#bridge网络-1" class="headerlink" title="bridge网络"></a>bridge网络</h4><ul><li>bridge网络是通过容器上虚拟网络设备和网桥上虚拟网络设备组成一组veth（相当于虚拟的网线）进行连接的，然后通过docker0从172.17.0.0/16分配ip给容器使用。</li><li>显而易见bridge网络适用于日常需要连接网络的容器，例如http容器、web容器…</li></ul><h3 id="link机制"><a href="#link机制" class="headerlink" title="--link机制"></a><code>--link</code>机制</h3><ul><li>可以使新生成的容器链接到已在运行的容器，其原理就是在/etc/hosts里面添加了一个alias的名称<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 格式: --link 容器名:别名</span><br><span class="line">docker run -itd --link&#x3D;ubuntu16_s4:s4 108daf4f6324</span><br></pre></td></tr></table></figure></li><li>使用link选项建立的容器所链接的主机需要在运行状态</li><li>使用link选项建立的容器运行时需要所链接的容器也必须是运行状态</li><li>使用link选项链接的主机ip不需要固定，因为每次新建容器都会检查所链接容器的ip，在/etc/hosts里生成新的alias 名称对应的ip</li></ul>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本常用参数说明</title>
      <link href="/2022/06/08/shell%E8%84%9A%E6%9C%AC%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E/"/>
      <url>/2022/06/08/shell%E8%84%9A%E6%9C%AC%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h3 id="文件表达式"><a href="#文件表达式" class="headerlink" title="文件表达式"></a>文件表达式</h3><ul><li><p>-e filename 如果 filename存在，则为真</p></li><li><p>-d filename 如果 filename为目录，则为真</p></li><li><p>-f filename 如果 filename为常规文件，则为真</p></li><li><p>-L filename 如果 filename为符号链接，则为真</p></li><li><p>-r filename 如果 filename可读，则为真</p></li><li><p>-w filename 如果 filename可写，则为真</p></li><li><p>-x filename 如果 filename可执行，则为真</p></li><li><p>-s filename 如果文件长度不为0，则为真</p></li><li><p>-h filename 如果文件是软链接，则为真</p></li><li><p>filename1 -nt filename2 如果 filename1比 filename2新，则为真。</p></li><li><p>filename1 -ot filename2 如果 filename1比 filename2旧，则为真。</p></li></ul><h3 id="整数变量表达式"><a href="#整数变量表达式" class="headerlink" title="整数变量表达式"></a>整数变量表达式</h3><ul><li><p>-eq 等于</p></li><li><p>-ne 不等于</p></li><li><p>-gt 大于</p></li><li><p>-ge 大于等于</p></li><li><p>-lt 小于</p></li><li><p>-le 小于等于</p></li></ul><h3 id="字符串变量表达式"><a href="#字符串变量表达式" class="headerlink" title="字符串变量表达式"></a>字符串变量表达式</h3><ul><li><p>if [ $a = $b ] 如果string1等于string2，则为真，字符串允许使用赋值号做等号</p></li><li><p>if [ $string1 != $string2 ] 如果string1不等于string2，则为真</p></li><li><p>if [ -n $string ] 如果string 非空(非0），返回0(true)</p></li><li><p>if [ -z $string ]  如果string 为空，则为真</p></li><li><p>if [ $sting ] 如果string 非空，返回0 (和-n类似)</p></li><li><p>逻辑非 ! 条件表达式的相反</p><ul><li><p>if [ ! 表达式 ]</p></li><li><p>if [ ! -d $num ] 如果不存在目录$num</p></li></ul></li><li><p>逻辑与 –a  条件表达式的并列</p><ul><li>if [ 表达式1 –a 表达式2 ]</li></ul></li><li><p>逻辑或 -o  条件表达式的或</p><ul><li>if [ 表达式1 –o 表达式2 ]</li></ul></li></ul><h3 id="0-的含义"><a href="#0-的含义" class="headerlink" title="$0, $#, $*, $@, $?, $$的含义"></a>$0, $#, $*, $@, $?, $$的含义</h3><ul><li>$0：当前脚本的文件名</li><li>$n：传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是$1，第二个参数是$2。</li><li>$#：传递给脚本或函数的参数个数</li><li>$*：传递给脚本或函数的所有参数</li><li>$@：传递给脚本或函数的所有参数</li><li>$* 和 $@ 的区别：<ul><li>$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号(“”)包含时，都以”$1” “2”…”n” 的形式输出所有参数</li><li>当它们被双引号(“”)包含时，”$*”会将所有的参数作为一个整体，以”$1 $2 … n”的形式输出所有参数 ；”@” 会将各个参数分开，以”$1” “2”…”n” 的形式输出所有参数</li></ul></li><li>$?：上个命令的退出状态，或函数的返回值</li><li>$$：当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Alpine Linux教程</title>
      <link href="/2022/06/08/Alpine-Linux%E6%95%99%E7%A8%8B/"/>
      <url>/2022/06/08/Alpine-Linux%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="Alpine更新国内源"><a href="#Alpine更新国内源" class="headerlink" title="Alpine更新国内源"></a>Alpine更新国内源</h3><h4 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h4><ul><li>文件名：<code>/etc/apk/repositories</code></li><li>默认的源地址为：<code>https://dl-cdn.alpinelinux.org/</code></li></ul><h4 id="国内源"><a href="#国内源" class="headerlink" title="国内源"></a>国内源</h4><ul><li>注意查看源文件对应的版本，以下版本号需要对应修改</li><li><p>采用国内阿里云的源，文件内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;alpine&#x2F;v3.9&#x2F;main&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;alpine&#x2F;v3.9&#x2F;community&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>如果采用中国科技大学的源，文件内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;alpine&#x2F;v3.9&#x2F;main&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;alpine&#x2F;v3.9&#x2F;community&#x2F;</span><br></pre></td></tr></table></figure></li><li>采用清华源，文件内容为<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;mirror.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v3.9&#x2F;main&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;mirror.tuna.tsinghua.edu.cn&#x2F;alpine&#x2F;v3.9&#x2F;community&#x2F;</span><br></pre></td></tr></table></figure></li></ul><h4 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#39;s&#x2F;dl-cdn.alpinelinux.org&#x2F;mirrors.aliyun.com&#x2F;g&#39; &#x2F;etc&#x2F;apk&#x2F;repositories</span><br></pre></td></tr></table></figure><h3 id="软件包管理工具apk使用"><a href="#软件包管理工具apk使用" class="headerlink" title="软件包管理工具apk使用"></a>软件包管理工具apk使用</h3><ul><li>查询软件包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk search xxx</span><br></pre></td></tr></table></figure></li><li>安装软件包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk add xxx</span><br></pre></td></tr></table></figure></li><li>删除软件包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk del xxx</span><br></pre></td></tr></table></figure></li><li>获取更多apk包管理的命令参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk --help</span><br></pre></td></tr></table></figure></li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li>官网：<a href="https://www.alpinelinux.org/" target="_blank" rel="noopener">https://www.alpinelinux.org/</a></li><li>Github：<a href="https://github.com/alpinelinux" target="_blank" rel="noopener">https://github.com/alpinelinux</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Alpine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Launcher通用启动器-测试用例</title>
      <link href="/2022/06/08/Launcher%E9%80%9A%E7%94%A8%E5%90%AF%E5%8A%A8%E5%99%A8-%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/"/>
      <url>/2022/06/08/Launcher%E9%80%9A%E7%94%A8%E5%90%AF%E5%8A%A8%E5%99%A8-%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="启动超时"><a href="#启动超时" class="headerlink" title="启动超时"></a>启动超时</h3><p><code>LAUNCHER_START_TIMEOUT=3 ./launcher.sh start -n test1</code><br>确认是否超时退出</p><h3 id="退出超时"><a href="#退出超时" class="headerlink" title="退出超时"></a>退出超时</h3><p><code>LAUNCHER_STOP_TIMEOUT=3 ./launcher.sh start -n test1</code></p><h3 id="启动时被其他用户kill（主程序运行，健康检查中）"><a href="#启动时被其他用户kill（主程序运行，健康检查中）" class="headerlink" title="启动时被其他用户kill（主程序运行，健康检查中）"></a>启动时被其他用户kill（主程序运行，健康检查中）</h3><p><code>./launcher.sh start -n test1</code></p><h3 id="启动完毕后被其他用户kill"><a href="#启动完毕后被其他用户kill" class="headerlink" title="启动完毕后被其他用户kill"></a>启动完毕后被其他用户kill</h3><p><code>./launcher.sh start -n test1</code></p><h3 id="启动时被Ctrl-C终止（未运行主程序）"><a href="#启动时被Ctrl-C终止（未运行主程序）" class="headerlink" title="启动时被Ctrl+C终止（未运行主程序）"></a>启动时被Ctrl+C终止（未运行主程序）</h3><p><code>./launcher.sh start -n test1</code></p><h3 id="启动时被Ctrl-C终止（主程序运行，健康检查中）"><a href="#启动时被Ctrl-C终止（主程序运行，健康检查中）" class="headerlink" title="启动时被Ctrl+C终止（主程序运行，健康检查中）"></a>启动时被Ctrl+C终止（主程序运行，健康检查中）</h3><p><code>./launcher.sh start -n test1</code></p><h3 id="启动完毕后被Ctrl-C终止"><a href="#启动完毕后被Ctrl-C终止" class="headerlink" title="启动完毕后被Ctrl+C终止"></a>启动完毕后被Ctrl+C终止</h3><p><code>./launcher.sh start -n test1</code></p><h3 id="启动时被kill-9"><a href="#启动时被kill-9" class="headerlink" title="启动时被kill -9"></a>启动时被kill -9</h3><p><code>./launcher.sh start -n test1</code></p><h3 id="启动时被launcher-stop-停止"><a href="#启动时被launcher-stop-停止" class="headerlink" title="启动时被launcher stop 停止"></a>启动时被launcher stop 停止</h3><p><code>./launcher.sh start -n test1</code><br><code>./launcher.sh stop -n test1</code></p><h3 id="checkready超时-暂时失效"><a href="#checkready超时-暂时失效" class="headerlink" title="checkready超时(暂时失效)"></a>checkready超时(暂时失效)</h3><p><code>LAUNCHER_START_TIMEOUT=15 ./launcher.sh start -n test1 -jo &#39;-DisReady=false&#39;</code></p><h3 id="确认LAUNCHER-LOG-ON-CONSOLE不打印日志是否生效"><a href="#确认LAUNCHER-LOG-ON-CONSOLE不打印日志是否生效" class="headerlink" title="确认LAUNCHER_LOG_ON_CONSOLE不打印日志是否生效"></a>确认LAUNCHER_LOG_ON_CONSOLE不打印日志是否生效</h3><p><code>LAUNCHER_LOG_ON_CONSOLE=false ./launcher.sh start -n test1</code></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> maven </tag>
            
            <tag> 启动器 </tag>
            
            <tag> dockerfile </tag>
            
            <tag> plugin </tag>
            
            <tag> shell </tag>
            
            <tag> javaagent </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Launcher通用启动器-日志配置指南</title>
      <link href="/2022/06/08/Launcher%E9%80%9A%E7%94%A8%E5%90%AF%E5%8A%A8%E5%99%A8-%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/"/>
      <url>/2022/06/08/Launcher%E9%80%9A%E7%94%A8%E5%90%AF%E5%8A%A8%E5%99%A8-%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="功能简介"><a href="#功能简介" class="headerlink" title="功能简介"></a>功能简介</h3><p>launcher统一了应用的日志路径以及日志格式，并且提供了零配置开箱即用的特性。当用户有个性化日志需求时（例如：把部分特定的日志打印到指定目录上）也可以通过自定义日志片段来满足所述需求。</p><h3 id="日志框架配置方式"><a href="#日志框架配置方式" class="headerlink" title="日志框架配置方式"></a>日志框架配置方式</h3><p>launcher目前仅支持SpringBoot项目，请使用SpringBoot默认日志框架 org.springframework.boot:spring-boot-starter-logging，大多数情况下已经自带，无需手动配置。</p><h3 id="不兼容的依赖"><a href="#不兼容的依赖" class="headerlink" title="不兼容的依赖"></a>不兼容的依赖</h3><ul><li>仅支持Logback，如果整个依赖树中未找到 ch.qos.logback:logback-classic 会构建失败。</li><li>如果发现依赖树中包含LOG4J的SLF4J实现 org.apache.logging.log4j:log4j-slf4j-impl 会构建失败。</li></ul><h3 id="个性化日志"><a href="#个性化日志" class="headerlink" title="个性化日志"></a>个性化日志</h3><p>launcher支持Logback中的File Inclusion特性，能够让用户自定义日志配置片段，以完成用户的个性化日志需求。</p><h4 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h4><h5 id="创建日志配置片段-logback-snippet-xml"><a href="#创建日志配置片段-logback-snippet-xml" class="headerlink" title="创建日志配置片段 logback.snippet.xml"></a>创建日志配置片段 <code>logback.snippet.xml</code></h5><ul><li>创建 logback.snippet.xml 放在工程的resources目录下</li></ul><h5 id="配置日志片段"><a href="#配置日志片段" class="headerlink" title="配置日志片段"></a>配置日志片段</h5><ul><li>官方文档：<a href="https://logback.qos.ch/manual/configuration.html#fileInclusion" target="_blank" rel="noopener">https://logback.qos.ch/manual/configuration.html#fileInclusion</a></li><li>该配置文件的根元素为 <code>&lt;included&gt;</code></li><li>根元素内部支持 <code>logback.xml</code> 配置文件中的任意元素，例如 <code>&lt;appender&gt;</code> 、<code>&lt;logger&gt;</code> 等</li></ul><h4 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h4><ul><li>有个名为 DataPointer 的 Logger，现在用户想要将该 Logger 的日志打印到应用日志目录下的 point 子文件夹中。</li><li>希望将该日志文件名修改为 服务名.point.log ，并且按天以及默认日志大小策略滚动。</li><li><p>日志格式使用启动器的默认格式。</p></li><li><p>logback.snippet.xml 内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;included&gt;</span><br><span class="line"></span><br><span class="line">    &lt;appender name&#x3D;&quot;dataPointAppender&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;file&gt;$&#123;logDir&#125;&#x2F;point&#x2F;$&#123;launcher.app.name&#125;.point.log&lt;&#x2F;file&gt;</span><br><span class="line"></span><br><span class="line">        &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;!-- rollover daily --&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;logDir&#125;&#x2F;point&#x2F;$&#123;launcher.app.name&#125;.%d&#123;yyyy-MM-dd&#125;.%i.point.log&lt;&#x2F;fileNamePattern&gt;</span><br><span class="line">            &lt;maxFileSize&gt;$&#123;maxFileSize&#125;&lt;&#x2F;maxFileSize&gt;</span><br><span class="line">            &lt;maxHistory&gt;$&#123;maxHistory&#125;&lt;&#x2F;maxHistory&gt;</span><br><span class="line">            &lt;totalSizeCap&gt;$&#123;totalSizeCap&#125;&lt;&#x2F;totalSizeCap&gt;</span><br><span class="line">        &lt;&#x2F;rollingPolicy&gt;</span><br><span class="line"></span><br><span class="line">        &lt;encoder class&#x3D;&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;</span><br><span class="line">            &lt;Pattern&gt;$&#123;PATTERN&#125;&lt;&#x2F;Pattern&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;logger name&#x3D;&quot;DataPointer&quot; level&#x3D;&quot;INFO&quot; additivity&#x3D;&quot;false&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;dataPointAppender&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;logger&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;included&gt;</span><br></pre></td></tr></table></figure><h4 id="日志片段中可以使用的内部变量"><a href="#日志片段中可以使用的内部变量" class="headerlink" title="日志片段中可以使用的内部变量"></a>日志片段中可以使用的内部变量</h4></li><li>launcher.app.name: 服务名</li><li>logDir: 应用日志目录，该目录下有许多子文件夹以存放不同类型的日志文件，例如：<code>biz</code>、<code>gc</code> 等等</li><li>PATTERN: launcher预设的基于统一日志规范的日志格式，通常使用在 <code>appender</code> &gt; <code>encoder</code> &gt; <code>Pattern</code> 元素中</li><li>maxFileSize: 最大文件大小，通常使用在 <code>appender</code> &gt; <code>rollingPolicy</code> &gt; <code>maxFileSize</code> 元素中，默认值：500MB</li><li>maxHistory: 最多保留日志数量，通常使用在 <code>appender</code> &gt; <code>rollingPolicy</code> &gt; <code>maxHistory</code> 元素中，默认值：15</li><li>totalSizeCap: 日志滚动策略的总大小，通常使用在 <code>appender</code> &gt; <code>rollingPolicy</code> &gt; <code>totalSizeCap</code> 元素中，默认值：50GB</li></ul><h3 id="修改日志配置的其它方式"><a href="#修改日志配置的其它方式" class="headerlink" title="修改日志配置的其它方式"></a>修改日志配置的其它方式</h3><h4 id="通过-pom-xml-修改日志相关配置"><a href="#通过-pom-xml-修改日志相关配置" class="headerlink" title="通过 pom.xml 修改日志相关配置"></a>通过 <code>pom.xml</code> 修改日志相关配置</h4><ul><li>示例场景：某个业务的日志文件需要保留30天（默认是15天）</li><li>launcher支持在 <code>pom.xml</code> 中修改部分日志相关配置参数，配置方式如下:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.gy.framework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;launcher-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;launcher&lt;&#x2F;goal&gt;</span><br><span class="line">            &lt;&#x2F;goals&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;!-- launcher日志相关配置 start --&gt;</span><br><span class="line">                &lt;logConf&gt;</span><br><span class="line">                    &lt;!-- 以数值均为默认值 --&gt;</span><br><span class="line">                    &lt;!-- 日志根级别 --&gt;</span><br><span class="line">                    &lt;rootLogLevel&gt;INFO&lt;&#x2F;rootLogLevel&gt;</span><br><span class="line">                  </span><br><span class="line">                    &lt;!-- 包名为org.gy.framework开头的日志级别 --&gt;</span><br><span class="line">                    &lt;logName&gt;org.gy.framework&lt;&#x2F;logName&gt;</span><br><span class="line">                    &lt;logLevel&gt;INFO&lt;&#x2F;logLevel&gt;</span><br><span class="line">                  </span><br><span class="line">                    &lt;!-- 日志最大文件大小 --&gt;</span><br><span class="line">                    &lt;maxFileSize&gt;500MB&lt;&#x2F;maxFileSize&gt;</span><br><span class="line">                  </span><br><span class="line">                    &lt;!-- 最大文件数量 --&gt;</span><br><span class="line">                    &lt;maxHistory&gt;15&lt;&#x2F;maxHistory&gt;</span><br><span class="line">                  </span><br><span class="line">                    &lt;!-- 日志总大小 --&gt;</span><br><span class="line">                    &lt;totalSizeCap&gt;50GB&lt;&#x2F;totalSizeCap&gt;</span><br><span class="line">                &lt;&#x2F;logConf&gt;</span><br><span class="line">                &lt;!-- launcher日志相关配置 end --&gt;</span><br><span class="line">            &lt;&#x2F;configuration&gt;</span><br><span class="line">        &lt;&#x2F;execution&gt;</span><br><span class="line">    &lt;&#x2F;executions&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="通过JVM参数修改日志相关配置"><a href="#通过JVM参数修改日志相关配置" class="headerlink" title="通过JVM参数修改日志相关配置"></a>通过JVM参数修改日志相关配置</h4><ul><li>示例场景：应用因为某种故障启动不起来，并且应用部署在容器环境无法手动修改配置文件，想打印DEBUG日志但是又不想重新构建镜像。</li></ul><h5 id="使用-Spring-支持的-JVM-参数-logging-level-进行配置（推荐）"><a href="#使用-Spring-支持的-JVM-参数-logging-level-进行配置（推荐）" class="headerlink" title="使用 Spring 支持的 JVM 参数 logging.level 进行配置（推荐）"></a>使用 Spring 支持的 JVM 参数 <code>logging.level</code> 进行配置（推荐）</h5><ul><li>使用 JVM 参数 <code>logging.level.&lt;logger-name&gt;=&lt;level&gt;</code> 进行配置</li><li>示例： ./launcher.sh start -jo ‘-Dlogging.level.org.springframework.web=DEBUG’</li><li>Spring 官方文档： <a href="https://docs.spring.io/spring-boot/docs/2.1.6.RELEASE/reference/html/boot-features-logging.html#boot-features-custom-log-levels" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.1.6.RELEASE/reference/html/boot-features-logging.html#boot-features-custom-log-levels</a></li></ul><h5 id="使用-launcher-内建方式配置日志级别（在上述Spring方式不生效时使用此方法进行配置）"><a href="#使用-launcher-内建方式配置日志级别（在上述Spring方式不生效时使用此方法进行配置）" class="headerlink" title="使用 launcher 内建方式配置日志级别（在上述Spring方式不生效时使用此方法进行配置）"></a>使用 launcher 内建方式配置日志级别（在上述Spring方式不生效时使用此方法进行配置）</h5><ul><li>用户可以在启动应用时通过JVM参数修改应用的 <code>rootLogLevel</code> 以及 <code>logLevel</code> 日志级别</li><li>launcher.app.log.name: 自定义 <code>Logger</code>的开头</li><li>launcher.app.log.level: 自定义 <code>Logger</code>的级别</li><li>launcher.app.log.level.root: 其它 <code>Logger</code></li><li>示例： ./launcher.sh start -jo ‘-Dlauncher.app.log.level.root=WARN’</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> maven </tag>
            
            <tag> 启动器 </tag>
            
            <tag> dockerfile </tag>
            
            <tag> plugin </tag>
            
            <tag> shell </tag>
            
            <tag> javaagent </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Launcher通用启动器-Maven插件配置</title>
      <link href="/2022/06/08/Launcher%E9%80%9A%E7%94%A8%E5%90%AF%E5%8A%A8%E5%99%A8-Maven%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/06/08/Launcher%E9%80%9A%E7%94%A8%E5%90%AF%E5%8A%A8%E5%99%A8-Maven%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><ul><li>通过配置maven插件，可以快速集成<code>launcher</code>启动器功能，接入简单快捷</li></ul><h3 id="添加maven配置"><a href="#添加maven配置" class="headerlink" title="添加maven配置"></a>添加maven配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Project pom.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    [...]</span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        [...]</span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            [...]</span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.gy.framework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>launcher-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>launcher<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- All launcher-maven-plugin configurations --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            [...]</span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        [...]</span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    [...]</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="应用基础配置"><a href="#应用基础配置" class="headerlink" title="应用基础配置"></a>应用基础配置</h3><p>在插件中配置 <code>应用名称</code> 跟 <code>MainClass</code>的对应关系，应用启动时可以直接通过 <code>-n ${APP_NAME}</code> 启动该应用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 应用名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>$&#123;APP_NAME&#125;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 应用启动类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>$&#123;APP_MAIN_CLASS&#125;<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">app</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改默认日志级别"><a href="#修改默认日志级别" class="headerlink" title="修改默认日志级别"></a>修改默认日志级别</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.gy.framework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>launcher-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>launcher<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">log</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 修改org.gy.framework日志级别，默认INFO --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">logName</span>&gt;</span>org.gy.framework<span class="tag">&lt;/<span class="name">logName</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">logLevel</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">logLevel</span>&gt;</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">&lt;!-- 修改root日志级别，默认WARN --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">rootLogLevel</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">rootLogLevel</span>&gt;</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">&lt;!-- 单个日志文件大小（MB），默认500 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">logFileSize</span>&gt;</span>1024<span class="tag">&lt;/<span class="name">logFileSize</span>&gt;</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">&lt;!-- 每天日志文件数量，默认10 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">logFileCount</span>&gt;</span>5<span class="tag">&lt;/<span class="name">logFileCount</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">log</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="追加maven-assembly-plugin配置"><a href="#追加maven-assembly-plugin配置" class="headerlink" title="追加maven-assembly-plugin配置"></a>追加maven-assembly-plugin配置</h3><p><code>launcher-maven-plugin</code> 允许用户将某些文件放入最终的应用打包文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- maven-assembly-plugin 打包配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span>package.xml<span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>将工程中的 <code>./src/main/resources/my-app.config</code> 放到打包结果中的 <code>conf</code> 目录下</p><p>编写 <code>maven-assembly-plugin</code> 的配置文件 <code>package.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>./src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>my-app.config<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>conf<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lineEnding</span>&gt;</span>unix<span class="tag">&lt;/<span class="name">lineEnding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>目前仅支持 <code>maven-assembly-plugin</code> 配置中的 <code>&lt;fileSet&gt;</code> 片段</p><p>访问 <code>http://maven.apache.org/plugins/maven-assembly-plugin</code> 了解更多关于 <code>&lt;fileSet&gt;</code> 的使用方法</p><h3 id="默认JVM参数修改"><a href="#默认JVM参数修改" class="headerlink" title="默认JVM参数修改"></a>默认JVM参数修改</h3><p><code>launcher</code> 提供了一系列标准的JVM默认参数</p><p>并且提供了修改这些默认参数的方法，减少在启动时输入带来的复杂度</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">app</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>$&#123;APP_NAME&#125;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>$&#123;APP_MAIN_CLASS&#125;<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jvmOption</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 添加默认jvm参数可以使用&lt;include&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span></span><br><span class="line">                -Dapp.test1=1</span><br><span class="line">                -Dapp.test2=2</span><br><span class="line">            <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!-- 排除默认jvm参数可以使用&lt;exclude&gt;标签 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                -XX:+UseGCLogFileRotation</span><br><span class="line">                -XX:NumberOfGCLogFiles</span><br><span class="line">                -XX:GCLogFileSize</span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jvmOption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">app</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打包完成后，在 <code>./conf</code> 目录下会生成一个 <code>${APP_NAME}.jvm.options</code> 文件其中包含已修改的配置</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> maven </tag>
            
            <tag> 启动器 </tag>
            
            <tag> dockerfile </tag>
            
            <tag> plugin </tag>
            
            <tag> shell </tag>
            
            <tag> javaagent </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Launcher通用启动器-Dockerfile扩展支持</title>
      <link href="/2022/06/08/Launcher%E9%80%9A%E7%94%A8%E5%90%AF%E5%8A%A8%E5%99%A8-Dockerfile%E6%89%A9%E5%B1%95%E6%94%AF%E6%8C%81/"/>
      <url>/2022/06/08/Launcher%E9%80%9A%E7%94%A8%E5%90%AF%E5%8A%A8%E5%99%A8-Dockerfile%E6%89%A9%E5%B1%95%E6%94%AF%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><ul><li>launcher提供了<code>Dockerfile</code>生成功能，支持定制化基础运行环境</li><li>用户可以在<code>launcher-maven-plugin</code>的 pom 配置中对 <code>Dockerfile</code> 进行修改，从而支持对业务基础环境的定制化</li><li>进行 mvn package 之后，<code>Dockerfile</code>会生成在<code>${project_module}/target/Dockerfile</code></li></ul><h3 id="Dockerfile扩展点配置"><a href="#Dockerfile扩展点配置" class="headerlink" title="Dockerfile扩展点配置"></a>Dockerfile扩展点配置</h3><ul><li><code>&lt;fromImage/&gt;</code>：该元素中的内容会替换 Dockerfile 中 <code>FROM</code> 指令原本的配置</li><li><code>&lt;instructionAfterFrom/&gt;</code>：该元素中的内容会添加到 Dockerfile 的 <code>FROM</code> 指令之后，通常用来进行一些基础组件的安装（yum install）<ul><li>使用 Dockerfile 的 <code>RUN</code> 指令时，执行用户为 <code>root</code>，当前工作目录为 /</li><li>执行该过程时还未拷贝应用程序安装包，用户无法获取应用安装包内的文件</li><li>该过程会使用到Docker镜像构建层级缓存，在第二次构建时，如果指令内容未改变，会直接使用上次生成好的镜像层以提升构建速度。</li></ul></li><li><code>&lt;instructionBeforeCmd/&gt;</code>：CMD指令前执行的语句，可以用来进行应用安装包内的文件拷贝，如：拷贝安装包内的指定文件到指定目录下<ul><li>使用 Dockerfile 的 <code>RUN</code> 指令时，执行用户为 <code>www</code>，当前工作目录为 <code>/home/www</code></li></ul></li></ul><h3 id="完整配置示例"><a href="#完整配置示例" class="headerlink" title="完整配置示例"></a>完整配置示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.gy.framework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;launcher-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;launcher&lt;&#x2F;goal&gt;</span><br><span class="line">            &lt;&#x2F;goals&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">              </span><br><span class="line">                &lt;!-- Dockerfile 配置从这里开始 --&gt;</span><br><span class="line">                &lt;dockerfile&gt;</span><br><span class="line">                    &lt;!-- 示例：修改基础镜像 --&gt;</span><br><span class="line">                    &lt;fromImage&gt;hub.docker.com&#x2F;repository&#x2F;docker&#x2F;guanyangsunlight&#x2F;default-repo&#x2F;java-centos8:1.8_201_b09&lt;&#x2F;fromImage&gt;</span><br><span class="line">                    </span><br><span class="line">                    &lt;!-- 示例：安装一些自定义组件 --&gt;</span><br><span class="line">                    &lt;instructionAfterFrom&gt;</span><br><span class="line">                        &lt;![CDATA[</span><br><span class="line">                        RUN set -ex &amp;&amp; \</span><br><span class="line">                        yum -y install openssl python-pip &amp;&amp; \</span><br><span class="line">                        pip install pyelliptic&#x3D;&#x3D;1.5.7</span><br><span class="line">                        ]]&gt;</span><br><span class="line">                    &lt;&#x2F;instructionAfterFrom&gt;</span><br><span class="line">                    </span><br><span class="line">                    &lt;!-- 示例：拷贝文件到指定目录 --&gt;</span><br><span class="line">                    &lt;instructionBeforeCmd&gt;</span><br><span class="line">                        &lt;![CDATA[</span><br><span class="line">                        RUN set -ex &amp;&amp; \</span><br><span class="line">                        mv &#x2F;home&#x2F;www&#x2F;launcher-sample&#x2F;conf&#x2F;xxxx  &#x2F;home&#x2F;www</span><br><span class="line">                        ]]&gt;</span><br><span class="line">                    &lt;&#x2F;instructionBeforeCmd&gt;</span><br><span class="line">                &lt;&#x2F;dockerfile&gt;</span><br><span class="line">              </span><br><span class="line">            &lt;&#x2F;configuration&gt;</span><br><span class="line">        &lt;&#x2F;execution&gt;</span><br><span class="line">    &lt;&#x2F;executions&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure><ul><li>注意所有的语句使用 &amp;&amp; \ 进行换行</li><li>RUN set -ex &amp;&amp; \ 说明如下：<ul><li><code>RUN</code>: Dockerfile 指令，后续接上我们常规的 shell 操作命令；</li><li><code>set -ex</code>: 执行命令时开启调试模式打命令执行过程，遇到错误则终止后续后续命令执行；</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> maven </tag>
            
            <tag> 启动器 </tag>
            
            <tag> dockerfile </tag>
            
            <tag> plugin </tag>
            
            <tag> shell </tag>
            
            <tag> javaagent </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Launcher通用启动器-使用说明</title>
      <link href="/2022/06/08/Launcher%E9%80%9A%E7%94%A8%E5%90%AF%E5%8A%A8%E5%99%A8-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
      <url>/2022/06/08/Launcher%E9%80%9A%E7%94%A8%E5%90%AF%E5%8A%A8%E5%99%A8-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h3 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h3><p>使用 <code>-h</code> 或者 <code>--help</code> 参数可以查看启动器以及每个命令的使用说明和用法</p><ul><li><code>launcher.sh -h</code></li><li><code>launcher.sh [start/stop/restart/status]-h</code></li></ul><h3 id="关于应用启动参数配置"><a href="#关于应用启动参数配置" class="headerlink" title="关于应用启动参数配置"></a>关于应用启动参数配置</h3><p>应用启动参数有3种指定方式</p><h4 id="通过参数指定"><a href="#通过参数指定" class="headerlink" title="通过参数指定"></a>通过参数指定</h4><div class="table-container"><table><thead><tr><th>短参数</th><th>长参数</th><th>通过系统变量、环境变量（见表格下方备注）</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>-a</td><td>—args</td><td></td><td>设置应用参数</td><td>-a server.port=80</td></tr><tr><td>-d</td><td>—daemon</td><td>LAUNCHER_START_IN_DAEMON</td><td>使用后台模式执行</td><td>-d</td></tr><tr><td>-e</td><td>—app-environment</td><td>LAUNCHER_APP_ENV</td><td>设置应用所处环境(prod/pre/stress/live/dev)</td><td>-e dev</td></tr><tr><td>-r</td><td>—app-region</td><td>LAUNCHER_APP_REGION</td><td>设置应用所属的区域，例如IDC_CODE）</td><td>-r beijing</td></tr><tr><td>-i</td><td>—app-instance-id</td><td>LAUNCHER_INSTANCE_ID</td><td>手动指定本实例ID</td><td></td></tr><tr><td>-jo</td><td>—java-opts</td><td></td><td>设置jvm参数，允许设置多次（追加）</td><td>-jo ‘-Xmx4g -Xms4g’</td></tr><tr><td>-ld</td><td>—log-dir</td><td>LAUNCHER_APP_LOG_DIR</td><td>设置日志目录，默认为./logs/$APP_NAME/$APP_INSTANCE_ID</td><td>—ld /home/www/logs</td></tr><tr><td>-ldt</td><td>—log-dir-type</td><td>LAUNCHER_APP_LOG_DIR_TYPE</td><td>日志目录类型（见表格下方备注），base/app/instance</td><td></td></tr><tr><td>-mc</td><td>—main-class</td><td></td><td>设置应用启动类</td><td>-mc org.gy.framework.sample.main</td></tr><tr><td></td><td></td><td>LAUNCHER_APP_ID</td><td>设置应用的ID</td><td></td></tr><tr><td>-n</td><td>—app-name</td><td>LAUNCHER_APP_NAME</td><td>设置应用名称</td><td>-n launcher-sample</td></tr><tr><td></td><td>—restart</td><td>LAUNCHER_AUTORESTART</td><td>如果发现应用已经启动，则使用上次的参数自动重启</td><td></td></tr><tr><td></td><td>—dry-run</td><td></td><td>仅打印启动日志，不启动服务（调试用）</td><td></td></tr><tr><td>-h</td><td>—help</td><td></td><td>打印参数说明</td><td></td></tr><tr><td></td><td>—javaagent-bs</td><td>LAUNCHER_JAVAAGENT_BACKEND_SERVICE</td><td>指定Javaagent Backend服务地址</td><td>—javaagent-bs ‘127.0.0.1:11800’</td></tr></tbody></table></div><p><strong>关于系统变量、环境变量的设置模式</strong> ： 该模式针对发布系统对接，不建议用户手动设置；环境变量设置模式只针对容器环境生效；</p><p><strong>关于日志目录类型</strong> : 启动器统一了日志目录层级规范，在目录层级中必须包含<code>应用名/实例ID</code>，所以当使用<code>-ld</code>设置了日志目录后需要使用 <code>-ldt</code> 指定日志目录的层级，默认为 <code>base</code>。</p><ul><li><p><code>base</code> ：指定日志目录类型为基础目录，启动器会在设置的日志目录中创建<code>应用名/实例ID</code>子目录；</p></li><li><p><code>-ldt app</code> ：指定日志目录类型为应用目录，启动器会在设置的日志目录中创建<code>实例ID</code>子目录；</p></li><li><p><code>-ldt instance</code> ：指定日志目录类型为实例目录，启动器不会创建子目录；</p></li></ul><h3 id="应用停止"><a href="#应用停止" class="headerlink" title="应用停止"></a>应用停止</h3><p>参数请查看<code>launcher.sh stop -h</code></p><h3 id="应用重启"><a href="#应用重启" class="headerlink" title="应用重启"></a>应用重启</h3><p>参数请查看<code>launcher.sh restart -h</code></p><h3 id="应用状态检查"><a href="#应用状态检查" class="headerlink" title="应用状态检查"></a>应用状态检查</h3><p>参数请查看<code>launcher.sh status -h</code></p><h3 id="启动参数示例"><a href="#启动参数示例" class="headerlink" title="启动参数示例"></a>启动参数示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;launcher.sh start -d -n my-service-name -jo &#39;-Dfile.encoding&#x3D;UTF-8 -Duser.timezone&#x3D;Asia&#x2F;Shanghai  -XX:InitialRAMPercentage&#x3D;50.0 -XX:MaxRAMPercentage&#x3D;75.0 -XX:+UseG1GC  -XX:MaxGCPauseMillis&#x3D;150&#39; -a &#39;--server.port&#x3D;8081&#39;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> maven </tag>
            
            <tag> 启动器 </tag>
            
            <tag> dockerfile </tag>
            
            <tag> plugin </tag>
            
            <tag> shell </tag>
            
            <tag> javaagent </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Launcher通用启动器</title>
      <link href="/2022/06/08/Launcher%E9%80%9A%E7%94%A8%E5%90%AF%E5%8A%A8%E5%99%A8/"/>
      <url>/2022/06/08/Launcher%E9%80%9A%E7%94%A8%E5%90%AF%E5%8A%A8%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><ul><li>launcher是一个Java应用通用启动器，它不仅规范了应用的打包结构并且提供了众多可选的启动参数。</li><li>用户可以通过Maven插件的方式引入launcher，通过一些简单的配置即可将Java通过launcher启动起来。</li></ul><h3 id="源码说明"><a href="#源码说明" class="headerlink" title="源码说明"></a>源码说明</h3><ul><li>Github源码：<a href="https://github.com/guanyang/spring-simple-framework" target="_blank" rel="noopener">https://github.com/guanyang/spring-simple-framework</a></li></ul><h3 id="快速接入"><a href="#快速接入" class="headerlink" title="快速接入"></a>快速接入</h3><ul><li>launcher的新用户如果想要快速接入项目，可以参考本工程<strong>launcher-sample</strong>模块下的pom.xml文件。</li></ul><h4 id="移除当前打包工具"><a href="#移除当前打包工具" class="headerlink" title="移除当前打包工具"></a>移除当前打包工具</h4><ul><li>在项目<code>pom.xml</code>中删除已有的打包工具配置，例如：<code>maven-assembly-plugin</code>、<code>spring-boot-maven-plugin</code></li></ul><h4 id="添加launcher打包插件"><a href="#添加launcher打包插件" class="headerlink" title="添加launcher打包插件"></a>添加launcher打包插件</h4><ul><li>添加<code>launcher-maven-plugin</code>到<code>pom.xml</code>中</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.gy.framework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>launcher-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>launcher<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">apps</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">app</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 应用名 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">name</span>&gt;</span>$&#123;APP_NAME&#125;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 启动类 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>$&#123;MAIN_CLASS&#125;<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">app</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">apps</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>替换配置文件中的${APP_NAME}为服务名称，例如：launcher-sample</li><li>替换配置文件中的${MAIN_CLASS}启动类名称，例如：org.gy.framework.launcher.sample.Main</li></ul><h4 id="开始构建"><a href="#开始构建" class="headerlink" title="开始构建"></a>开始构建</h4><ul><li>接入完成后，使用<code>mvn package</code>构建工程</li><li>package执行完毕后，会自动在模块中的<code>target</code>目录下生成${PROJECT_MODULE_NAME}-${VERSION}.tar.gz文件</li></ul><h4 id="启动工程"><a href="#启动工程" class="headerlink" title="启动工程"></a>启动工程</h4><ul><li>解压缩${PROJECT_MODULE_NAME}-${VERSION}.tar.gz文件</li><li>启动器主文件为 <code>./bin/launcher.sh</code></li><li>使用 <code>./launcher.sh start -n ${APP_NAME}</code> 启动</li><li>使用 <code>./launcher.sh stop -n ${APP_NAME}</code> 停止</li><li>使用 <code>./launcher.sh restart -n ${APP_NAME}</code> 重启</li><li>想要查看更多选项请使用 <code>launcher.sh -h</code> 以及 <code>launcher.sh [start/stop/restart/status] -h</code></li></ul><h3 id="Change-Log"><a href="#Change-Log" class="headerlink" title="Change Log"></a>Change Log</h3><h4 id="1-0-1-SNAPSHOT"><a href="#1-0-1-SNAPSHOT" class="headerlink" title="1.0.1-SNAPSHOT"></a>1.0.1-SNAPSHOT</h4><ul><li>添加<code>skywalking-agent</code>插件支持，方便链路追踪</li><li>Javaagent默认下载路径<code>dlcdn.apache.org</code>，如果构建时下载过慢，可以在<code>launcher-maven-plugin/pom.xml</code>中修改<code>${javaagent.download.url}</code>变量</li><li>增加Javaagent本地文件缓存机制，提升打包速度，缓存目录可以通过<code>-Dlauncher.javaagent.cache.dir</code>设置，默认为系统变量<code>java.io.tmpdir</code></li></ul><h4 id="1-0-0-SNAPSHOT"><a href="#1-0-0-SNAPSHOT" class="headerlink" title="1.0.0-SNAPSHOT"></a>1.0.0-SNAPSHOT</h4><ul><li>版本初始化</li><li>规范应用打包结构，并且提供众多可选的启动参数，参考<a href="https://note.xcloudapi.com/2022/06/08/Launcher%E9%80%9A%E7%94%A8%E5%90%AF%E5%8A%A8%E5%99%A8-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/">启动参数</a></li><li>通过maven插件简单配置，即可快速引用，参考<a href="https://note.xcloudapi.com/2022/06/08/Launcher%E9%80%9A%E7%94%A8%E5%90%AF%E5%8A%A8%E5%99%A8-Maven%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/">Maven插件配置</a></li><li>统一应用日志路径及格式，并且提供了零配置开箱即用的特性，参考<a href="https://note.xcloudapi.com/2022/06/08/Launcher%E9%80%9A%E7%94%A8%E5%90%AF%E5%8A%A8%E5%99%A8-%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/">日志配置指南</a></li><li>自动生成<code>Dockerfile</code>文件，方便容器化部署，参考<a href="https://note.xcloudapi.com/2022/06/08/Launcher%E9%80%9A%E7%94%A8%E5%90%AF%E5%8A%A8%E5%99%A8-Dockerfile%E6%89%A9%E5%B1%95%E6%94%AF%E6%8C%81/">Dockerfile扩展支持</a></li></ul><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><ul><li><p><a href="https://note.xcloudapi.com/2022/06/08/Launcher%E9%80%9A%E7%94%A8%E5%90%AF%E5%8A%A8%E5%99%A8-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/">启动器使用说明</a></p></li><li><p><a href="https://note.xcloudapi.com/2022/06/08/Launcher%E9%80%9A%E7%94%A8%E5%90%AF%E5%8A%A8%E5%99%A8-Maven%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/">Maven插件配置</a></p></li><li><p><a href="https://note.xcloudapi.com/2022/06/08/Launcher%E9%80%9A%E7%94%A8%E5%90%AF%E5%8A%A8%E5%99%A8-%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/">日志配置指南</a></p></li><li><p><a href="https://note.xcloudapi.com/2022/06/08/Launcher%E9%80%9A%E7%94%A8%E5%90%AF%E5%8A%A8%E5%99%A8-Dockerfile%E6%89%A9%E5%B1%95%E6%94%AF%E6%8C%81/">Dockerfile扩展支持</a></p></li><li><p><a href="https://note.xcloudapi.com/2022/06/08/Launcher%E9%80%9A%E7%94%A8%E5%90%AF%E5%8A%A8%E5%99%A8-%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/">测试用例</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> maven </tag>
            
            <tag> 启动器 </tag>
            
            <tag> dockerfile </tag>
            
            <tag> plugin </tag>
            
            <tag> shell </tag>
            
            <tag> javaagent </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java工程架构定义</title>
      <link href="/2022/06/08/Java%E5%B7%A5%E7%A8%8B%E6%9E%B6%E6%9E%84%E5%AE%9A%E4%B9%89/"/>
      <url>/2022/06/08/Java%E5%B7%A5%E7%A8%8B%E6%9E%B6%E6%9E%84%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h3 id="架构目标"><a href="#架构目标" class="headerlink" title="架构目标"></a>架构目标</h3><ol><li>基于工程命名不够规范，制定工程命名规约，提升识别性</li><li>规范技术架构定义，方便后续可读性、维护性及扩展性</li><li>规范模块结构定义，方便新人快速理解上手</li><li>降低架构初始化及常用组件的接入成本，提升研发效率</li></ol><h3 id="架构源码"><a href="#架构源码" class="headerlink" title="架构源码"></a>架构源码</h3><ul><li>Github源码：<a href="https://github.com/guanyang/spring-simple-framework" target="_blank" rel="noopener">https://github.com/guanyang/spring-simple-framework</a></li></ul><h3 id="模块说明"><a href="#模块说明" class="headerlink" title="模块说明"></a>模块说明</h3><ul><li>spring-archetype-parent：archetype模板工程，用来创建后端服务的<code>archetype</code></li><li>spring-simiple-demo：archetype模板源码，基于源码可以优化升级模板工程</li></ul><h3 id="应用架构"><a href="#应用架构" class="headerlink" title="应用架构"></a>应用架构</h3><p><img src="../../../../img/note/系统架构图.png" alt="应用架构"></p><h3 id="依赖组件"><a href="#依赖组件" class="headerlink" title="依赖组件"></a>依赖组件</h3><ul><li>当前工程依赖了一些常用组件，避免重复造轮子，代码结构更统一，可以提升研发效率</li><li>组件源码参考：<a href="https://github.com/guanyang/spring-base-parent" target="_blank" rel="noopener">guanyang/spring-base-parent</a></li></ul><div class="table-container"><table><thead><tr><th>模块(artifactId)</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>spring-base-core</td><td>基础核心定义</td><td><a href="https://note.xcloudapi.com/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-core/">参考文档</a></td></tr><tr><td>spring-base-util</td><td>常用工具类合集</td><td><a href="https://note.xcloudapi.com/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-util/">参考文档</a></td></tr><tr><td>spring-base-csrf</td><td>csrf组件</td><td><a href="https://note.xcloudapi.com/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-csrf/">参考文档</a></td></tr><tr><td>spring-base-sign</td><td>接口签名组件</td><td><a href="https://note.xcloudapi.com/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-sign/">参考文档</a></td></tr><tr><td>spring-base-xss</td><td>接口参数xss校验组件</td><td><a href="https://note.xcloudapi.com/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-xss/">参考文档</a></td></tr><tr><td>spring-base-lock</td><td>分布式锁组件</td><td><a href="https://note.xcloudapi.com/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-lock/">参考文档</a></td></tr><tr><td>spring-base-log</td><td>日志组件</td><td><a href="https://note.xcloudapi.com/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-log/">参考文档</a></td></tr><tr><td>spring-base-limit</td><td>限流组件</td><td><a href="https://note.xcloudapi.com/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-limit/">参考文档</a></td></tr></tbody></table></div><h3 id="快速使用指南"><a href="#快速使用指南" class="headerlink" title="快速使用指南"></a>快速使用指南</h3><h4 id="应用工程架构"><a href="#应用工程架构" class="headerlink" title="应用工程架构"></a>应用工程架构</h4><p><img src="../../../../img/note/系统依赖图.png" alt="应用工程架构"></p><h4 id="模块定义说明"><a href="#模块定义说明" class="headerlink" title="模块定义说明"></a>模块定义说明</h4><div class="table-container"><table><thead><tr><th>模块序号</th><th>模块定义</th><th>模块说明</th><th>依赖序号</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>demo-util</td><td>业务工具组件</td><td>~</td><td>【非必须】工具精炼抽象，多处使用</td></tr><tr><td>2</td><td>demo-dao</td><td>业务db操作组件</td><td>~</td><td>【建议添加】只有db相关操作</td></tr><tr><td>3</td><td>demo-common</td><td>外围依赖服务聚合组件</td><td>1</td><td>【建议添加】方便抽象成SDK</td></tr><tr><td>4</td><td>admin-api</td><td>后台服务接口契约定义</td><td>~</td><td>【非必须】方便扩展rpc</td></tr><tr><td>5</td><td>demo-service-api</td><td>对外服务接口契约定义</td><td>~</td><td>【建议添加】方便扩展rpc</td></tr><tr><td>6</td><td>demo-service-java</td><td>对外服务应用</td><td>1，2，3，5</td><td>【建议添加】应用服务进程</td></tr><tr><td>7</td><td>demo-admin-java</td><td>后台服务应用</td><td>1，2，3，4</td><td>【非必须】管理后台，跟对外服务应用隔离</td></tr></tbody></table></div><blockquote><p>demo-admin-java应用可选，根据业务规模决策是否需要隔离部署，小应用可以将admin和service合并</p></blockquote><h4 id="相关依赖"><a href="#相关依赖" class="headerlink" title="相关依赖"></a>相关依赖</h4><ul><li>本工程依赖<a href="https://github.com/guanyang/spring-base-parent" target="_blank" rel="noopener">guanyang/spring-base-parent</a> 相关组件</li><li>将<code>spring-base-parent</code>下载到本地，执行<code>mvn clean install</code>，将相关组件生成到本地</li></ul><h4 id="基于模板创建应用"><a href="#基于模板创建应用" class="headerlink" title="基于模板创建应用"></a>基于模板创建应用</h4><ul><li>将archetype模板生成到本地<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure></li><li>基于archetype模板创建工程，命令如下：</li></ul><pre><code>mvn archetype:generate  \    -DgroupId=org.gy.framework \                    //替换成自定义groupId    -DartifactId=spring-demo-01 \                    //替换成自定义artifactId    -Dversion=1.0.0-SNAPSHOT \                    //替换成自定义version                    -Dpackage=org.gy.framework.demo \            //替换成自定义package路径    -DarchetypeArtifactId=spring-archetype-service \        //该模板已经上传私服，直接使用    -DarchetypeGroupId=org.gy.framework \    -DarchetypeVersion=1.0.0-SNAPSHOT</code></pre><h4 id="本地调试开发"><a href="#本地调试开发" class="headerlink" title="本地调试开发"></a>本地调试开发</h4><ul><li>初次启动【xxx-service-java】，需要调整数据源配置，否则启动报错<ul><li>数据源配置路径：xxx-service-java/src/main/resources/application-live.yml</li></ul></li><li>该框架已经默认引入<code>mybatis plus</code>中间件，支持代码自动生成及数据源常用配置<ul><li>代码自动生成入口：xxx-dao/src/test/java/${package}.dao/MybatisAutoGeneratorHelper.java</li><li>mybatis-plus常用配置入口：xxx-service-java/src/main/resources/application.yml，一般不需要修改，默认即可</li></ul></li><li>代码自动生成使用说明，只需要调整以下变量即可，其他可以保持不变，入口类：<code>MybatisAutoGeneratorHelper</code><ul><li>url：数据源地址</li><li>username：数据库用户名</li><li>password：数据库密码</li><li>author：代码生成者名字，仅作标识而已，可随意指定</li><li>tableNames：要生成的数据库表名，可以指定多个</li></ul></li></ul><h3 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h3><ul><li><a href="https://note.xcloudapi.com/2021/11/22/Maven-Archetype%E6%90%AD%E5%BB%BA%E6%A8%A1%E6%9D%BF%E5%B7%A5%E7%A8%8B/">Maven Archetype搭建模板工程</a></li></ul><h3 id="Change-Log"><a href="#Change-Log" class="headerlink" title="Change Log"></a>Change Log</h3><h4 id="1-0-0-SNAPSHOT"><a href="#1-0-0-SNAPSHOT" class="headerlink" title="1.0.0-SNAPSHOT"></a>1.0.0-SNAPSHOT</h4><ul><li>统一架构分层结构定义，方便扩展及治理</li><li>API统一异常、错误码规范定义，参考ApiBizException</li><li>统一全局异常处理器，参考ServiceExceptionHandler</li><li>引入<code>mybatis plus</code>中间件，支持代码自动生成及数据源常用配置，代码自动生成参考<code>MybatisAutoGeneratorHelper</code></li><li>支持csrf、xss安全加固，参考示例<code>TestController</code><ul><li>在需要csrf验证的Controller方法加上@CsrfCheck注解</li><li>请求对象需要添加<code>@Valid</code>或者<code>@Validated</code>注解才会进行xss校验</li></ul></li><li>支持traceid和日志切面记录方法调用日志，参考示例<code>TestController</code><ul><li>日志<code>@LogTrace</code>支持类、方法层级定义</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> archetype </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 架构 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring工具包-xss</title>
      <link href="/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-xss/"/>
      <url>/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-xss/</url>
      
        <content type="html"><![CDATA[<h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><ul><li>针对请求对象的所有String字段自动进行trim、checkXss</li><li>如果监测有xss风险，将抛出<code>XssException</code>，可针对此异常定制全局异常处理</li></ul><h3 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h3><ul><li>Github源码：<a href="https://github.com/guanyang/spring-base-parent" target="_blank" rel="noopener">https://github.com/guanyang/spring-base-parent</a></li><li>最新Maven坐标</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.gy.framework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-base-xss&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><ul><li>应用入口类添加<code>@EnableXss</code>注解，启动Xss检查</li><li>当前组件只针对<code>RestController</code>或者<code>Controller</code>标注的类进行xss校验</li><li>请求对象需要添加<code>@Valid</code>或者<code>@Validated</code>注解才会进行校验</li><li>如果某些特殊场景需要跳过Xss检查，可以在对应字段上添加如下注解<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;check设置false，跳过xss检查，trim设置true，进行去空格处理</span><br><span class="line">@XssCheck(check &#x3D; false, trim &#x3D; true)</span><br><span class="line">private String name;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring工具包-util</title>
      <link href="/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-util/"/>
      <url>/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-util/</url>
      
        <content type="html"><![CDATA[<h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><ul><li>常用工具类定义，避免重复造轮子，提升效率<ul><li>AES加密</li><li>枚举定义</li><li>数据加载，避免深度分页</li><li>版本号比较</li><li>图片过滤清洗，防止违规内容</li><li>图片添加水印</li><li>IP/Cookie工具类</li><li>常用正则合集</li><li>参数校验注解，支持集合和枚举校验</li></ul></li></ul><h3 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h3><ul><li>Github源码：<a href="https://github.com/guanyang/spring-base-parent" target="_blank" rel="noopener">https://github.com/guanyang/spring-base-parent</a></li><li>最新Maven坐标<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.gy.framework&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-base-util&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="工程结构解读"><a href="#工程结构解读" class="headerlink" title="工程结构解读"></a>工程结构解读</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">├── README.md</span><br><span class="line">├── pom.xml</span><br><span class="line">├── src</span><br><span class="line">│   ├── main</span><br><span class="line">│       ├── java</span><br><span class="line">│           └── org</span><br><span class="line">│               └── gy</span><br><span class="line">│                   └── framework</span><br><span class="line">│                       └── util</span><br><span class="line">│                           ├── code            &#x2F;&#x2F;常用编码合集，例如AES加密</span><br><span class="line">│                           ├── data            &#x2F;&#x2F;数据加载，避免深度分页；版本号比较</span><br><span class="line">│                           ├── file            &#x2F;&#x2F;图片过滤清洗，防止违规内容；图片添加水印</span><br><span class="line">│                           ├── http            &#x2F;&#x2F;IP&#x2F;Cookie工具类</span><br><span class="line">│                           ├── net             &#x2F;&#x2F;网络相关工具类</span><br><span class="line">│                           ├── regex           &#x2F;&#x2F;常用正则合集</span><br><span class="line">│                           ├── response        &#x2F;&#x2F;json&#x2F;jsonp内容输出</span><br><span class="line">│                           └── validation      &#x2F;&#x2F;参数校验注解，支持集合和枚举校验</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
            <tag> file </tag>
            
            <tag> http </tag>
            
            <tag> net </tag>
            
            <tag> regex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring工具包-sign</title>
      <link href="/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-sign/"/>
      <url>/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-sign/</url>
      
        <content type="html"><![CDATA[<h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><ul><li>接口签名、验签组件，方便接口添加验签特性、访问接口生成签名</li></ul><h3 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h3><ul><li>Github源码：<a href="https://github.com/guanyang/spring-base-parent" target="_blank" rel="noopener">https://github.com/guanyang/spring-base-parent</a></li><li>最新Maven坐标</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.gy.framework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-base-sign&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="验签"><a href="#验签" class="headerlink" title="验签"></a>验签</h3><ul><li><p>添加配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sign:</span><br><span class="line">  client:</span><br><span class="line">    apps:</span><br><span class="line">      -</span><br><span class="line">        appId: 1    &#x2F;&#x2F; 分配给客户端的appId</span><br><span class="line">        appKey: test1    &#x2F;&#x2F; 分配给客户端的appSecret</span><br><span class="line">      -</span><br><span class="line">        appId: 2</span><br><span class="line">        appKey: test2</span><br></pre></td></tr></table></figure></li><li><p>定义请求参数类，该类实现<code>SignedReq</code>接口</p></li><li>在请求参数中需要参与签名的字段上添加<code>@SignParam</code>注解<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@SignParam注解name属性用于该字段在生成签名时的健值，不指定则默认使用字段名</span><br></pre></td></tr></table></figure></li><li>在需要验签的<code>Controller</code>方法加上<code>@SignCheck</code>注解</li><li>验签失败会抛出<code>SignInvalidException</code>异常，可以针对此异常定义返回调用方的信息</li></ul><h3 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h3><ul><li>使用<code>ParamSignUtils.sign(req, key)</code>生成签名<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req类上使用@SignParam注解标识参与签名的字段，@SignParam注解name属性用于该字段在生成签名时的健值，不指定则默认使用字段名</span><br></pre></td></tr></table></figure></li></ul><h3 id="签名规则"><a href="#签名规则" class="headerlink" title="签名规则"></a>签名规则</h3><ul><li>把请求参数键值对按字典序排序，然后进行拼接，例如：<code>key1=value1&amp;key2=value2</code></li><li>再拼接上appKey键值对<code>key=${appKey}</code>，例如：<code>key1=value1&amp;key2=value2&amp;key=${appKey}</code></li><li>将上述拼接之后的字符串进行md5签名即可</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
            <tag> 签名 </tag>
            
            <tag> 验签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring工具包-log</title>
      <link href="/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-log/"/>
      <url>/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-log/</url>
      
        <content type="html"><![CDATA[<h4 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h4><ul><li>针对所有请求，添加<code>x-trace-id</code>，方便追踪，参考<code>LogInterceptor</code></li><li>增加日志输出切面，方便排查方法调用日志，参考<code>LogTraceAspect</code></li></ul><h3 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h3><ul><li>Github源码：<a href="https://github.com/guanyang/spring-base-parent" target="_blank" rel="noopener">https://github.com/guanyang/spring-base-parent</a></li><li>最新Maven坐标</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.gy.framework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-base-log&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><ul><li>日志<code>@LogTrace</code>支持类、方法层级定义</li><li>定义到类层级，会记录当前类所有方法调用日志，示例如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;test&quot;)</span><br><span class="line">@LogTrace</span><br><span class="line">public class TestController &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>定义到方法级别，仅记录当前方法调用日志，示例如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;&#x2F;log&quot;)</span><br><span class="line">@LogTrace(fieldName &#x3D; &quot;dto&quot;, desc &#x3D; &quot;测试日志&quot;)</span><br><span class="line">public Response log(@Valid TestRequestDTO dto) &#123;</span><br><span class="line">    return testService.test(dto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>输出日志内容如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;invokeEndTime&quot;: 1638371312536,</span><br><span class="line">    &quot;responseBody&quot;: &quot;&#123;\&quot;data\&quot;:&#123;\&quot;name\&quot;:null,\&quot;time\&quot;:1638371312536&#125;,\&quot;error\&quot;:0,\&quot;msg\&quot;:\&quot;success\&quot;,\&quot;requestId\&quot;:\&quot;e214d479e51042c5a8e139c1b974ade5\&quot;&#125;&quot;,</span><br><span class="line">    &quot;logStartTime&quot;: 1638371312111,</span><br><span class="line">    &quot;logEndTime&quot;: 1638371312537,</span><br><span class="line">    &quot;methodName&quot;: &quot;test&quot;,</span><br><span class="line">    &quot;className&quot;: &quot;org.gy.framework.demo.service.controller.TestController&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;v1&quot;,</span><br><span class="line">    &quot;requestBody&quot;: &quot;&#123;\&quot;dto\&quot;:&#123;\&quot;name\&quot;:\&quot;test\&quot;&#125;&#125;&quot;,</span><br><span class="line">    &quot;clientIp&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;serverIp&quot;: &quot;10.100.129.177&quot;,</span><br><span class="line">    &quot;invokeStartTime&quot;: 1638371312129,</span><br><span class="line">    &quot;invokeCostTime&quot;: 407,</span><br><span class="line">    &quot;desc&quot;: &quot;default&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
            <tag> log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring工具包-lock</title>
      <link href="/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-lock/"/>
      <url>/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-lock/</url>
      
        <content type="html"><![CDATA[<h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><ul><li>基于<code>redis</code>实现分布式锁，开箱即用，避免重复造轮子，提升效率</li><li>依赖<code>StringRedisTemplate</code>，如果springboot中没有配置<code>StringRedisTemplate</code>，则不可使用</li></ul><h3 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h3><ul><li>Github源码：<a href="https://github.com/guanyang/spring-base-parent" target="_blank" rel="noopener">https://github.com/guanyang/spring-base-parent</a></li><li>最新Maven坐标</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.gy.framework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-base-lock&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><ol><li>当前分布式采用redis+lua实现，后续可以扩展其他实现方式</li><li>支持手动调用和AOP注解两种方式实现</li></ol><ul><li>AOP切面默认不开启，如需开启，需要在启动类添加<code>@EnableLockAspect</code>注解<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;如果应用配置多个StringRedisTemplate，需要切面注入指定bean，启动类添加如下注解，注意修改bean名称：</span><br><span class="line">@EnableLockAspect(redisTemplateName &#x3D; &quot;stringRedisTemplate&quot;)</span><br></pre></td></tr></table></figure></li><li>手动调用入口：<code>DistributedLockAction</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;定义分布式实现</span><br><span class="line">DistributedLock lock &#x3D; new RedisDistributedLock(redisTemplate, lockKey, expireTime);</span><br><span class="line">&#x2F;&#x2F;方法执行</span><br><span class="line">LockResult&lt;Long&gt; execute &#x3D; DistributedLockAction.execute(lock, () -&gt; &#123;</span><br><span class="line">    return System.currentTimeMillis();</span><br><span class="line">&#125;);</span><br><span class="line">Assert.assertTrue(execute.success());</span><br></pre></td></tr></table></figure></li><li>AOP入口类：<code>DistributedLockAspect</code>，注解调用示例如下，支持Spel表达式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Lock(key &#x3D; &quot;&#39;GY:LOCK:TEST:&#39; + #user.name&quot;)</span><br><span class="line">public void test(User user)&#123;</span><br><span class="line">    System.out.println(&quot;------------&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取锁方式"><a href="#获取锁方式" class="headerlink" title="获取锁方式"></a>获取锁方式</h3><blockquote><p>方法入口类：DistributedLockAction</p></blockquote></li><li>仅尝试一次获取锁，没有获取到，则直接返回获取失败</li></ul><pre><code>/**     * 功能描述：业务执行，包含加锁、释放锁(仅尝试一次获取锁)     *     * @param lock 分布式锁定义     * @param runnable 执行体     */    public static &lt;T&gt; LockResult&lt;T&gt; execute(DistributedLock lock, DistributedLockCallback&lt;T&gt; runnable) {        return execute(lock, 0, 0, runnable);    }</code></pre><ul><li>一直尝试，直到获取成功</li></ul><pre><code>/**     * 功能描述:业务执行，包含加锁、释放锁(一直尝试，直到获取成功)     *     * @param lock 分布式锁定义     * @param sleepTimeMillis 睡眠重试时间，单位：毫秒     * @param runnable 执行体     */    public static &lt;T&gt; LockResult&lt;T&gt; execute(DistributedLock lock, long sleepTimeMillis,        DistributedLockCallback&lt;T&gt; runnable) {        return execute(lock, -1, sleepTimeMillis, runnable);    }</code></pre><ul><li>多次尝试获取锁，自定义超时时间</li></ul><pre><code>/**     * 功能描述:业务执行，包含加锁、释放锁(多次尝试获取锁，自定义超时时间)     *     * @param lock 分布式锁定义     * @param waitTimeMillis 等待超时时间，单位：毫秒     * @param sleepTimeMillis 睡眠重试时间，单位：毫秒     * @param runnable 执行体     */    public static &lt;T&gt; LockResult&lt;T&gt; execute(DistributedLock lock, long waitTimeMillis, long sleepTimeMillis,        DistributedLockCallback&lt;T&gt; runnable) {        boolean lockFlag = false;        try {            lockFlag = lock.tryLock(waitTimeMillis, sleepTimeMillis);            if (!lockFlag) {                return LockResult.wrapError();            }            T data = runnable.run();            return LockResult.wrapSuccess(data);        } finally {            if (lockFlag) {                lock.unlock();            }        }    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
            <tag> DistributedLock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring工具包-limit</title>
      <link href="/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-limit/"/>
      <url>/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-limit/</url>
      
        <content type="html"><![CDATA[<h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><ul><li>当前组件主要用于应用访问频率限制，添加注解<code>LimitCheck</code>即可快速接入使用</li><li>默认支持基于<code>redis</code>实现的频率访问控制，需要应用配置<code>StringRedisTemplate</code>实例</li><li>支持SPI方式扩展实现，接口类：<code>org.gy.framework.limit.core.ILimitCheckService</code></li></ul><h3 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h3><ul><li>Github源码：<a href="https://github.com/guanyang/spring-base-parent" target="_blank" rel="noopener">https://github.com/guanyang/spring-base-parent</a></li><li>最新Maven坐标</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.gy.framework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-base-limit&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><ol><li><p>需要在启动类添加<code>@EnableLimitCheck</code>注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;如果应用配置多个StringRedisTemplate，需要注入指定bean，启动类添加如下注解，注意修改bean名称：</span><br><span class="line">@EnableLimitCheck(redisTemplateName &#x3D; &quot;stringRedisTemplate&quot;)</span><br></pre></td></tr></table></figure></li><li><p>注解调用示例如下，支持Spel表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;当前示例场景：300秒只能调用1次</span><br><span class="line">@LimitCheck(key &#x3D; &quot;&#39;GY:LOCK:TEST:&#39; + #user.name&quot;, limit &#x3D; 1, time &#x3D; 300)</span><br><span class="line">public void test(User user)&#123;</span><br><span class="line">    System.out.println(&quot;------------&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;+user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
            <tag> RateLimiter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring工具包-csrf</title>
      <link href="/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-csrf/"/>
      <url>/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-csrf/</url>
      
        <content type="html"><![CDATA[<h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><ul><li>csrf防护组件，支持referer验证、双重cookie验证，支持多种验证方式</li></ul><h3 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h3><ul><li>Github源码：<a href="https://github.com/guanyang/spring-base-parent" target="_blank" rel="noopener">https://github.com/guanyang/spring-base-parent</a></li><li>最新Maven坐标</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.gy.framework&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-base-csrf&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">csrf:</span><br><span class="line">  ## 验证方式(referer&#x2F;token)(多种使用&quot;;&quot;分隔)</span><br><span class="line">  types: token</span><br><span class="line">  ## referer验证方式下的url(多种使用&quot;;&quot;分隔，使用token方式可以不配置)</span><br><span class="line">  #referers: http:&#x2F;&#x2F;www.xxx.com</span><br><span class="line">  ## token验证方式下的token参数名(使用referer方式可以不配置)</span><br><span class="line">  paramName: csrf_token</span><br><span class="line">  ## token验证方式下的cookie名(使用referer方式可以不配置)</span><br><span class="line">  tokenName: csrf_token_cookie</span><br><span class="line">  ## token验证方式下的token生成地址(使用referer方式可以不配置)</span><br><span class="line">  tokenUrl: &#x2F;api&#x2F;token</span><br><span class="line">  ## token验证方式下的cookie有效期(单位:s)(使用referer方式可以不配置)</span><br><span class="line">  tokenMaxAge: 7200</span><br></pre></td></tr></table></figure><ul><li>在需要csrf验证的Controller方法加上@CsrfCheck注解<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;&#x2F;api&quot;)</span><br><span class="line">@CsrfCheck</span><br><span class="line">public Response test(@Valid TestRequestDTO dto) &#123;</span><br><span class="line">    return testService.test(dto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
            <tag> csrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring工具包-core</title>
      <link href="/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-core/"/>
      <url>/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-core/</url>
      
        <content type="html"><![CDATA[<h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><ul><li>定义DTO，规范输入输出格式，参考<code>Response</code></li><li>定义错误码、异常，参考<code>CommonException</code></li><li>定义事件接口契约，参考<code>EventI</code></li><li>添加<code>Filter</code>和<code>FilterChain</code>支持，方便自由定制</li><li>定义TraceId生成工具，参考<code>TraceUtils</code></li><li>添加<code>StateMachine</code>状态机，支持<code>Fluent API</code>调用</li><li>定义枚举类标准，统一格式，参考<code>IStdEnum</code></li></ul><h3 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h3><ul><li>Github源码：<a href="https://github.com/guanyang/spring-base-parent" target="_blank" rel="noopener">https://github.com/guanyang/spring-base-parent</a></li><li>最新Maven坐标<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.gy.framework&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-base-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="工程结构解读"><a href="#工程结构解读" class="headerlink" title="工程结构解读"></a>工程结构解读</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">├── README.md</span><br><span class="line">├── pom.xml</span><br><span class="line">├── src</span><br><span class="line">│   ├── main</span><br><span class="line">│       ├── java</span><br><span class="line">│           └── org</span><br><span class="line">│               └── gy</span><br><span class="line">│                   └── framework</span><br><span class="line">│                       └── core</span><br><span class="line">│                           ├── dto             &#x2F;&#x2F;统一DTO定义，规范格式</span><br><span class="line">│                           ├── event           &#x2F;&#x2F;定义事件接口契约</span><br><span class="line">│                           ├── exception       &#x2F;&#x2F;定义异常及错误码</span><br><span class="line">│                           ├── filter          &#x2F;&#x2F;定义Filter和FilterChain</span><br><span class="line">│                           ├── statemachine    &#x2F;&#x2F;状态机定义</span><br><span class="line">│                           ├── support         &#x2F;&#x2F;常用支持类定义，例如枚举标准格式定义</span><br><span class="line">│                           ├── trace           &#x2F;&#x2F;定义TraceId生成工具</span><br><span class="line">│                           └── util            &#x2F;&#x2F;常用工具类，例如JSON工具</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
            <tag> Exception </tag>
            
            <tag> Filter </tag>
            
            <tag> StateMachine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring工具包概述</title>
      <link href="/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><ul><li>依赖规范，统一的父pom，三方依赖库、版本管理</li><li>常用组件、工具类封装，方便代码复用</li><li>常用<code>Starter</code>组件，开箱即用，提升效率</li></ul><h3 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h3><ul><li>Github源码：<a href="https://github.com/guanyang/spring-base-parent" target="_blank" rel="noopener">https://github.com/guanyang/spring-base-parent</a></li><li>最新Maven坐标<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.gy.framework&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-base-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0.1-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="模块解读"><a href="#模块解读" class="headerlink" title="模块解读"></a>模块解读</h3><div class="table-container"><table><thead><tr><th>模块(artifactId)</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>spring-base-core</td><td>基础核心定义</td><td><a href="https://note.xcloudapi.com/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-core/">参考文档</a></td></tr><tr><td>spring-base-util</td><td>常用工具类合集</td><td><a href="https://note.xcloudapi.com/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-util/">参考文档</a></td></tr><tr><td>spring-base-csrf</td><td>csrf组件</td><td><a href="https://note.xcloudapi.com/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-csrf/">参考文档</a></td></tr><tr><td>spring-base-sign</td><td>接口签名组件</td><td><a href="https://note.xcloudapi.com/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-sign/">参考文档</a></td></tr><tr><td>spring-base-xss</td><td>接口参数xss校验组件</td><td><a href="https://note.xcloudapi.com/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-xss/">参考文档</a></td></tr><tr><td>spring-base-lock</td><td>分布式锁组件</td><td><a href="https://note.xcloudapi.com/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-lock/">参考文档</a></td></tr><tr><td>spring-base-log</td><td>日志组件</td><td><a href="https://note.xcloudapi.com/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-log/">参考文档</a></td></tr><tr><td>spring-base-limit</td><td>限流组件</td><td><a href="https://note.xcloudapi.com/2022/06/08/Spring%E5%B7%A5%E5%85%B7%E5%8C%85-limit/">参考文档</a></td></tr></tbody></table></div><h3 id="Change-Log"><a href="#Change-Log" class="headerlink" title="Change Log"></a>Change Log</h3><h4 id="1-0-0-SNAPSHOT"><a href="#1-0-0-SNAPSHOT" class="headerlink" title="1.0.0-SNAPSHOT"></a>1.0.0-SNAPSHOT</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">初始化版本</span><br></pre></td></tr></table></figure><h3 id="1-0-1-SNAPSHOT"><a href="#1-0-1-SNAPSHOT" class="headerlink" title="1.0.1-SNAPSHOT"></a>1.0.1-SNAPSHOT</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 添加Filter和FilterChain支持</span><br><span class="line">2. 完善Exception类型及ExceptionHandlerI处理</span><br><span class="line">3. 模块【spring-base-util】添加FileFilter过滤清洗，防止文件上传违规内容</span><br><span class="line">  - 支持常见图片文件头尾字节码检查，防止恶意篡改文件扩展名上传，例如：jpg、png、gif、bmp</span><br><span class="line">  - 支持图片文件字节码流内容清洗，剔除夹带恶意代码</span><br><span class="line">4. 模板【spring-base-core】添加statemachine状态机，支持Fluent API调用</span><br><span class="line">5. 添加限流组件【spring-base-limit】,支持全局限流及SPI扩展</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Geode使用教程</title>
      <link href="/2022/01/21/Apache-Geode%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2022/01/21/Apache-Geode%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>可在广泛分布的云架构中提供对数据密集型应用程序的实时，一致的访问</li><li>Geode还是一个内存数据管理系统，可提供可靠的异步事件通知和有保证的消息传递</li></ul><h3 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h3><ul><li>官方文档：<a href="https://geode.apache.org/docs/guide/114/about_geode.html" target="_blank" rel="noopener">https://geode.apache.org/docs/guide/114/about_geode.html</a></li></ul><h3 id="geode下载及环境配置"><a href="#geode下载及环境配置" class="headerlink" title="geode下载及环境配置"></a>geode下载及环境配置</h3><ul><li>下载地址：<a href="https://dlcdn.apache.org/geode/1.14.2/apache-geode-1.14.2.tgz" target="_blank" rel="noopener">https://dlcdn.apache.org/geode/1.14.2/apache-geode-1.14.2.tgz</a></li></ul><h4 id="下载解压"><a href="#下载解压" class="headerlink" title="下载解压"></a>下载解压</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line"><span class="comment">##下载解压</span></span><br><span class="line">&gt; wget https://dlcdn.apache.org/geode/1.14.2/apache-geode-1.14.2.tgz</span><br><span class="line">&gt; tar -zxvf apache-geode-1.14.2.tgz</span><br><span class="line">&gt; mv apache-geode-1.14.2 /usr/<span class="built_in">local</span>/geode</span><br></pre></td></tr></table></figure><h4 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑配置，并保存退出</span></span><br><span class="line">&gt; <span class="built_in">export</span> GEODE_HOME=/usr/<span class="built_in">local</span>/geode</span><br><span class="line">&gt; <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GEODE_HOME</span>/bin  </span><br><span class="line"></span><br><span class="line"><span class="comment">#立即生效</span></span><br><span class="line">&gt; <span class="built_in">source</span> /etc/profile  </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看gfsh版本</span></span><br><span class="line">&gt; gfsh version</span><br></pre></td></tr></table></figure><h3 id="gfsh常用命令"><a href="#gfsh常用命令" class="headerlink" title="gfsh常用命令"></a>gfsh常用命令</h3><ul><li>启动服务并配置区域<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启用gfsh命令行</span></span><br><span class="line">&gt; gfsh</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动locator</span></span><br><span class="line">&gt; start locator --name=locator1</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动pulse，web应用，提供了图形化的监控界面，自动连接到locator的JMX管理器，地址：http://localhost:7070/pulse 默认账户：admin  密码：admin</span></span><br><span class="line">&gt; start pulse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动缓存服务器，可以参考此命令启动多个，修改name和server-port</span></span><br><span class="line">&gt; start server --name=server1 --server-port=40404</span><br><span class="line">&gt; start server --name=server2 --server-port=40405</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个复制持久区域</span></span><br><span class="line">&gt; create region --name=region1 --<span class="built_in">type</span>=REPLICATE_PERSISTENT</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止缓存服务器</span></span><br><span class="line">&gt; stop server --name=server1</span><br><span class="line"></span><br><span class="line"><span class="comment">#在第二个终端窗口中，运行以下命令以连接到集群</span></span><br><span class="line">&gt; connect --locator=localhost[10334]</span><br><span class="line"></span><br><span class="line"><span class="comment">#在当前gfsh会话中，停止集群</span></span><br><span class="line">&gt; shutdown --include-locators=<span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>其他常用命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#用gfsh命令来查看集群中的区域</span></span><br><span class="line">&gt; list regions</span><br><span class="line"></span><br><span class="line"><span class="comment">#列出集群上的成员</span></span><br><span class="line">&gt; list members</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看区域说明</span></span><br><span class="line">&gt; describe region --name=region1</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行如下的put命令来将数据添加到区域中</span></span><br><span class="line">&gt; put --region=region1 --key=3 --value=three</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行如下命令查询数据</span></span><br><span class="line">&gt; query --query=<span class="string">"select * from /region1"</span></span><br></pre></td></tr></table></figure><ul><li>启用REST API<blockquote><p>API war路径：{install-dir}/tools/Extensions/geode-web-api-n.n.n.war<br>API war可以单独启动，也可以基于cache server启动，将单独开启Jetty server进程</p></blockquote></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#基于cache server启动</span></span><br><span class="line">&gt; start server --name=server3 --server-port=40406 --start-rest-api=<span class="literal">true</span> --http-service-port=18080 --http-service-bind-address=localhost</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#验证api是否部署成功，注意根据自己配置的host和port进行调整</span></span><br><span class="line">&gt; curl i http://localhost:18080/geode/v1</span><br></pre></td></tr></table></figure><blockquote><p>swagger文档地址：<a href="http://localhost:18080/geode/docs/index.html" target="_blank" rel="noopener">http://localhost:18080/geode/docs/index.html</a></p></blockquote><ul><li>如何卸载<blockquote><p>关掉所有运行的Geode进程然后移除整个文件目录，没有额外的系统更改，也没有窗体注册需要修改</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache Geode </tag>
            
            <tag> 分布式缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Serverless搭建个人静态相册网站</title>
      <link href="/2022/01/02/%E7%94%A8Serverless%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E7%9B%B8%E5%86%8C%E7%BD%91%E7%AB%99/"/>
      <url>/2022/01/02/%E7%94%A8Serverless%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E9%9D%99%E6%80%81%E7%9B%B8%E5%86%8C%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><ul><li>Serverless Framework：Serverless Framework 是业界非常受欢迎的无服务器应用框架，开发者无需关心底层资源即可部署完整可用的 Serverless 应用架构</li><li>ThumbsUp：是一款让使用者方便检索及管理图片的看图软件，不但具有可以快速的操作图片切换预览的使用介面，而且对于图片的简单影像处理也有相当直接、便捷的操作方式</li></ul><h3 id="安装与初始化"><a href="#安装与初始化" class="headerlink" title="安装与初始化"></a>安装与初始化</h3><h4 id="首先确保系统包含以下环境："><a href="#首先确保系统包含以下环境：" class="headerlink" title="首先确保系统包含以下环境："></a>首先确保系统包含以下环境：</h4><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> (Node.js 版本需不低于 8.6，建议使用 Node.js 10.0 及以上版本)</li><li><a href="https://exiftool.org/" target="_blank" rel="noopener">Exiftool</a></li><li><a href="http://www.graphicsmagick.org/" target="_blank" rel="noopener">图形 Magick</a><blockquote><p>如未安装上述应用程序，可以参考<a href="https://thumbsup.github.io/docs/2-installation/npm/" target="_blank" rel="noopener">安装说明</a></p></blockquote></li></ul><h4 id="安装-Serverless-Framework"><a href="#安装-Serverless-Framework" class="headerlink" title="安装 Serverless Framework"></a>安装 Serverless Framework</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g serverless</span><br></pre></td></tr></table></figure><h4 id="安装-ThumbsUp"><a href="#安装-ThumbsUp" class="headerlink" title="安装 ThumbsUp"></a>安装 ThumbsUp</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g thumbsup</span><br></pre></td></tr></table></figure><h4 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir photos</span><br><span class="line">$ thumbsup --input .\photos\ --output website</span><br></pre></td></tr></table></figure><ul><li>初始化成功后，可以看到项目目录结构：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── photos</span><br><span class="line">└── website</span><br><span class="line">    └── index.html</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置-yml-文件【可选】"><a href="#配置-yml-文件【可选】" class="headerlink" title="配置 yml 文件【可选】"></a>配置 yml 文件【可选】</h3><ul><li>配置serverless.yml需要云服务资源支持，需要收费，作为可选项</li><li>项目目录下，创建 serverless.yml 文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch serverless.yml</span><br></pre></td></tr></table></figure></li><li>将以下内容写入上述的 yml 文件里：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># serverless.yml</span><br><span class="line"></span><br><span class="line">myWebsite:</span><br><span class="line">  component: &quot;@serverless&#x2F;tencent-website&quot;</span><br><span class="line">  inputs:</span><br><span class="line">    code:</span><br><span class="line">      src: .&#x2F;website</span><br><span class="line">      index: index.html</span><br><span class="line">      error: index.html</span><br><span class="line">    region: ap-guangzhou</span><br><span class="line">    bucketName: my-bucket-1111</span><br></pre></td></tr></table></figure></li><li>配置完成后，文件目录如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── photos</span><br><span class="line">├── website</span><br><span class="line">|   └── index.html</span><br><span class="line">└── serverless.yml</span><br></pre></td></tr></table></figure></li></ul><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ul><li>部署有如下两种方式：<ul><li>一种通过serverless.yml部署，需要云服务资源支持，需要收费</li><li>通过自己的域名直接解析到上述<code>website</code>目录即可，自行上网搜索处理即可</li></ul></li></ul><h4 id="serverless-yml部署介绍"><a href="#serverless-yml部署介绍" class="headerlink" title="serverless.yml部署介绍"></a>serverless.yml部署介绍</h4><ul><li>通过 sls 命令进行部署，并可以添加 —debug 参数查看部署过程中的信息</li><li>如您的账号未登陆或<a href="https://cloud.tencent.com/register" target="_blank" rel="noopener">注册</a>腾讯云，您可以直接通过微信扫描命令行中的二维码进行授权登陆和注册</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">sls --debug</span><br><span class="line"></span><br><span class="line">  DEBUG ─ Resolving the template&#39;s static variables.</span><br><span class="line">  DEBUG ─ Collecting components from the template.</span><br><span class="line">  DEBUG ─ Downloading any NPM components found in the template.</span><br><span class="line">  DEBUG ─ Analyzing the template&#39;s components dependencies.</span><br><span class="line">  DEBUG ─ Creating the template&#39;s components graph.</span><br><span class="line">  DEBUG ─ Syncing template state.</span><br><span class="line">  DEBUG ─ Executing the template&#39;s components graph.</span><br><span class="line">  DEBUG ─ Starting Website Component.</span><br><span class="line">  DEBUG ─ Preparing website Tencent COS bucket my-bucket-thumbsup-1256386184.</span><br><span class="line">  DEBUG ─ Deploying &quot;my-bucket-thumbsup-1256386184&quot; bucket in the &quot;ap-guangzhou&quot; region.</span><br><span class="line">  DEBUG ─ &quot;my-bucket-thumbsup-1256386184&quot; bucket was successfully deployed to the &quot;ap-guangzhou&quot; region.</span><br><span class="line">  DEBUG ─ Setting ACL for &quot;my-bucket-thumbsup-1256386184&quot; bucket in the &quot;ap-guangzhou&quot; region.</span><br><span class="line">  DEBUG ─ Ensuring no CORS are set for &quot;my-bucket-thumbsup-1256386184&quot; bucket in the &quot;ap-guangzhou&quot; region.</span><br><span class="line">  DEBUG ─ Ensuring no Tags are set for &quot;my-bucket-thumbsup-1256386184&quot; bucket in the &quot;ap-guangzhou&quot; region.</span><br><span class="line">  DEBUG ─ Configuring bucket my-bucket-thumbsup-1256386184 for website hosting.</span><br><span class="line">  DEBUG ─ Uploading website files from D:\tencent-serverless\thumbsup\website to bucket my-bucket-thumbsup-1256386184.</span><br><span class="line">  DEBUG ─ Starting upload to bucket my-bucket-thumbsup-1256386184 in region ap-guangzhou</span><br><span class="line">  DEBUG ─ Uploading directory D:\tencent-serverless\thumbsup\website to bucket my-bucket-thumbsup-1256386184</span><br><span class="line">  DEBUG ─ Website deployed successfully to URL: http:&#x2F;&#x2F;my-bucket-thumbsup-1256386184.cos-website.ap-guangzhou.myqcloud.com.</span><br><span class="line"></span><br><span class="line">  myWebsite:</span><br><span class="line">    url: http:&#x2F;&#x2F;my-bucket-thumbsup-1256386184.cos-website.ap-guangzhou.myqcloud.com</span><br><span class="line">    env:</span><br><span class="line"></span><br><span class="line">  13s » myWebsite » done</span><br></pre></td></tr></table></figure><ul><li>访问命令行输出的 website url，即可查看即可查看使用 Serverless Framework 部署的照片墙网站</li></ul><blockquote><p>注：如果希望更新网站中的照片或者视频等文件，可以在 photos 文件夹更新照片后，在本地重新运行 thumbsup —input .\photos\ —output website 更新本地页面，再运行 sls 即可更新网站</p></blockquote><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本文使用了非常流行的无服务器框架 Serverless Framework来搭建照片墙网站，更多产品信息可以点击进入官网学习。</p><blockquote><p>传送门：</p><ul><li>GitHub: <a href="https://github.com/serverless/serverless/blob/master/README_CN.md" target="_blank" rel="noopener">github.com/serverless</a></li><li>官网：<a href="https://cn.serverless.com/" target="_blank" rel="noopener">serverless.com</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 综合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Serverless </tag>
            
            <tag> ThumbsUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven Archetype搭建模板工程</title>
      <link href="/2021/11/22/Maven-Archetype%E6%90%AD%E5%BB%BA%E6%A8%A1%E6%9D%BF%E5%B7%A5%E7%A8%8B/"/>
      <url>/2021/11/22/Maven-Archetype%E6%90%AD%E5%BB%BA%E6%A8%A1%E6%9D%BF%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Archetype简介"><a href="#Archetype简介" class="headerlink" title="Archetype简介"></a>Archetype简介</h2><ul><li>Archetype是一个maven项目模板工具包，帮助用户创建 Maven 项目模板，并为用户提供生成这些项目模板的参数化版本的方法</li></ul><h2 id="Archetype创建"><a href="#Archetype创建" class="headerlink" title="Archetype创建"></a>Archetype创建</h2><h3 id="创建一个maven项目"><a href="#创建一个maven项目" class="headerlink" title="创建一个maven项目"></a>创建一个maven项目</h3><ul><li>任意创建一个maven项目，单module或多module都可以，示例如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">demo-01 &#x2F;&#x2F;主工程</span><br><span class="line"> - demo-01-admmin-java &#x2F;&#x2F;后台服务应用</span><br><span class="line"> - demo-01-common &#x2F;&#x2F;外围依赖服务聚合组件</span><br><span class="line"> - demo-01-dao &#x2F;&#x2F;业务db操作组件</span><br><span class="line"> - demo-01-service-api &#x2F;&#x2F;对外服务接口契约定义</span><br><span class="line"> - demo-01-service-java &#x2F;&#x2F;对外服务应用</span><br><span class="line"> - demo-01-util &#x2F;&#x2F;业务工具组件</span><br></pre></td></tr></table></figure><ul><li>在主pmo文件中引入maven-archetype-plugin，如下所示：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-archetype-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure><h3 id="生成archetype"><a href="#生成archetype" class="headerlink" title="生成archetype"></a>生成archetype</h3><ul><li>在刚才创建的maven工程根目录执行如下maven命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:create-from-project</span><br></pre></td></tr></table></figure><ul><li>如果出现类似<code>Could not resolve dependencies for project xxx</code>错误，是由于多module依赖导致，执行如下命令之后，再执行上述命令：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure><h3 id="发布archetype"><a href="#发布archetype" class="headerlink" title="发布archetype"></a>发布archetype</h3><ul><li>生成archetype成功之后，会在项目根路径下生成target目录</li><li>进入target/generated-sources/archetype目录,目录结构如下，执行<code>mvn install</code>，将模板安装到本地，也可以deploy到私服</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">├── pom.xml</span><br><span class="line">├── src</span><br><span class="line">│   ├── main</span><br><span class="line">│   │   └── resources</span><br><span class="line">│   │       ├── META-INF</span><br><span class="line">│   │       │   └── maven</span><br><span class="line">│   │       │       └── archetype-metadata.xml      &#x2F;&#x2F;模板描述文件</span><br><span class="line">│   │       └── archetype-resources                 &#x2F;&#x2F;模板资源目录，以下是多module资源文件</span><br><span class="line">│   │           ├── README.md</span><br><span class="line">│   │           ├── __rootArtifactId__-admin-java</span><br><span class="line">│   │           │   ├── pom.xml</span><br><span class="line">│   │           │   └── src</span><br><span class="line">│   │           ├── __rootArtifactId__-common</span><br><span class="line">│   │           │   ├── pom.xml</span><br><span class="line">│   │           │   └── src</span><br><span class="line">│   │           ├── __rootArtifactId__-dao</span><br><span class="line">│   │           │   ├── pom.xml</span><br><span class="line">│   │           │   └── src</span><br><span class="line">│   │           ├── __rootArtifactId__-service-api</span><br><span class="line">│   │           │   ├── pom.xml</span><br><span class="line">│   │           │   └── src</span><br><span class="line">│   │           ├── __rootArtifactId__-service-java</span><br><span class="line">│   │           │   ├── pom.xml</span><br><span class="line">│   │           │   └── src</span><br><span class="line">│   │           ├── __rootArtifactId__-util</span><br><span class="line">│   │           │   ├── pom.xml</span><br><span class="line">│   │           │   └── src</span><br><span class="line">│   │           └── pom.xml</span><br><span class="line">│   └── test</span><br><span class="line">│       └── resources</span><br><span class="line">│           └── projects</span><br><span class="line">│               └── basic</span><br><span class="line">│                   ├── archetype.properties</span><br><span class="line">│                   └── goal.txt</span><br></pre></td></tr></table></figure><ul><li><a href="http://maven.apache.org/archetype/archetype-models/archetype-descriptor/archetype-descriptor.html" target="_blank" rel="noopener">archetype-metadata.xml配置参考</a></li></ul><h2 id="Archetype使用"><a href="#Archetype使用" class="headerlink" title="Archetype使用"></a>Archetype使用</h2><ul><li><a href="http://maven.apache.org/archetype/maven-archetype-plugin/generate-mojo.html" target="_blank" rel="noopener">Maven Archetype Plugin文档</a></li></ul><h3 id="archetype命令行参数说明"><a href="#archetype命令行参数说明" class="headerlink" title="archetype命令行参数说明"></a>archetype命令行参数说明</h3><ul><li>mvn archetype:generate：构建maven项目起始命令</li><li>interactiveMode：交互模式，默认为true，在交互模式下运行命令，要求用户指定选用的原型，以及生成项目模版的groupId、artifactId、version、package等属性，否则执行失败</li><li>archetypeCatalog：Archetype查找规则</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">archetype分类，这里按位置分类有:</span><br><span class="line">‘local’  本地，通常是本地仓库的archetype-catalog.xml文件</span><br><span class="line">‘remote’  远程，是maven的中央仓库</span><br><span class="line">file:&#x2F;&#x2F;...&#39; 直接指定本地文件位置archetype-catalog.xml</span><br><span class="line">http:&#x2F;&#x2F;...&#39; or &#39;https:&#x2F;&#x2F;...&#39;  网络上的文件位置 archetype-catalog.xml</span><br><span class="line">‘internal’ maven-archetype-plugin内置的</span><br><span class="line">默认值是remote，local，创建原型时设置成internal，根据自定义的原型创建自定义工程时设置成local</span><br></pre></td></tr></table></figure><ul><li>archetypeRepository：仓库URL地址；不指定，则默认从中央库查找</li><li>archetypeGroupId：原型的groupId；默认值为org.apache.maven.archetypes</li><li>archetypeArtifactId：原型的artifactId；默认值为maven-archetype-quickstart</li><li>archetypeVersion：原型的version；默认值为1.0</li><li>groupId：生成项目的groupId；必选</li><li>artifactId：生成项目的artifactId；必选</li><li>version：生成项目的version；默认值1.0-SNAPSHOT</li><li>package：生成项目的源码包结构；默认值使用${groupId}</li><li>basedir：项目生成的目录；默认值为当前目录</li></ul><h3 id="基于archetype模板构建新工程，命令示例如下："><a href="#基于archetype模板构建新工程，命令示例如下：" class="headerlink" title="基于archetype模板构建新工程，命令示例如下："></a>基于archetype模板构建新工程，命令示例如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate  \</span><br><span class="line">    -DgroupId&#x3D;xxx \                 &#x2F;&#x2F;替换成自定义groupId</span><br><span class="line">    -DartifactId&#x3D;xxx \              &#x2F;&#x2F;替换成自定义artifactId</span><br><span class="line">    -Dversion&#x3D;xxx \                 &#x2F;&#x2F;替换成自定义version</span><br><span class="line">    -Dpackage&#x3D;xxx \                 &#x2F;&#x2F;替换成自定义package路径</span><br><span class="line">    -DarchetypeArtifactId&#x3D;xxx \     &#x2F;&#x2F;替换成自己生成的模板工程artifactId</span><br><span class="line">    -DarchetypeGroupId&#x3D;xxx \        &#x2F;&#x2F;替换成自己生成的模板工程groupId</span><br><span class="line">    -DarchetypeVersion&#x3D;xxx          &#x2F;&#x2F;替换成自己生成的模板工程version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
            <tag> archetype </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA+EmmyLua Lua开发环境搭建</title>
      <link href="/2021/11/12/IDEA-EmmyLua-Lua%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2021/11/12/IDEA-EmmyLua-Lua%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="IDEA安装EmmyLua插件"><a href="#IDEA安装EmmyLua插件" class="headerlink" title="IDEA安装EmmyLua插件"></a>IDEA安装EmmyLua插件</h3><ul><li><a href="https://emmylua.github.io/installation/repo.html" target="_blank" rel="noopener">https://emmylua.github.io/installation/repo.html</a></li></ul><h3 id="下载MoDebug"><a href="#下载MoDebug" class="headerlink" title="下载MoDebug"></a>下载MoDebug</h3><ul><li><a href="https://github.com/pkulchenko/MobDebug" target="_blank" rel="noopener">https://github.com/pkulchenko/MobDebug</a></li><li>从github下载MobDebug项目，把项目中的mobdebug.lua，拷贝到项目的src目录下，内核基于mobdebug.lua </li></ul><h3 id="关键步骤（mac安装）"><a href="#关键步骤（mac安装）" class="headerlink" title="关键步骤（mac安装）"></a>关键步骤（mac安装）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 安装lua</span><br><span class="line">brew install lua</span><br><span class="line"></span><br><span class="line">-- 安装luarocks工具</span><br><span class="line">brew install luarocks</span><br><span class="line"></span><br><span class="line">-- 安装luasocket</span><br><span class="line">luarocks install luasocket</span><br><span class="line"></span><br><span class="line">-- 安装lua-cjson（可选）</span><br><span class="line">luarocks install lua-cjson 2.1.0-1</span><br><span class="line"></span><br><span class="line">-- 安装redis-lua（可选）</span><br><span class="line">luarocks install redis-lua</span><br></pre></td></tr></table></figure><h3 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h3><ul><li><a href="https://emmylua.github.io/run/remote.html" target="_blank" rel="noopener">https://emmylua.github.io/run/remote.html</a></li></ul><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">--- Generated by EmmyLua(https://github.com/EmmyLua)</span><br><span class="line">--- Created by gy.</span><br><span class="line">--- DateTime: 2021/10/27 20:16</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">-- 调试配置相关代码，实际使用不需要 start--</span><br><span class="line">--require(<span class="string">"mobdebug"</span>).start()</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> cjson = require <span class="string">'cjson'</span></span><br><span class="line"><span class="built_in">local</span> redis = require <span class="string">'redis'</span></span><br><span class="line"><span class="built_in">local</span> host = <span class="string">"127.0.0.1"</span></span><br><span class="line"><span class="built_in">local</span> port = 6379</span><br><span class="line">client = redis.connect(host, port)</span><br><span class="line"></span><br><span class="line">redis.call = <span class="keyword">function</span>(cmd, ...)</span><br><span class="line">    <span class="built_in">return</span> assert(load(<span class="string">'return client:'</span> .. string.lower(cmd) .. <span class="string">'(...)'</span>))(...)</span><br><span class="line">end</span><br><span class="line">-- 调试配置相关代码，实际使用不需要 end--</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> KEYS = &#123; <span class="string">"test1"</span>, <span class="string">"test2"</span> &#125;</span><br><span class="line"><span class="built_in">local</span> ARGV = &#123; <span class="string">"1"</span>, <span class="string">'&#123;\"age\":\"23\",\"name\":\"test\"&#125;'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> value = redis.call(<span class="string">"GET"</span>, <span class="string">"key1"</span>)</span><br><span class="line"><span class="built_in">print</span>(value)</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> queueListRedisKey = KEYS[1]</span><br><span class="line"><span class="built_in">print</span>(queueListRedisKey)</span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> userInfoObj = cjson.decode(ARGV[2])</span><br><span class="line"><span class="built_in">print</span>(cjson.encode(userInfoObj))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lua </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ngrok实现内网穿透</title>
      <link href="/2021/07/22/ngrok%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>/2021/07/22/ngrok%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h3><p>申请一个自己的域名，假设用到的域名是<code>ngrok.xxx.com</code>，需要将<code>ngrok.xxx.com</code>和<code>*.ngrok.xxx.com</code>解析到自己的服务器上面</p><h3 id="配置go语言环境"><a href="#配置go语言环境" class="headerlink" title="配置go语言环境"></a>配置go语言环境</h3><p>ngrok是go语音写的，服务器上需要配置go语言环境，相关配置命令如下：</p><ul><li><p>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载</span></span><br><span class="line">wget https://storage.googleapis.com/golang/go1.9.1.linux-amd64.tar.gz</span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">tar -zxvf go1.9.1.linux-amd64.tar.gz</span><br><span class="line"><span class="comment">#移动到local目录</span></span><br><span class="line">mv go /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure></li><li><p>创建软连接</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建软连接</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/go/bin/* /usr/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试是否配置成功</span></span><br><span class="line">go env</span><br></pre></td></tr></table></figure><h3 id="安装ngrok"><a href="#安装ngrok" class="headerlink" title="安装ngrok"></a>安装ngrok</h3><ul><li>下载源码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/inconshreveable/ngrok.git</span><br></pre></td></tr></table></figure><ul><li>生成证书</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入ngrok源码的目录</span></span><br><span class="line"><span class="built_in">cd</span> ngrok</span><br><span class="line"><span class="comment"># 设置域名，这里使用  ngrok.xxx.com</span></span><br><span class="line"><span class="built_in">export</span> NGROK_DOMAIN=<span class="string">"ngrok.xxx.com"</span></span><br><span class="line"><span class="comment"># 然后依次执行以下命令即可</span></span><br><span class="line">openssl genrsa -out rootCA.key 2048</span><br><span class="line">openssl req -x509 -new -nodes -key rootCA.key -subj <span class="string">"/CN=<span class="variable">$NGROK_DOMAIN</span>"</span> -days 5000 -out rootCA.pem</span><br><span class="line">openssl genrsa -out device.key 2048</span><br><span class="line">openssl req -new -key device.key -subj <span class="string">"/CN=<span class="variable">$NGROK_DOMAIN</span>"</span> -out device.csr</span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000</span><br><span class="line"><span class="comment"># 替换原来证书</span></span><br><span class="line">cp rootCA.pem ../assets/client/tls/ngrokroot.crt</span><br><span class="line">cp device.crt ../assets/server/tls/snakeoil.crt</span><br><span class="line">cp device.key ../assets/server/tls/snakeoil.key</span><br></pre></td></tr></table></figure><ul><li>编译服务端</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/ngrok</span><br><span class="line">GOOS=<span class="variable">$GOOS</span> GOARCH=<span class="variable">$GOARCH</span> make release-server</span><br></pre></td></tr></table></figure><ul><li>编译各大平台客户端</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、Linux 32位：linux 386</span></span><br><span class="line"><span class="comment"># 2、Linux 64位：linux amd64</span></span><br><span class="line"><span class="comment"># 3、Windows 32位：windows 386</span></span><br><span class="line"><span class="comment"># 4、Windows 64位：windows amd64</span></span><br><span class="line"><span class="comment"># 5、Mac OS 32位：darwin 386</span></span><br><span class="line"><span class="comment"># 6、Mac OS 64位：darwin amd64</span></span><br><span class="line"><span class="comment"># 7、Linux ARM：linux arm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对应以上各平台，将$1、$2替换成对应的值</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/ngrok/</span><br><span class="line"><span class="comment"># GOOS=$1 GOARCH=$2 make release-client</span></span><br><span class="line"><span class="comment"># 如编译Mac OS 64位客户端</span></span><br><span class="line">GOOS=darwin GOARCH=amd64 make release-client</span><br></pre></td></tr></table></figure><ul><li>生成的客户端文件示例</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.../ngrok/bin<span class="variable">$tree</span></span><br><span class="line">.</span><br><span class="line">|-- darwin_amd64</span><br><span class="line">|   `-- ngrok</span><br><span class="line">|-- go-bindata</span><br><span class="line">|-- linux_386</span><br><span class="line">|   |-- ngrok</span><br><span class="line">|   `-- ngrokd</span><br><span class="line">|-- linux_arm</span><br><span class="line">|   `-- ngrok</span><br><span class="line">`-- windows_amd64</span><br><span class="line">    `-- ngrok.exe</span><br></pre></td></tr></table></figure><h3 id="启动服务端"><a href="#启动服务端" class="headerlink" title="启动服务端"></a>启动服务端</h3><p>开启后台运行，注意端口<code>8001</code>，<code>8443</code>和<code>4443</code>开启防火墙或安全规则放行，端口也可自行定义<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup /usr/<span class="built_in">local</span>/ngrok/bin/ngrokd -domain=<span class="string">"ngrok.xxx.com"</span> -tlsCrt=<span class="string">"/usr/local/ngrok/server.crt"</span> -tlsKey=<span class="string">"/usr/local/ngrok/server.key"</span> -httpAddr=<span class="string">":8001"</span> -httpsAddr=<span class="string">":8443"</span> -tunnelAddr=<span class="string">":4443"</span> -<span class="built_in">log</span>-level=<span class="string">"INFO"</span> &gt;/var/<span class="built_in">log</span>/ngrok.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p>将上面生成的客户端可执行文件拷贝到需要内网穿透的设备上即可，这里直接说多域名和多TCP内网穿透配置文件，直接在客户端同级目录下创建ngrok.cfg配置文件，注意server_addr端口要与tunnelAddr对应，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server_addr: ngrok.xxx.com:4443</span><br><span class="line">trust_host_root_certs: <span class="literal">false</span></span><br><span class="line">tunnels:</span><br><span class="line"> weixin:</span><br><span class="line">  subdomain: weixin</span><br><span class="line">  proto:</span><br><span class="line">   http: 8002</span><br><span class="line"> about:</span><br><span class="line">  subdomain: about</span><br><span class="line">  proto:</span><br><span class="line">   http: 192.168.0.1:80</span><br><span class="line"> ssh:</span><br><span class="line">  remote_port: 2020</span><br><span class="line">  proto:</span><br><span class="line">   tcp: 22</span><br></pre></td></tr></table></figure><h3 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h3><ul><li>启动特定转发</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ngrok -config ngrok.cfg -<span class="built_in">log</span> ngrok.log start weixin</span><br></pre></td></tr></table></figure><p>注：<code>-log ngrok.log</code>可以查看客户端日志，可去掉</p><ul><li>将所有配置转发</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ngrok -config ngrok.cfg -<span class="built_in">log</span> ngrok.log start-all</span><br></pre></td></tr></table></figure><p>启动后出现<code>online</code>字样说明内网穿透成功</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ngrok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac环境RocketMQ安装</title>
      <link href="/2021/07/21/Mac%E7%8E%AF%E5%A2%83RocketMQ%E5%AE%89%E8%A3%85/"/>
      <url>/2021/07/21/Mac%E7%8E%AF%E5%A2%83RocketMQ%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官网地址：<a href="http://rocketmq.apache.org/docs/quick-start/" target="_blank" rel="noopener">http://rocketmq.apache.org/docs/quick-start/</a></p><h3 id="运维管理"><a href="#运维管理" class="headerlink" title="运维管理"></a>运维管理</h3><p><a href="https://github.com/apache/rocketmq/blob/master/docs/cn/operation.md" target="_blank" rel="noopener">https://github.com/apache/rocketmq/blob/master/docs/cn/operation.md</a></p><h3 id="rocketMq-安装"><a href="#rocketMq-安装" class="headerlink" title="rocketMq 安装"></a>rocketMq 安装</h3><h4 id="解压与编译"><a href="#解压与编译" class="headerlink" title="解压与编译"></a>解压与编译</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">unzip rocketmq-all-4.9.0-source-release.zip</span><br><span class="line"><span class="built_in">cd</span> rocketmq-all-4.9.0/</span><br><span class="line">mvn -Prelease-all -DskipTests clean install -U</span><br><span class="line"><span class="built_in">cd</span> distribution/target/rocketmq-4.9.0/rocketmq-4.9.0</span><br></pre></td></tr></table></figure><h4 id="启动Name-Server服务"><a href="#启动Name-Server服务" class="headerlink" title="启动Name Server服务"></a>启动Name Server服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.启动NameServer</span></span><br><span class="line">nohup sh bin/mqnamesrv &amp;</span><br><span class="line"><span class="comment"># 2.查看启动日志</span></span><br><span class="line">tail -f ~/logs/rocketmqlogs/namesrv.log</span><br></pre></td></tr></table></figure><h4 id="修改内存大小"><a href="#修改内存大小" class="headerlink" title="修改内存大小"></a>修改内存大小</h4><p>RocketMq默认内存较大，启动Borker如果因为内存不足启动失败，需要修改如下配置文件，修改JVM内存大小</p><ul><li>runborker.sh</li><li>runserver.sh</li></ul><p>改为： JAVA_OPT=”${JAVA_OPT} -server -Xms256m -Xmx256m -Xmn128m”</p><h4 id="启动borker"><a href="#启动borker" class="headerlink" title="启动borker"></a>启动borker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.启动Broker</span></span><br><span class="line">nohup sh bin/mqbroker -n 127.0.0.1:9876 &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义配置文件</span></span><br><span class="line"><span class="comment"># nohup sh bin/mqbroker -n 192.168.0.5:9876 -c conf/broker.conf autoCreateTopicEnable=true &amp;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.查看启动日志</span></span><br><span class="line">tail -f ~/logs/rocketmqlogs/broker.log</span><br></pre></td></tr></table></figure><h4 id="关闭rocketMq"><a href="#关闭rocketMq" class="headerlink" title="关闭rocketMq"></a>关闭rocketMq</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭NameServer</span></span><br><span class="line">sh bin/mqshutdown namesrv</span><br><span class="line"><span class="comment"># 关闭Borker</span></span><br><span class="line">sh bin/mqshutdown broker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于docker配置mysql主从复制</title>
      <link href="/2021/07/20/%E5%9F%BA%E4%BA%8Edocker%E9%85%8D%E7%BD%AEmysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>/2021/07/20/%E5%9F%BA%E4%BA%8Edocker%E9%85%8D%E7%BD%AEmysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><ul><li>主节点容器创建</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mastermysql  -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /usr/<span class="built_in">local</span>/docker/mysql/master/data:/var/lib/mysql -v /usr/<span class="built_in">local</span>/docker/mysql/master/conf/my.cnf:/etc/mysql/my.cnf  mysql:5.7.19</span><br></pre></td></tr></table></figure><ul><li>主节点配置my.cnf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="built_in">log</span>-bin=mysql-bin</span><br><span class="line">server-id=1</span><br><span class="line">binlog-ignore-db=information_schema</span><br><span class="line">binlog-ignore-db=cluster</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">binlog-do-db=demo</span><br></pre></td></tr></table></figure><ul><li>从节点容器创建</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name slavemysql  -d -p 3308:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /usr/<span class="built_in">local</span>/docker/mysql/slave/data:/var/lib/mysql -v /usr/<span class="built_in">local</span>/docker/mysql/slave/conf/my.cnf:/etc/mysql/my.cnf  mysql:5.7.19</span><br></pre></td></tr></table></figure><ul><li>从节点配置my.cnf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="built_in">log</span>-bin=mysql-bin</span><br><span class="line">server-id=2</span><br><span class="line">binlog-ignore-db=information_schema</span><br><span class="line">binlog-ignore-db=cluster</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">replicate-do-db=demo</span><br><span class="line">replicate-ignore-db=mysql</span><br><span class="line"><span class="built_in">log</span>-slave-updates</span><br><span class="line">slave-skip-errors=all</span><br><span class="line">slave-net-timeout=60</span><br></pre></td></tr></table></figure><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><ul><li>主：docker exec -it mastermysql bash</li><li>从：docker exec -it slavemysql bash</li></ul><h3 id="授权复制权限"><a href="#授权复制权限" class="headerlink" title="授权复制权限"></a>授权复制权限</h3><ul><li>创建用户</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user <span class="string">'slave'</span>@<span class="string">'%'</span> identified by <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure><ul><li>授权</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO <span class="string">'slave'</span>@<span class="string">'%'</span>;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="查询节点状态"><a href="#查询节点状态" class="headerlink" title="查询节点状态"></a>查询节点状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主：</span></span><br><span class="line">show master status;</span><br><span class="line"><span class="comment"># 从：</span></span><br><span class="line">show slave status;</span><br></pre></td></tr></table></figure><h3 id="从节点配置主从连接"><a href="#从节点配置主从连接" class="headerlink" title="从节点配置主从连接"></a>从节点配置主从连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br><span class="line"></span><br><span class="line">change master to master_host=<span class="string">'172.17.0.3'</span>,master_user=<span class="string">'slave'</span>,master_password=<span class="string">'123456'</span>,master_log_file=<span class="string">'mysql-bin.000007'</span>,master_log_pos=871,master_port=3306;</span><br><span class="line"></span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure><p>注：查询主容器ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect --format=<span class="string">'&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;'</span> 容器名称|容器id</span><br></pre></td></tr></table></figure><h3 id="创建只读用户"><a href="#创建只读用户" class="headerlink" title="创建只读用户"></a>创建只读用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create user <span class="string">'reader'</span>@<span class="string">'%'</span> identified by <span class="string">'123456'</span>;</span><br><span class="line"></span><br><span class="line">GRANT Select ON *.* TO <span class="string">'reader'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Caffeine缓存</title>
      <link href="/2021/07/20/Caffeine%E7%BC%93%E5%AD%98/"/>
      <url>/2021/07/20/Caffeine%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>Caffeine提供了灵活的构造方法，从而创建可以满足如下特性的本地缓存：</p><ol><li>自动把数据加载到本地缓存中，并且可以配置异步；</li><li>基于数量剔除策略；</li><li>基于失效时间剔除策略，这个时间是从最后一次访问或者写入算起；</li><li>异步刷新；</li><li>Key会被包装成Weak引用；</li><li>Value会被包装成Weak或者Soft引用，从而能被GC掉，而不至于内存泄漏；</li><li>数据剔除提醒；</li><li>写入广播机制；</li><li>缓存访问可以统计；</li></ol><h3 id="过期机制"><a href="#过期机制" class="headerlink" title="过期机制"></a>过期机制</h3><p>Caffeine的过期机制都是在构造Cache的时候申明，主要有如下几种：</p><ol><li>expireAfterWrite：表示自从最后一次写入后多久就会过期；</li><li>expireAfterAccess：表示自从最后一次访问（写入或者读取）后多久就会过期；</li><li>expireAfter：自定义过期策略；</li></ol><h3 id="刷新机制"><a href="#刷新机制" class="headerlink" title="刷新机制"></a>刷新机制</h3><p>在构造Cache时通过refreshAfterWrite方法指定刷新周期，例如refreshAfterWrite(10, TimeUnit.SECONDS)表示10秒钟刷新一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.build(<span class="keyword">new</span> CacheLoader&lt;String, String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">load</span><span class="params">(String k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里我们就可以从数据库或者其他地方查询最新的数据</span></span><br><span class="line">        <span class="keyword">return</span> getValue(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>Caffeine的刷新机制是「被动」的</li><li>它的实现原理是在get方法中，调用afterRead的时候，调用refreshIfNeeded方法判断是否需要刷新数据</li></ul><h3 id="剔除机制"><a href="#剔除机制" class="headerlink" title="剔除机制"></a>剔除机制</h3><p>在构造Cache时可以通过removalListener方法申明剔除监听器，从而可以跟踪本地缓存中被剔除的数据历史信息。根据RemovalCause.java枚举值可知，剔除策略有如下5种：</p><ul><li><p>「EXPLICIT」：调用方法（例如：cache.invalidate(key)、cache.invalidateAll）显示剔除数据；</p></li><li><p>「REPLACED」：不是真正被剔除，而是用户调用一些方法（例如：put()，putAll()等）盖了之前的值；</p></li><li><p>「COLLECTED」：表示缓存中的Key或者Value被垃圾回收掉了；</p></li><li><p>「EXPIRED」: expireAfterWrite/expireAfterAccess约定时间内没有任何访问导致被剔除；</p></li><li><p>「SIZE」：超过maximumSize限制的元素个数被剔除的原因；</p></li></ul><h3 id="GuavaCache和Caffeine差异"><a href="#GuavaCache和Caffeine差异" class="headerlink" title="GuavaCache和Caffeine差异"></a>GuavaCache和Caffeine差异</h3><ol><li><p>剔除算法方面，GuavaCache采用的是「LRU」算法，而Caffeine采用的是「Window TinyLFU」算法，这是两者之间最大，也是根本的区别。</p></li><li><p>立即失效方面，Guava会把立即失效 (例如：expireAfterAccess(0) and expireAfterWrite(0)) 转成设置最大Size为0。这就会导致剔除提醒的原因是SIZE而不是EXPIRED。Caffiene能正确识别这种剔除原因。</p></li><li><p>取代提醒方面，Guava只要数据被替换，不管什么原因，都会触发剔除监听器。而Caffiene在取代值和先前值的引用完全一样时不会触发监听器。</p></li><li><p>异步化方方面，Caffiene的很多工作都是交给线程池去做的（默认：ForkJoinPool.commonPool()），例如：剔除监听器，刷新机制，维护工作等。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Caffeine </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>easy-mock服务器部署</title>
      <link href="/2021/07/20/easy-mock%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
      <url>/2021/07/20/easy-mock%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li>github源码：<a href="https://github.com/easy-mock/easy-mock" target="_blank" rel="noopener">https://github.com/easy-mock/easy-mock</a></li><li>mock语法：<a href="http://mockjs.com/examples.html" target="_blank" rel="noopener">http://mockjs.com/examples.html</a></li></ul><h3 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h3><h4 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 下载node</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">wget https://nodejs.org/dist/v8.9.0/node-v8.9.0-linux-x64.tar.xz</span><br><span class="line"><span class="comment">## 解压</span></span><br><span class="line">tar xf node-v8.9.0-linux-x64.tar.xz</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line"><span class="comment">## 重命名</span></span><br><span class="line">mv src/node-v8.9.0-linux-x64 node</span><br><span class="line"> </span><br><span class="line"><span class="comment">## 将node添加至path</span></span><br><span class="line">vi ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> NODE_HOME=/usr/<span class="built_in">local</span>/node</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$NODE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"> </span><br><span class="line"><span class="comment">## 安装成功</span></span><br><span class="line">node -v  // 安装成功会显示Node版本</span><br></pre></td></tr></table></figure><h4 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz    </span><br><span class="line">tar -zxvf mongodb-linux-x86_64-3.0.6.tgz</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">mv src/mongodb-linux-x86_64-3.0.6 mongodb</span><br><span class="line"> </span><br><span class="line"><span class="comment">## path</span></span><br><span class="line">vi ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> MONGO_HOME=/usr/<span class="built_in">local</span>/mongodb</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$MONGO_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>下载完毕之后，创建配置文件并启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##  创建数据目录</span></span><br><span class="line">mkdir /data</span><br><span class="line">mkdir /data/mongo</span><br><span class="line"> </span><br><span class="line"><span class="comment">## 创建配置文件</span></span><br><span class="line">vi /data/mongo/mongodb.cnf</span><br></pre></td></tr></table></figure><p>其中配置文件的内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## /data/mongo/mongodb.cnf</span></span><br><span class="line">dbpath=/data/mongo/</span><br><span class="line"> </span><br><span class="line">logpath=/data/mongo/mongo.log</span><br><span class="line"> </span><br><span class="line">logappend=<span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">fork=<span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">port=27017</span><br><span class="line"> </span><br><span class="line">journal=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>通过读取配置文件启动 MongoDB 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 配置文件方式启动mongo</span></span><br><span class="line">mongod -f /data/mongo/mongodb.cnf</span><br><span class="line"> </span><br><span class="line">mongod -f /data/mongo/mongodb.cnf &amp; （放到后台执行）</span><br></pre></td></tr></table></figure><h4 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">wget http://download.redis.io/releases/redis-2.8.17.tar.gz</span><br><span class="line">tar xzf redis-2.8.17.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-2.8.17</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>Make 完后 redis-2.8.17 目录下会出现编译后的 Redis 服务程序 redis-server，还有用于测试的客户端程序 redis-cli，两个程序位于安装目录 src 目录下。</p><p>启动 Redis 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> src</span><br><span class="line">./redis-server &amp;</span><br></pre></td></tr></table></figure><h4 id="部署easy-mock"><a href="#部署easy-mock" class="headerlink" title="部署easy-mock"></a>部署easy-mock</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/easy-mock/easy-mock.git</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line"><span class="built_in">cd</span> easy-mock &amp;&amp; npm install</span><br></pre></td></tr></table></figure><p>配置文件路径：<code>config/default.json</code>，可根据情况修改配置（默认不需要修改配置文件）</p><h4 id="运行easy-mock"><a href="#运行easy-mock" class="headerlink" title="运行easy-mock"></a>运行easy-mock</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 运行</span></span><br><span class="line">[root@1.1.1.1 easy-mock]<span class="comment"># npm run dev</span></span><br><span class="line"> </span><br><span class="line">&gt; easy-mock@1.6.0 dev /usr/libra/easy-mock</span><br><span class="line">&gt; nodemon --ignore views/ --ignore public/ app</span><br><span class="line"> </span><br><span class="line">[nodemon] 1.14.11</span><br><span class="line">[nodemon] to restart at any time, enter `rs`</span><br><span class="line">[nodemon] watching: *.*</span><br><span class="line">[nodemon] starting `node app.js`</span><br><span class="line">server started at http://0.0.0.0:7300</span><br></pre></td></tr></table></figure><p>通过上面的部署，便可以访问<code>http://127.0.0.1:7300</code>访问 Easy Mock的页面了</p><p>用PM2对node进程守卫,保持永久在线.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 安装pm2 </span></span><br><span class="line">npm install -g pm2</span><br><span class="line"><span class="comment">## 使用pm2 运行全需要先build</span></span><br><span class="line">npm run build</span><br><span class="line">NODE_ENV=production pm2 start app.js</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> easy-mock </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
